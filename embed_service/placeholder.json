[{"title": "Flutter documentation | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Set up your environment and start building.", "Dip into the rich set of Flutter widgets available in the SDK.", "Bookmark the API reference docs for the Flutter framework.", "Browse the cookbook for many easy Flutter recipes.", "Check out the Flutter examples.", "View the many videos on the Flutter YouTube channel.", "To see changes to the site since our last release,\nsee What\u2019s new.", "Once you\u2019ve gone through Get started,\nincluding Write your first Flutter app,\nhere are some next steps.", "Coming from another platform? Check out Flutter for:\nAndroid, SwiftUI, UIKit, React Native, and\nXamarin.Forms developers.", "Check out the Introducing Flutter series.\nLearn Flutter basics like\nhow do I make my first Flutter app?\nIn Flutter, \u201ceverything is a widget\u201d!\nLearn more about Stateless and Stateful\nwidgets in What is State?", "Only have 60 seconds? Learn how to build and deploy a Flutter App!", "Dive deeper into how Flutter works under the hood!\nLearn why you write standalone widgets instead of\nusing helper methods or\nwhat is \u201cBuildContext\u201d and how is it used?", "To learn about all of the Flutter video series,\nsee our videos page.", "We release new videos almost every week on the Flutter YouTube channel:", "Explore more Flutter videos", "The documentation on this site reflects the\nlatest stable release of Flutter.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev/", "base_url": "https://docs.flutter.dev/"}, {"title": "Writing custom platform-specific code | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide describes how to write custom platform-specific code.\nSome platform-specific functionality is available\nthrough existing packages;\nsee using packages.", "info Note:\n  The information in this page is valid for most platforms,\n  but platform-specific code for the web generally uses\n  JS interoperability or the dart:html library instead.", "Flutter uses a flexible system that allows you to call\nplatform-specific APIs in a language that works directly\nwith those APIs:", "Flutter\u2019s builtin platform-specific API support\ndoesn\u2019t rely on code generation,\nbut rather on a flexible message passing style.\nAlternatively, you can use the Pigeon\npackage for sending structured typesafe messages\nwith code generation:", "The Flutter portion of the app sends messages to its host,\nthe non-Dart portion of the app, over a platform channel.", "The host listens on the platform channel, and receives the message.\nIt then calls into any number of platform-specific APIs\u2014using\nthe native programming language\u2014and sends a response back to the\nclient, the Flutter portion of the app.", "info Note:\n  This guide addresses using the platform channel mechanism\n  if you need to use the platform\u2019s APIs in a non-Dart language.\n  But you can also write platform-specific Dart code\n  in your Flutter app by inspecting the\n  defaultTargetPlatform property.\n  Platform adaptations lists some\n  platform-specific adaptations that Flutter\n  automatically performs for you in the framework.", "Messages are passed between the client (UI)\nand host (platform) using platform\nchannels as illustrated in this diagram:", "Messages and responses are passed asynchronously,\nto ensure the user interface remains responsive.", "info Note:\n  Even though Flutter sends messages to and from Dart asynchronously,\n  whenever you invoke a channel method, you must invoke that method on the\n  platform\u2019s main thread. See the section on threading\n  for more information.", "On the client side, MethodChannel enables sending\nmessages that correspond to method calls. On the platform side,\nMethodChannel on Android (MethodChannelAndroid) and\nFlutterMethodChannel on iOS (MethodChanneliOS)\nenable receiving method calls and sending back a\nresult. These classes allow you to develop a platform plugin\nwith very little \u2018boilerplate\u2019 code.", "info Note:\n  If desired, method calls can also be sent in the reverse direction,\n  with the platform acting as client to methods implemented in Dart.\n  For a concrete example, check out the quick_actions plugin.", "The standard platform channels use a standard message codec that supports\nefficient binary serialization of simple JSON-like values, such as booleans,\nnumbers, Strings, byte buffers, and Lists and Maps of these\n(see StandardMessageCodec for details).\nThe serialization and deserialization of these values to and from\nmessages happens automatically when you send and receive values.", "The following table shows how Dart values are received on the\nplatform side and vice versa:", "The following code demonstrates how to call\na platform-specific API to retrieve and display\nthe current battery level.  It uses\nthe Android BatteryManager API,\nthe iOS device.batteryLevel API,\nthe Windows GetSystemPowerStatus API,\nand the Linux UPower API with a single\nplatform message, getBatteryLevel().", "The example adds the platform-specific code inside\nthe main app itself.  If you want to reuse the\nplatform-specific code for multiple apps,\nthe project creation step is slightly different\n(see developing packages),\nbut the platform channel code\nis still written in the same way.", "info Note:\n  The full, runnable source-code for this example is\n  available in /examples/platform_channel/\n  for Android with Java, iOS with Objective-C,\n  Windows with C++, and Linux with C.\n  For iOS with Swift,\n  see /examples/platform_channel_swift/.", "Start by creating a new app:", "By default, our template supports writing Android code using Kotlin,\nor iOS code using Swift. To use Java or Objective-C,\nuse the -i and/or -a flags:", "The app\u2019s State class holds the current app state.\nExtend that to hold the current battery state.", "First, construct the channel. Use a MethodChannel with a single\nplatform method that returns the battery level.", "The client and host sides of a channel are connected through\na channel name passed in the channel constructor.\nAll channel names used in a single app must\nbe unique; prefix the channel name with a unique \u2018domain\nprefix\u2019, for example: samples.flutter.dev/battery.", "Next, invoke a method on the method channel,\nspecifying the concrete method to call using\nthe String identifier getBatteryLevel.\nThe call might fail\u2014for example,\nif the platform doesn\u2019t support the\nplatform API (such as when running in a simulator),\nso wrap the invokeMethod call in a try-catch statement.", "Use the returned result to update the user interface state in _batteryLevel\ninside setState.", "Finally, replace the build method from the template to\ncontain a small user interface that displays the battery\nstate in a string, and a button for refreshing the value.", "Start by opening the Android host portion of your Flutter app\nin Android Studio:", "Select the menu item File > Open\u2026", "Navigate to the directory holding your Flutter app,\nand select the android folder inside it. Click OK.", "Open the file MainActivity.kt located in the kotlin folder in the\nProject view.", "Inside the configureFlutterEngine() method, create a MethodChannel and call\nsetMethodCallHandler(). Make sure to use the same channel name as\nwas used on the Flutter client side.", "Add the Android Kotlin code that uses the Android battery APIs to\nretrieve the battery level. This code is exactly the same as you\nwould write in a native Android app.", "First, add the needed imports at the top of the file:", "Next, add the following method in the MainActivity class,\nbelow the configureFlutterEngine() method:", "Finally, complete the setMethodCallHandler() method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument.\nThe implementation of this platform method calls the\nAndroid code written in the previous step, and returns a response for both\nthe success and error cases using the result argument.\nIf an unknown method is called, report that instead.", "Remove the following code:", "And replace with the following:", "Start by opening the Android host portion of your Flutter app\nin Android Studio:", "Select the menu item File > Open\u2026", "Navigate to the directory holding your Flutter app,\nand select the android folder inside it. Click OK.", "Open the MainActivity.java file located in the java folder in the\nProject view.", "Next, create a MethodChannel and set a MethodCallHandler\ninside the configureFlutterEngine() method.\nMake sure to use the same channel name as was used on the\nFlutter client side.", "Add the Android Java code that uses the Android battery APIs to\nretrieve the battery level. This code is exactly the same as you\nwould write in a native Android app.", "First, add the needed imports at the top of the file:", "Then add the following as a new method in the activity class,\nbelow the configureFlutterEngine() method:", "Finally, complete the setMethodCallHandler() method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument. The implementation of\nthis platform method calls the Android code written\nin the previous step, and returns a response for both\nthe success and error cases using the result argument.\nIf an unknown method is called, report that instead.", "Remove the following code:", "And replace with the following:", "You should now be able to run the app on Android. If using the Android\nEmulator, set the battery level in the Extended Controls panel\naccessible from the \u2026 button in the toolbar.", "Start by opening the iOS host portion of your Flutter app in Xcode:", "Select the menu item File > Open\u2026.", "Navigate to the directory holding your Flutter app, and select the ios\nfolder inside it. Click OK.", "Add support for Swift in the standard template setup that uses Objective-C:", "Expand Runner > Runner in the Project navigator.", "Open the file AppDelegate.swift located under Runner > Runner\nin the Project navigator.", "Override the application:didFinishLaunchingWithOptions: function and create\na FlutterMethodChannel tied to the channel name\nsamples.flutter.dev/battery:", "Next, add the iOS Swift code that uses the iOS battery APIs to retrieve\nthe battery level. This code is exactly the same as you\nwould write in a native iOS app.", "Add the following as a new method at the bottom of AppDelegate.swift:", "Finally, complete the setMethodCallHandler() method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument.\nThe implementation of this platform method calls\nthe iOS code written in the previous step. If an unknown method\nis called, report that instead.", "Start by opening the iOS host portion of the Flutter app in Xcode:", "Select the menu item File > Open\u2026.", "Navigate to the directory holding your Flutter app,\nand select the ios folder inside it. Click OK.", "Make sure the Xcode projects builds without errors.", "Open the file AppDelegate.m, located under Runner > Runner\nin the Project navigator.", "Create a FlutterMethodChannel and add a handler inside the application\ndidFinishLaunchingWithOptions: method.\nMake sure to use the same channel name\nas was used on the Flutter client side.", "Next, add the iOS ObjectiveC code that uses the iOS battery APIs to\nretrieve the battery level. This code is exactly the same as you\nwould write in a native iOS app.", "Add the following method in the AppDelegate class, just before @end:", "Finally, complete the setMethodCallHandler() method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument. The implementation of\nthis platform method calls the iOS code written in the previous step,\nand returns a response for both the success and error cases using\nthe result argument. If an unknown method is called, report that instead.", "You should now be able to run the app on iOS.\nIf using the iOS Simulator,\nnote that it doesn\u2019t support battery APIs,\nand the app displays \u2018Battery level not available\u2019.", "Start by opening the Windows host portion of your Flutter app in Visual Studio:", "Run flutter build windows in your project directory once to generate\nthe Visual Studio solution file.", "Select Open a project or solution.", "Navigate to the directory holding your Flutter app, then into the build\nfolder, then the windows folder, then select the batterylevel.sln file.\nClick Open.", "Add the C++ implementation of the platform channel method:", "Expand batterylevel > Source Files in the Solution Explorer.", "Open the file flutter_window.cpp.", "First, add the necessary includes to the top of the file, just\nafter #include \"flutter_window.h\":", "Edit the FlutterWindow::OnCreate method and create\na flutter::MethodChannel tied to the channel name\nsamples.flutter.dev/battery:", "Next, add the C++ code that uses the Windows battery APIs to\nretrieve the battery level. This code is exactly the same as\nyou would write in a native Windows application.", "Add the following as a new function at the top of\nflutter_window.cpp just after the #include section:", "Finally, complete the setMethodCallHandler() method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument.\nThe implementation of this platform method calls\nthe Windows code written in the previous step. If an unknown method\nis called, report that instead.", "Remove the following code:", "And replace with the following:", "You should now be able to run the application on Windows.\nIf your device doesn\u2019t have a battery,\nit displays \u2018Battery level not available\u2019.", "Start by opening the macOS host portion of your Flutter app in Xcode:", "Select the menu item File > Open\u2026.", "Navigate to the directory holding your Flutter app, and select the macos\nfolder inside it. Click OK.", "Add the Swift implementation of the platform channel method:", "Expand Runner > Runner in the Project navigator.", "Open the file MainFlutterWindow.swift located under Runner > Runner\nin the Project navigator.", "First, add the necessary import to the top of the file, just after\nimport FlutterMacOS:", "Create a FlutterMethodChannel tied to the channel name\nsamples.flutter.dev/battery in the awakeFromNib method:", "Next, add the macOS Swift code that uses the IOKit battery APIs to retrieve\nthe battery level. This code is exactly the same as you\nwould write in a native macOS app.", "Add the following as a new method at the bottom of MainFlutterWindow.swift:", "Finally, complete the setMethodCallHandler method added earlier.\nYou need to handle a single platform method, getBatteryLevel(),\nso test for that in the call argument.\nThe implementation of this platform method calls\nthe macOS code written in the previous step. If an unknown method\nis called, report that instead.", "You should now be able to run the application on macOS.\nIf your device doesn\u2019t have a battery,\nit displays \u2018Battery level not available\u2019.", "For this example you need to install the upower developer headers.\nThis is likely available from your distribution, for example with:", "Start by opening the Linux host portion of your Flutter app in the editor\nof your choice. The instructions below are for Visual Studio Code with the\n\u201cC/C++\u201d and \u201cCMake\u201d extensions installed, but can be adjusted for other IDEs.", "Launch Visual Studio Code.", "Open the linux directory inside your project.", "Choose Yes in the prompt asking: Would you like to configure project \"linux\"?.\nThis enables C++ autocomplete.", "Open the file my_application.cc.", "First, add the necessary includes to the top of the file, just\nafter #include <flutter_linux/flutter_linux.h:", "Add an FlMethodChannel to the _MyApplication struct:", "Make sure to clean it up in my_application_dispose:", "Edit the my_application_activate method and initialize\nbattery_channel using the channel name\nsamples.flutter.dev/battery, just after the call to\nfl_register_plugins:", "Next, add the C code that uses the Linux battery APIs to\nretrieve the battery level. This code is exactly the same as\nyou would write in a native Linux application.", "Add the following as a new function at the top of\nmy_application.cc just after the G_DEFINE_TYPE line:", "Finally, add the battery_method_call_handler function referenced\nin the earlier call to fl_method_channel_set_method_call_handler.\nYou need to handle a single platform method, getBatteryLevel,\nso test for that in the method_call argument.\nThe implementation of this function calls\nthe Linux code written in the previous step. If an unknown method\nis called, report that instead.", "Add the following code after the get_battery_level function:", "You should now be able to run the application on Linux.\nIf your device doesn\u2019t have a battery,\nit displays \u2018Battery level not available\u2019.", "The previous example uses MethodChannel\nto communicate between the host and client,\nwhich isn\u2019t typesafe. Calling and receiving\nmessages depends on the host and client declaring\nthe same arguments and datatypes in order for messages to work.\nYou can use the Pigeon package as\nan alternative to MethodChannel\nto generate code that sends messages in a\nstructured, typesafe manner.", "With Pigeon, the messaging protocol is defined\nin a subset of Dart that then generates messaging\ncode for Android or iOS. You can find a more complete\nexample and more information on the pigeon\npage on pub.dev.", "Using Pigeon eliminates the need to match\nstrings between host and client\nfor the names and datatypes of messages.\nIt supports: nested classes, grouping\nmessages into APIs, generation of\nasynchronous wrapper code and sending messages\nin either direction. The generated code is readable\nand guarantees there are no conflicts between\nmultiple clients of different versions.\nSupported languages are Objective-C, Java, Kotlin,\nand Swift (with Objective-C interop).", "If you expect to use your platform-specific code\nin multiple Flutter apps, you might consider\nseparating the code into a platform plugin located\nin a directory outside your main application.\nSee developing packages for details.", "To share your platform-specific code with other developers\nin the Flutter ecosystem, see publishing packages.", "Besides the above mentioned MethodChannel,\nyou can also use the more basic\nBasicMessageChannel, which supports basic,\nasynchronous message passing using a custom message codec.\nYou can also use the specialized BinaryCodec,\nStringCodec, and JSONMessageCodec\nclasses, or create your own codec.", "You might also check out an example of a custom codec\nin the cloud_firestore plugin,\nwhich is able to serialize and deserialize many more\ntypes than the default types.", "When invoking channels on the platform side destined for Flutter,\ninvoke them on the platform\u2019s main thread.\nWhen invoking channels in Flutter destined for the platform side,\neither invoke them from any Isolate that is the root\nIsolate, or that is registered as a background Isolate.\nThe handlers for the platform side can execute on the platform\u2019s main thread\nor they can execute on a background thread if using a Task Queue.\nYou can invoke the platform side handlers asynchronously\nand on any thread.", "info Note:\n  On Android, the platform\u2019s main thread is sometimes\n  called the \u201cmain thread\u201d, but it is technically defined\n  as the UI thread. Annotate methods that need\n  to be run on the UI thread with @UiThread.\n  On iOS, this thread is officially\n  referred to as the main thread.", "Plugins and channels can be used by any Isolate, but that Isolate has to be\na root Isolate (the one created by Flutter) or registered as a background\nIsolate for a root Isolate.", "The following example shows how to register a background Isolate in order to\nuse a plugin from a background Isolate.", "In order for a channel\u2019s platform side handler to\nexecute on a background thread, you must use the\nTask Queue API. Currently this feature is only\nsupported on iOS and Android.", "info Note:\n  In release 2.10, the Task Queue API is only available on the master channel\n  for iOS.", "info Note:\n  In release 2.10, the Task Queue API is only available on the master channel\n  for iOS.", "To comply with channels\u2019 UI thread requirement,\nyou might need to jump from a background thread\nto Android\u2019s UI thread to execute a channel method.\nIn Android, you can accomplish this by post()ing a\nRunnable to Android\u2019s UI thread Looper,\nwhich causes the Runnable to execute on the\nmain thread at the next opportunity.", "To comply with channel\u2019s main thread requirement,\nyou might need to jump from a background thread to\niOS\u2019s main thread to execute a channel method.\nYou can accomplish this in iOS by executing a\nblock on the main dispatch queue:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/platform-channels", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter Brand Guidelines | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The \u201cFlutter\u201d name and logo are trademarks owned by Google.\nThese Brand Guidelines describe the appropriate uses of the Flutter\ntrademarks by members of the developer community who have obtained our\nconsent to use the trademarks pursuant to the Flutter Terms of Service.\nThese guidelines will ensure that the Flutter trademarks are used in a\nmanner that promotes Google\u2019s mission to provide a free and open source\nSDK for crafting high-quality native interfaces on iOS and\nAndroid in record time, and are not associated with objectionable material,\nas determined by Google.", "Use of the Flutter trademarks that is not expressly permitted by these\nguidelines is prohibited absent written permission from Google.", "The official Flutter assets and further guidelines on representing the brand\ncan be found at Representing the Flutter Brand.", "You are free to use the Flutter trademarks: (i) in connection with your\ndownload and use of the Flutter SDK to build and develop\napps, (ii) in training materials (e.g., video tutorials, online publications,\netc.) that provide instructions or tips regarding how to use the Flutter\nSDK to build and develop apps, and (iii) to show your support for\nthe use of the Flutter SDK by members of the developer community.", "These guidelines do not restrict your right to use the \u201cFlutter\u201d name\nin connection with descriptions of the Flutter SDK that would be\nconsidered \u201cfair use.\u201d  For example, you may use the \u201cFlutter\u201d\nname to make truthful factual statements (e.g., \u201cbuilt with the Flutter\nSDK\u201d) or to accurately describe a feature of the Flutter SDK.", "You may use the Flutter trademarks on your personal website, personal\nblog, or social media account to show your support for the Flutter SDK,\nprovided you do not use the Flutter trademarks in a way that\ncould confuse people into thinking that your site is an official Google\nsite or that Google has sponsored or endorsed your site. In the case of\nwebsites or personal blogs, this means you should not use the Flutter\ntrademarks as the primary element on the webpage (e.g., in the masthead\nof the webpage or the title of the blog). In the case of social media\naccounts, this means you should not use the Flutter trademarks in the\nbackground, in your profile image or in your social media username.", "In addition to the general rules discussed above, below are specific\nrules governing the proper use of the Flutter trademarks.", "To allow for the use of the Flutter trademarks by the Flutter community,\nbelow are specific exceptions to the rules described above:", "Local Flutter user groups may: (i) use the \u201cFlutter\u201d name\nas part of their social media username in the following format:\n\u201cFlutter + [name of country/city]\u201d (e.g., \u201cFlutter France\u201d); and (ii)\nuse the Flutter logo in the national colors of the country where the\nuser group is based (e.g., for a user group based in France,\nthe colors blue, white and red), provided the Flutter logo is otherwise\nunaltered.  Such social media accounts should include a disclaimer that\nclarifies that it is not an official Google account.", "You may use the Flutter trademarks as part of the name of a newsletter\nor related community content (e.g., Flutter training courses,\nFlutter community forums) whose purpose is to promote the use of the\nFlutter SDK by members of the developer community.\nWhere the Flutter trademarks are displayed on a website as part of a\ncommunity site name, you should use the trademark symbol TM\nafter the most prominent appearance of the \u201cFlutter\u201d name and include\nthe following text: \u201cFlutter and the related logo are trademarks of\nGoogle LLC.  We are not endorsed by or affiliated with Google LLC.\u201d\nWhere the Flutter trademarks are displayed on a social media account\nas part of a community site name, you should include a disclaimer that\nclarifies that it is not an official Google account.", "[Unofficial Flutter Events] You may use the Flutter trademarks as part of the name\nof a community event (e.g. conference), but please make sure to include the following disclaimer\non the event website in a prominent and easy-to-see spot:  \u201cFlutter and the related logo are trademarks of Google LLC.\n[Title of event] is not affiliated with or otherwise sponsored by Google LLC.\u201d", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//brand", "base_url": "https://docs.flutter.dev/"}, {"title": "Accessibility | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Ensuring apps are accessible to a broad range of users is an essential\npart of building a high-quality app. Applications that are poorly\ndesigned create barriers to people of all ages. The UN Convention on\nthe Rights of Persons with Disabilities states the moral and legal\nimperative to ensure universal access to information systems; countries\naround the world enforce accessibility as a requirement; and companies\nrecognize the business advantages of maximizing access to their services.", "We strongly encourage you to include an accessibility checklist \nas a key criteria before shipping your app. Flutter is committed to\nsupporting developers in making their apps more accessible, and includes\nfirst-class framework support for accessibility in addition to that\nprovided by the underlying operating system, including:", "Details of these features are discussed below.", "In addition to testing for these specific topics,\nwe recommend using automated accessibility scanners:", "Both Android and iOS contain system settings to configure the desired font\nsizes used by apps. Flutter text widgets respect this OS setting when\ndetermining font sizes.", "Font sizes are calculated automatically by Flutter based on the OS setting.\nHowever, as a developer you should make sure your layout has enough room to\nrender all its contents when the font sizes are increased.\nFor example, you can test all parts of your app on a small-screen\ndevice configured to use the largest font setting.", "The following two screenshots show the standard Flutter app\ntemplate rendered with the default iOS font setting,\nand with the largest font setting selected in iOS accessibility settings.", "For mobile, screen readers (TalkBack, VoiceOver)\nenable visually impaired users to get spoken feedback about\nthe contents of the screen and interact with the UI by using\ngestures on mobile and keyboard shortcuts on desktop. \nTurn on VoiceOver or TalkBack on your mobile device and\nnavigate around your app.", "To turn on the screen reader on your device, complete the following steps:", "To learn how to find and customize Android\u2019s\naccessibility features, view the following video.", "To learn how to find and customize iOS\naccessibility features, view the following video.", "For web, the following screen readers are currently supported:", "Screen readers users on web must toggle the\n\u201cEnable accessibility\u201d button to build the semantics tree.\nUsers can skip this step if you programmatically auto-enable\naccessibility for your app using this API:", "Windows comes with a screen reader called Narrator\nbut some developers recommend using the more popular\nNVDA screen reader. To learn about using NVDA to test\nWindows apps, check out\nScreen Readers 101 For Front-End Developers (Windows).", "On a Mac, you can use the desktop version of VoiceOver,\nwhich is included in macOS.", "On Linux, a popular screen reader is called Orca.\nIt comes pre-installed with some distributions\nand is available on package repositories such as apt.\nTo learn about using Orca, check out\nGetting started with Orca screen reader on Gnome desktop.", "Check out the following video demo to see \nVictor Tsaran, who leads the Accessibility program for Material Design, \nusing VoiceOver with the Flutter Gallery web app.", "Flutter\u2019s standard widgets generate an accessibility tree automatically. \nHowever, if your app needs something different,\nit can be customized using the Semantics widget.", "When there is text in your app that should be voiced\nwith a specific voice, inform the screen reader\nwhich voice to use by calling TextSpan.locale.\nNote that MaterialApp.locale and Localizations.override\ndon\u2019t affect which voice the screen reader uses.\nUsually, the screen reader uses the system voice\nexcept where you explicitly set it with TextSpan.locale.", "Sufficient color contrast makes text and images easier to read.\nAlong with benefitting users with various visual impairments,\nsufficient color contrast helps all users when viewing an interface\non devices in extreme lighting conditions,\nsuch as when exposed to direct sunlight or on a display with low\nbrightness.", "Ensuring your app can be used by everyone means building accessibility\ninto it from the start. For some apps, that\u2019s easier said than done.\nIn the video below, two of our engineers take a mobile app from a dire\naccessibility state to one that takes advantage of Flutter\u2019s built-in\nwidgets to offer a dramatically more accessible experience.", "Test your app using Flutter\u2019s\nAccessibility Guideline API.\nThis API checks if your app\u2019s UI meets Flutter\u2019s accessibility recommendations.\nThese cover recommendations for text contrast, target size, and target labels.", "The following example shows how to use the Guideline API on Name Generator.\nYou created this app as part of the\nWrite your first Flutter app codelab.\nEach button on the app\u2019s main screen serves as a tappable target\nwith text represented in 18 point.", "You can add Guideline API tests\nin test/widget_test.dart of your app directory, or as a separate test\nfile (such as test/a11y_test.dart in the case of the Name Generator).", "You can debug accessibility by visualizing the semantic nodes created for your web app\nusing the following command line flag in profile and release modes:", "With the flag activated, the semantic nodes appear on top of the widgets;\nyou can verify that the semantic elements are placed where they should be.\nIf the semantic nodes are incorrectly placed, please file a bug report.", "Here is a non-exhaustive list of things to consider as you prepare your\napp for release.", "To learn more about Flutter and accessibility, check out\nthe following articles written by community members:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/accessibility-and-localization/accessibility", "base_url": "https://docs.flutter.dev/"}, {"title": "Parse JSON in the background | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "By default, Dart apps do all of their work on a single thread.\nIn many cases, this model simplifies coding and is fast enough\nthat it does not result in poor app performance or stuttering animations,\noften called \u201cjank.\u201d", "However, you might need to perform an expensive computation,\nsuch as parsing a very large JSON document.\nIf this work takes more than 16 milliseconds,\nyour users experience jank.", "To avoid jank, you need to perform expensive computations\nlike this in the background.\nOn Android, this means scheduling work on a different thread.\nIn Flutter, you can use a separate Isolate.\nThis recipe uses the following steps:", "First, add the http package to your project.\nThe http package makes it easier to perform network\nrequests, such as fetching data from a JSON endpoint.", "To add the http package as a dependency,\nrun flutter pub add:", "This example covers how to fetch a large JSON document\nthat contains a list of 5000 photo objects from the\nJSONPlaceholder REST API,\nusing the http.get() method.", "info Note:\n  You\u2019re providing an http.Client to the function in this example.\n  This makes the function easier to test and use in different environments.", "Next, following the guidance from the\nFetch data from the internet recipe,\nconvert the http.Response into a list of Dart objects.\nThis makes the data easier to work with.", "First, create a Photo class that contains data about a photo.\nInclude a fromJson() factory method to make it easy to create a\nPhoto starting with a JSON object.", "Now, use the following instructions to update the\nfetchPhotos() function so that it returns a\nFuture<List<Photo>>:", "If you run the fetchPhotos() function on a slower device,\nyou might notice the app freezes for a brief moment as it parses and\nconverts the JSON. This is jank, and you want to get rid of it.", "You can remove the jank by moving the parsing and conversion\nto a background isolate using the compute()\nfunction provided by Flutter. The compute() function runs expensive\nfunctions in a background isolate and returns the result. In this case,\nrun the parsePhotos() function in the background.", "Isolates communicate by passing messages back and forth. These messages can\nbe primitive values, such as null, num, bool, double, or String, or\nsimple objects such as the List<Photo> in this example.", "You might experience errors if you try to pass more complex objects,\nsuch as a Future or http.Response between isolates.", "As an alternate solution, check out the worker_manager or\nworkmanager packages for background processing.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/background-parsing", "base_url": "https://docs.flutter.dev/"}, {"title": "Impeller rendering engine | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Impeller provides a new rendering runtime for Flutter.\nThe Flutter team\u2019s believes this solves Flutter\u2019s\nearly-onset jank issue.\nImpeller precompiles a smaller, simpler set of shaders\nat Engine build time so they don\u2019t compile at runtime.", "For a video introduction to Impeller, check out the following\ntalk from Google I/O 2023.", "Introducing Impeller - Flutter\u2019s new rendering engine", "Impeller has the following objectives:", "Where can you use Impeller?", "Flutter enables Impeller by default on iOS.", "To disable Impeller on iOS when debugging,\npass --no-enable-impeller to the flutter run command.", "To disable Impeller on iOS when deploying your app,\nadd the following tags under the top-level <dict> tag in your\napp\u2019s Info.plist file.", "The team continues to improve iOS support.\nIf you encounter performance or fidelity issues\nwith Impeller on iOS, file an issue in the GitHub tracker.\nPrefix the issue title with [Impeller] and\ninclude a small reproducible test case.", "Impeller is available for macOS in preview as of the \nFlutter 3.13 stable release.", "To enable Impeller on macOS when debugging,\npass --enable-impeller to the flutter run command.", "To enable Impeller on macOS when deploying your app,\nadd the following tags under the top-level <dict> tag in your\napp\u2019s Info.plist file.", "The team continues to improve macOS support.\nIf you encounter performance or fidelity issues\nwith Impeller on macOS, file an issue in the GitHub tracker.\nPrefix the issue title with [Impeller] and\ninclude a small reproducible test case.", "Please include the following information when \nsubmitting an issue for Impeller on macOS:", "Android development continues but it\u2019s not ready for preview.\nImpeller on Android might not work on the master channel.\nTo see what direction Android support will take,\nexperiment with Impeller in the 3.7 or later stable release.", "To enable Impeller on Android, take one of the following actions:", "Pass --enable-impeller to the flutter run command.", "Add the following tag to your AndroidManifest.xml file\nunder the <application> tag.", "To learn more details about Impeller\u2019s design and architecture,\ncheck out the README.md file in the source tree.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/impeller", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter fix | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "As Flutter continues to evolve, we provide a tool to help you clean up\ndeprecated APIs from your codebase. The tool ships as part of Flutter, and\nsuggests changes that you might want to make to your code. The tool is available\nfrom the command line, and is also integrated into the IDE plugins for Android\nStudio and Visual Studio Code.", "tips_and_updates Tip:\n  These automated updates are called quick-fixes in IntelliJ and Android\n  Studio, and code actions in VS Code.", "You can use any supported IDE\nto apply a single fix at a time.", "When the analyzer detects a deprecated API,\na light bulb appears on that line of code.\nClicking the light bulb displays the suggested fix\nthat updates that code to the new API.\nClicking the suggested fix performs the update.", "\nA sample quick-fix in IntelliJ", "When the analyzer detects a deprecated API,\nit presents an error.\nYou can do any of the following:", "Hover over the error and then click the\nQuick Fix link.\nThis presents a filtered list showing\nonly fixes.", "Put the caret in the code with the error and click\nthe light bulb icon that appears.\nThis shows a list of all actions, including\nrefactors.", "Put the caret in the code with the error and\npress the shortcut\n(Command+. on macOS, Control+. elsewhere)\nThis shows a list of all actions, including\nrefactors.", "\nA sample code action in VS Code", "dart fix Decoding Flutter", "To see or apply changes to an entire project,\nyou can use the command-line tool, dart fix.", "This tool has two options:", "To see a full list of available changes, run\nthe following command:", "To apply all changes in bulk, run the\nfollowing command:", "For more information on Flutter deprecations, see\nDeprecation lifetime in Flutter, a free article\non Flutter\u2019s Medium publication.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/flutter-fix", "base_url": "https://docs.flutter.dev/"}, {"title": "flutter: The Flutter command-line tool | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The flutter command-line tool is how developers (or IDEs on behalf of\ndevelopers) interact with Flutter. For Dart related commands,\nyou can use the dart command-line tool.", "Here\u2019s how you might use the flutter tool to create, analyze, test, and run an\napp:", "To run pub commands using the flutter tool:", "To view all commands that flutter supports:", "To get the current version of the Flutter SDK, including its framework, engine,\nand tools:", "The following table shows which commands you can use with the flutter tool:", "For additional help on any of the commands, enter flutter help <command>\nor follow the links in the More information column.\nYou can also get details on pub commands \u2014 for example,\nflutter help pub outdated.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//reference/flutter-cli", "base_url": "https://docs.flutter.dev/"}, {"title": "Widget catalog | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Create beautiful apps faster with Flutter\u2019s collection of visual, structural,\nplatform, and interactive widgets. In addition to browsing widgets by category,\nyou can also see all the widgets in the widget index.", "Make your app accessible.", "Bring animations to your app.", "Manage assets, display images, and show icons.", "Async patterns to your Flutter application.", "Widgets you absolutely need to know before building your first Flutter app.", "Beautiful and high-fidelity widgets for current iOS design language.", "Take user input in addition to input widgets in Material Components and Cupertino.", "Respond to touch events and route users to different views.", "Arrange other widgets columns, rows, grids, and many other layouts.", "Visual, behavioral, and motion-rich widgets implementing the Material 3 design specification.Material 3 becomes the default Flutter interface in late 2023. To learn more about this transition, check out Flutter support for Material 3.", "These widgets apply visual effects to the children without changing their layout, size, or position.", "Scroll multiple widgets as children of the parent.", "Manage the theme of your app, makes your app responsive to screen sizes, or add padding.", "Display and style text.", "100+ short, 1 minute explainer videos to help you quickly get started with Flutter widgets.", "See more Widget of the Weeks", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/widgets", "base_url": "https://docs.flutter.dev/"}, {"title": "Books about Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Here\u2019s a collection of books about Flutter, in alphabetical order.\nIf you find another one that we should add,\nfile an issue and (feel free to)\nsubmit a PR (sample) to add it yourself.\nAlso, check the Flutter version that the book\nwas written under. See the what\u2019s new\npage to view Flutter\u2019s latest release.", "\n  The following sections have more information about each book.\n", "Easy to understand starter book. Currently the best-selling and highest rated Flutter book on Amazon.", "by Marco L. Napoli", "Build your first app in Flutter - no experience necessary.", "by Mouaz M. Al-Shahmeh", "This book teaches what you need to know to build your first Flutter app. You will learn about the basics of Flutter (widgets, state management, and navigation), as well as how to build a variety of different app types (games, social media apps, and e-commerce apps). By the end of this book, you will be able to build beautiful, high-performance mobile apps using Flutter.", "by Michael Katz, Kevin David Moore, Vincent Ngo, and Vincenzo Guzzi", "Build for both iOS and Android With Flutter! With Flutter and Flutter Apprentice, you can achieve the dream of building fast applications, faster.", "The book\u2019s first eight chapters are dedicated to Dart 3.0 and all its features. Over 500 pages are about the Flutter framework: widgets basics, state management, animations, navigation, and more.", "Ce livre sur Flutter s\u2019adresse aux d\u00e9veloppeurs, initi\u00e9s comme plus aguerris, qui souhaitent disposer des connaissances n\u00e9cessaires pour cr\u00e9er de A \u00e0 Z des applications mobiles multiplateformes avec le framework de Google", "by Thomas Bailey and Alessandro Biessek", "An introductory guide to building cross-platform mobile applications with Flutter 2.5 and Dart.", "Flutter in Action teaches you to build professional-quality mobile applications using the Flutter SDK and the Dart programming language.", "\u201cFlutter libraries We Love\u201d focuses on 11 different categories of Flutter libraries. Each category lists available libraries as well as a highlighted library that is covered in more detail \u2013 including pros and cons, developer\u2019s perspective, and real-life code examples. The code snippets of all 11 highlighted libraries support Flutter 2 with sound null safety.", "App UI in Flutter-from Zero to Hero.", "by Prajyot Mainkar and Salvatore Girodano", "A fast-paced guide to get you started with cross-platform mobile application development with Google Flutter", "Learn Google Flutter by example. Over 65 example mini-apps.", "Explore popular state management techniques in Flutter.", "Improve your Mobile Development with Google\u2019s latest open source SDK.", "Building Cross-Platform Mobile Apps for Android, iOS, Web & Desktop", "Native, Cross-Platform Apps the Easy Way. Doesn\u2019t require previous Dart knowledge.", "Write code with a good architecture", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/books", "base_url": "https://docs.flutter.dev/"}, {"title": "Build a form with validation | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Apps often require users to enter information into a text field.\nFor example, you might require users to log in with an email address\nand password combination.", "To make apps secure and easy to use, check whether the\ninformation the user has provided is valid. If the user has correctly filled\nout the form, process the information. If the user submits incorrect\ninformation, display a friendly error message letting them know what went\nwrong.", "In this example, learn how to add validation to a form that has\na single text field using the following steps:", "First, create a Form.\nThe Form widget acts as a container for grouping\nand validating multiple form fields.", "When creating the form, provide a GlobalKey.\nThis uniquely identifies the Form,\nand allows validation of the form in a later step.", "tips_and_updates Tip:\n  Using a GlobalKey is the recommended way to access a form.\n  However, if you have a more complex widget tree,\n  you can use the Form.of() method to\n  access the form within nested widgets.", "Although the Form is in place,\nit doesn\u2019t have a way for users to enter text.\nThat\u2019s the job of a TextFormField.\nThe TextFormField widget renders a material design text field\nand can display validation errors when they occur.", "Validate the input by providing a validator() function to the\nTextFormField. If the user\u2019s input isn\u2019t valid,\nthe validator function returns a String containing\nan error message.\nIf there are no errors, the validator must return null.", "For this example, create a validator that ensures the\nTextFormField isn\u2019t empty. If it is empty,\nreturn a friendly error message.", "Now that you have a form with a text field,\nprovide a button that the user can tap to submit the information.", "When the user attempts to submit the form, check if the form is valid.\nIf it is, display a success message.\nIf it isn\u2019t (the text field has no content) display the error message.", "To validate the form, use the _formKey created in\nstep 1. You can use the _formKey.currentState()\nmethod to access the FormState,\nwhich is automatically created by Flutter when building a Form.", "The FormState class contains the validate() method.\nWhen the validate() method is called, it runs the validator()\nfunction for each text field in the form.\nIf everything looks good, the validate() method returns true.\nIf any text field contains errors, the validate() method\nrebuilds the form to display any error messages and returns false.", "To learn how to retrieve these values, check out the\nRetrieve the value of a text field recipe.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/forms/validation", "base_url": "https://docs.flutter.dev/"}, {"title": "Performance | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  If your app has a performance issue and you are\n  trying to debug it, check out the DevTool\u2019s page\n  on Using the Performance view.", "What is performance? Why is performance important? How do I improve performance?", "Our goal is to answer those three questions (mainly the third one), and \nanything related to them. This document should serve as the single entry \npoint or the root node of a tree of resources that addresses any questions \nthat you have about performance.", "The answers to the first two questions are mostly philosophical,\nand not as helpful to many developers who visit this page with specific\nperformance issues that need to be solved.\nTherefore, the answers to those \nquestions are in the appendix.", "To improve performance, you first need metrics: some measurable numbers to\nverify the problems and improvements.\nIn the metrics page,\nyou\u2019ll see which metrics are currently used,\nand which tools and APIs are available to get the metrics.", "There is a list of Frequently asked questions, \nso you can find out if the questions you have or the problems you\u2019re having \nwere already answered or encountered, and whether there are existing solutions. \n(Alternatively, you can check the Flutter GitHub issue database using the\nperformance label.)", "Finally, the performance issues are divided into four categories. They \ncorrespond to the four labels that are used in the Flutter GitHub issue \ndatabase: \u201cperf: speed\u201d, \u201cperf: memory\u201d, \n\u201cperf: app size\u201d, \u201cperf: energy\u201d.", "The rest of the content is organized using those four categories.", "Are your animations janky (not smooth)? Learn how to \nevaluate and fix rendering issues.", "How to measure your app\u2019s size. The smaller the size,\nthe quicker it is to download.", "Measuring your app\u2019s size", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf", "base_url": "https://docs.flutter.dev/"}, {"title": "List of state management approaches | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "State management is a complex topic.\nIf you feel that some of your questions haven\u2019t been answered,\nor that the approach described on these pages\nis not viable for your use cases, you are probably right.", "Learn more at the following links,\nmany of which have been contributed by the Flutter community:", "Things to review before selecting an approach.", "Riverpod works in a similar fashion to Provider.\nIt offers compile safety and testing without depending on the Flutter SDK.", "The low-level approach to use for widget-specific, ephemeral state.", "The low-level approach used to communicate between ancestors and children\nin the widget tree. This is what provider and many other approaches\nuse under the hood.", "The following instructor-led video workshop covers how to\nuse InheritedWidget:", "Other useful docs include:", "A state container approach familiar to many web developers.", "Fish Redux is an assembled flutter application framework\nbased on Redux state management. \nIt is suitable for building medium and large applications.", "A family of stream/observable based patterns.", "A service locator based state management approach that\ndoesn\u2019t need a BuildContext.", "info Note:\n  To learn more, watch this short Package of the Week video on the GetIt package:", "A popular library based on observables and reactions.", "Reactive state management that uses the Command Pattern\nand is based on ValueNotifiers. Best in combination with\nGetIt, but can be used with Provider or other\nlocators too.", "A state management package that uses InheritedWidget\nat its core. Inspired in part by recoil.\nThis package promotes the separation of concerns.", "A simplified reactive state management solution.", "An approach that combines state management with a\ndependency injection solution and an integrated router.\nFor more information, see the following info:", "Triple is a pattern for state management that uses Streams or ValueNotifier.\nThis mechanism (nicknamed triple because the stream always uses three\nvalues: Error, Loading, and State), is based on the\nSegmented State pattern.", "For more information, refer to the following resources:", "A simple but powerful state management solution inspired by SolidJS.", "The flutter_reactive_value library might offer the least complex solution for state\nmanagement in Flutter. It might help Flutter newcomers add reactivity to their UI,\nwithout the complexity of the mechanisms described before.\nThe flutter_reactive_value library defines the reactiveValue(BuildContext)\nextension method on ValueNotifier. This extension allows a Widget to\nfetch the current value of the ValueNotifier and \nsubscribe the Widget to changes in the value of the ValueNotifier.\nIf the value of the ValueNotifier changes, Widget rebuilds.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt/options", "base_url": "https://docs.flutter.dev/"}, {"title": "Integrate a Flutter module into your iOS project | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter UI components can be incrementally added into your existing iOS\napplication as embedded frameworks. There are a few ways to embed Flutter \nin your existing application.", "Use the CocoaPods dependency manager and installed Flutter SDK.\n  In this case, the flutter_module is compiled from\n  the source each time the app is built. (Recommended.)", "Create frameworks for the Flutter engine, your compiled Dart code,\n  and all Flutter plugins. Here, you manually embed the frameworks,\n  and update your existing application\u2019s build settings in Xcode.\n  This can be useful for teams that don\u2019t want to require every developer\n  to have the Flutter SDK and Cocoapods installed locally.", "Create frameworks for your compiled Dart code,\n  and all Flutter plugins. Use CocoaPods for the Flutter engine. \n  With this option, embed the frameworks for your application\n  and the plugins in Xcode, but distribute the\n  Flutter engine as a CocoaPods podspec.\n  This is similar to the second option, but it provides\n  an alternative to distributing the large Flutter.xcframework.", "For examples using an app built with UIKit, \nsee the iOS directories in the add_to_app code samples. \nFor an example using SwiftUI, see the iOS directory in News Feed App.", "Your development environment must meet the\nmacOS system requirements for Flutter\nwith Xcode installed.\nFlutter supports iOS 11 and later.\nAdditionally, you will need CocoaPods\nversion 1.10 or later.", "To embed Flutter into your existing application, \nusing any of the methods mentioned above, \nfirst create a Flutter module.", "From the command line, run:", "A Flutter module project is created at some/path/my_flutter/.\nIf you are using the first method mentioned above, \nthe module should be created in the same parent directory \nas your existing iOS app.", "From the Flutter module directory, you can run the same flutter\ncommands you would in any other Flutter project,\nlike flutter run --debug or flutter build ios.\nYou can also run the module in\nAndroid Studio/IntelliJ or VS Code with\nthe Flutter and Dart plugins. This project contains a\nsingle-view example version of your module before it\u2019s\nembedded in your existing application,\nwhich is useful for incrementally\ntesting the Flutter-only parts of your code.", "The my_flutter module directory structure is similar to a\nnormal Flutter application:", "Add your Dart code to the lib/ directory.", "Add Flutter dependencies to my_flutter/pubspec.yaml,\nincluding Flutter packages and plugins.", "The .ios/ hidden subfolder contains an Xcode workspace where\nyou can run a standalone version of your module.\nIt is a wrapper project to bootstrap your Flutter code,\nand contains helper scripts to facilitate building frameworks or\nembedding the module into your existing application with CocoaPods.", "info Note:\n  Add custom iOS code to your own existing application\u2019s\n  project or to a plugin, not to the module\u2019s .ios/\n  directory. Changes made in your module\u2019s .ios/\n  directory don\u2019t appear in your existing iOS project\n  using the module, and might be overwritten by Flutter.", "Do not source control the .ios/ directory since it\u2019s autogenerated.\n  Before building the module on a new machine, run flutter pub get\n  in the my_flutter directory first to regenerate the .ios/\n  directory before building iOS project using the Flutter module.", "After you have developed your Flutter module,\nyou can embed it using the methods described at the top of the page.", "info Note:\n  You can run in Debug mode on a simulator or a real device,\n  and Release on a real device. Learn more about\n  Flutter\u2019s build modes", "To leverage Flutter debugging functionality \n  such as hot reload, see  Debugging your add-to-app module.", "Using Flutter increases your app size.", "This method requires every developer working on your\nproject to have a locally installed version of the Flutter SDK.\nThe Flutter module is compiled from source each time the app is built.\nSimply build your application in Xcode to automatically\nrun the script to embed your Dart and plugin code.\nThis allows rapid iteration with the most up-to-date\nversion of your Flutter module without running additional\ncommands outside of Xcode.", "The following example assumes that your existing\napplication and the Flutter module are in sibling\ndirectories. If you have a different directory structure,\nyou might need to adjust the relative paths.", "If your existing application (MyApp) doesn\u2019t\nalready have a Podfile, run pod init in the\nMyApp directory to create one. \nYou can find more details on using \nCocoaPods in the CocoaPods getting started guide.", "Add the following lines to your Podfile:", "For each Podfile target that needs to\nembed Flutter, call install_all_flutter_pods(flutter_application_path).", "In the Podfile\u2019s post_install block, call flutter_post_install(installer).", "info Note:\n  The flutter_post_install method (added in Flutter 3.1.0),\n  adds build settings to support native Apple Silicon arm64 iOS simulators.\n  Include the if defined?(flutter_post_install) check to ensure your Podfile\n  is valid if you are running on older versions of Flutter that don\u2019t have this method.", "info Note:\n  When you change the Flutter plugin dependencies in\n  my_flutter/pubspec.yaml, run flutter pub get\n  in your Flutter module directory to refresh the list\n  of plugins read by the podhelper.rb script.\n  Then, run pod install again from\n  your application at some/path/MyApp.", "The podhelper.rb script embeds your plugins,\nFlutter.framework, and App.framework into your project.", "Your app\u2019s Debug and Release build configurations embed\nthe Debug or Release build modes of Flutter, respectively.\nAdd a Profile build configuration\nto your app to test in profile mode.", "tips_and_updates Tip:\nFlutter.framework is the bundle for the Flutter engine,\n  and App.framework is the compiled Dart code for this project.", "Open MyApp.xcworkspace in Xcode.\nYou can now build the project using \u2318B.", "Alternatively, you can generate the necessary frameworks\nand embed them in your application by manually editing\nyour existing Xcode project. You might do this if members of your\nteam can\u2019t locally install Flutter SDK and CocoaPods,\nor if you don\u2019t want to use CocoaPods\nas a dependency manager in your existing applications.\nYou must run flutter build ios-framework\nevery time you make code changes in your Flutter module.", "The following example assumes that you want to generate the\nframeworks to some/path/MyApp/Flutter/.", "report_problem Warning:\n  Always use Flutter.xcframework and App.xcframework\n  from the same directory. Mixing .xcframework imports\n  from different directories (such as Profile/Flutter.xcframework\n  with Debug/App.xcframework) causes runtime crashes.", "Link and embed the generated frameworks into your existing\napplication in Xcode.  There are multiple ways to do\nthis\u2014use the method that is best for your project.", "For example, you can drag the frameworks from\nsome/path/MyApp/Flutter/Release/ in Finder\ninto your target\u2019s Build\nSettings > Build Phases > Link Binary With Libraries.", "In the target\u2019s build settings, add $(PROJECT_DIR)/Flutter/Release/\nto the Framework Search Paths (FRAMEWORK_SEARCH_PATHS).", "tips_and_updates Tip:\n  To use the simulator, you will need to \n  embed the Debug version of the Flutter frameworks in your\n  Debug build configuration. To do this \n  you can use $(PROJECT_DIR)/Flutter/$(CONFIGURATION)\n  in the Framework Search Paths (FRAMEWORK_SEARCH_PATHS)\n  build setting. This embeds the Release frameworks in the Release configuration, \n  and the Debug frameworks in the Debug Configuration.", "You must also open MyApp.xcodeproj/project.pbxproj (from Finder) \n  and replace path = Flutter/Release/example.xcframework;\n  with path = \"Flutter/$(CONFIGURATION)/example.xcframework\";\n  for all added frameworks. (Note the added \".)", "The generated dynamic frameworks must be embedded\ninto your app to be loaded at runtime.", "error Important:\n  Plugins might produce static or dynamic frameworks.\n  Static frameworks should be linked on, but never embedded.\n  If you embed a static framework into your application,\n  your application is not publishable to the App Store\n  and fails with a\n  Found an unexpected Mach-O header code archive error.", "After linking the frameworks, you should see them in the \nFrameworks, Libraries, and Embedded Content\nsection of your target\u2019s General settings. \nTo embed the dynamic frameworks\nselect Embed & Sign.", "They will then appear under Embed Frameworks within \nBuild Phases as follows:", "You should now be able to build the project in Xcode using \u2318B.", "Alternatively, instead of distributing the large Flutter.xcframework\nto other developers, machines, or continuous integration systems,\nyou can instead generate Flutter as CocoaPods podspec by adding\nthe flag --cocoapods. This produces a Flutter.podspec\ninstead of an engine Flutter.xcframework.\nThe App.xcframework and plugin frameworks are generated\nas described in Option B.", "To generate the Flutter.podspec and frameworks, run the following \nfrom the command line in the root of your Flutter module:", "Host apps using CocoaPods can add Flutter to their Podfile:", "info Note:\n  You must hard code the [build mode] value.\n  For example, use Debug if you need to use\n  flutter attach and Release when you\u2019re ready to ship.", "Link and embed the generated App.xcframework,\nFlutterPluginRegistrant.xcframework,\nand any plugin frameworks into your existing application\nas described in Option B.", "On iOS 14 and higher, enable the Dart multicast DNS\nservice in the Debug version of your app\nto add debugging functionalities such as hot-reload and\nDevTools via flutter attach.", "report_problem Warning:\n  This service must not be enabled in the Release\n  version of your app, or you might experience App Store rejections.", "One way to do this is to maintain a separate copy of your app\u2019s Info.plist per\nbuild configuration. The following instructions assume\nthe default Debug and Release.\nAdjust the names as needed depending on your app\u2019s build configurations.", "Rename your app\u2019s Info.plist to Info-Debug.plist.\nMake a copy of it called Info-Release.plist and add it to your Xcode project.", "In Info-Debug.plist only add the key NSBonjourServices\nand set the value to an array with the string _dartVmService._tcp.\nNote Xcode will display this as \u201cBonjour services\u201d.", "Optionally, add the key NSLocalNetworkUsageDescription set to your\ndesired customized permission dialog text.", "In your target\u2019s build settings, change the Info.plist File\n(INFOPLIST_FILE) setting path from path/to/Info.plist to path/to/Info-$(CONFIGURATION).plist.", "This will resolve to the path Info-Debug.plist in Debug and\nInfo-Release.plist in Release.", "Alternatively, you can explicitly set the Debug path to Info-Debug.plist\nand the Release path to Info-Release.plist.", "If the Info-Release.plist copy is in your target\u2019s Build Settings > Build Phases > Copy Bundle\nResources build phase, remove it.", "The first Flutter screen loaded by your Debug app will now prompt\nfor local network permission. The permission can also be allowed by enabling\nSettings > Privacy > Local Network > Your App.", "On an Apple Silicon (M1) Mac, the host app builds for an arm64 simulator.\nWhile Flutter supports arm64 simulators, some plugins might not. If you use\none of these plugins, you might see a compilation error like Undefined symbols\nfor architecture arm64 and you must exclude arm64 from the simulator\narchitectures in your host app.", "In your host app target, find the Excluded Architectures (EXCLUDED_ARCHS) build setting.\nClick the right arrow disclosure indicator icon to expand the available build configurations.\nHover over Debug and click the plus icon. Change Any SDK to Any iOS Simulator SDK.\nAdd arm64 to the build settings value.", "When done correctly, Xcode will add \"EXCLUDED_ARCHS[sdk=iphonesimulator*]\" = arm64; to your project.pbxproj file.", "Repeat for any iOS unit test targets.", "You can now add a Flutter screen to your existing application.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/ios/project-setup", "base_url": "https://docs.flutter.dev/"}, {"title": "Visual Studio Code | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Follow the Set up an editor instructions to\ninstall the Dart and Flutter extensions\n(also called plugins).", "Updates to the extensions are shipped on a regular basis.\nBy default, VS Code automatically updates extensions when\nupdates are available.", "To install updates yourself:", "There are a couple ways to create a new project.", "To create a new Flutter project from the Flutter\nstarter app template:", "Go to View >\nCommand Palette\u2026.", "You can also press Ctrl / Cmd +\nShift + P.", "To open an existing Flutter project:", "Go to File > Open.", "You can also press Ctrl / Cmd + O", "The Flutter extension performs code analysis.\nThe code analysis can:", "Navigate to type declarations", "View all current source code problems.", "info Note:\n  You can debug your app in a couple of ways.", "The instructions below describe features available in VS Code.\n  For information on using launching DevTools, see\n  Running DevTools from VS Code in the DevTools docs.", "Start debugging by clicking Run > Start Debugging\nfrom the main IDE window, or press F5.", "When a Flutter project is open in VS Code,\nyou should see a set of Flutter specific entries in the status bar,\nincluding a Flutter SDK version and a\ndevice name (or the message No Devices):\n", "The Flutter extension automatically selects the last device connected.\nHowever, if you have multiple devices/simulators connected, click\ndevice in the status bar to see a pick-list\nat the top of the screen. Select the device you want to use for\nrunning or debugging.", "Are you developing for macOS or iOS remotely using\n  Visual Studio Code Remote? If so, you might need to manually\n  unlock the keychain. For more information, see this\n  question on StackExchange.", "Go to Run > Start Without Debugging.", "You can also press Ctrl + F5.", "Click Run > Start Debugging.\nYou can also press F5.\nThe status bar turns orange to show you are in a debug session.\n", "Flutter offers many different build modes to run your app in. \nYou can read more about them in Flutter\u2019s build modes.", "Open the launch.json file in VS Code.", "If you don\u2019t have a launch.json file:", "Go to View > Run.", "You can also press Ctrl / Cmd +\nShift + D", "The Run and Debug panel displays.", "Click create a launch.json file.", "In the configurations section,\nchange the flutterMode property to\nthe build mode you want to target.", "For example, if you want to run in debug mode,\nyour launch.json might look like this:", "Run the app through the Run panel.", "Flutter offers a best-in-class developer cycle enabling you\nto see the effect of your changes almost instantly with the\nStateful Hot Reload feature.\nTo learn more, check out Hot reload.", "You might find the following advanced debugging tips useful:", "During a debug session,\nseveral additional debugging commands are added to the\nCommand Palette and to the Flutter inspector.\nWhen space is limited, the icon is used as the visual\nversion of the label.", "By default, debugging an external library is disabled\nin the Flutter extension. To enable:", "If you have additional tips we should share, let us know!", "Assists are code changes related to a certain code identifier.\nA number of these are available when the cursor is placed on a\nFlutter widget identifier, as indicated by the yellow lightbulb icon.\nTo invoke the assist, click the lightbulb as shown in the following screenshot:", "You can also press Ctrl / Cmd + .", "Quick fixes are similar,\nonly they are shown with a piece of code has an error and they\ncan assist in correcting it.", "Snippets can be used to speed up entering typical code structures.\nThey are invoked by typing their prefix,\nand then selecting from the code completion window:\n-\n-he Flutter extension includes the following -nippets:", "You can also define custom snippets by executing\nConfigure User Snippets from the Command Palette.", "You can also press Ctrl + F5\n(Cmd + F5  on macOS).", "Keyboard mappings can be changed by executing the\nOpen Keyboard Shortcuts command from the Command Palette.", "Hot reload works by injecting updated source code files into the\nrunning Dart VM (Virtual Machine). This includes not only\nadding new classes, but also adding methods and fields to\nexisting classes, and changing existing functions.\nA few types of code changes cannot be hot reloaded though:", "For these changes, restart your app without\nending your debugging session. To perform a hot restart,\nrun the Flutter: Hot Restart command from the Command Palette.", "You can also press\nCtrl + Shift + F5\nor Cmd + Shift + F5 on macOS.", "All known bugs are tracked in the issue tracker:\nDart and Flutter extensions GitHub issue tracker.\nWe welcome feedback,\nboth on bugs/issues and feature requests.", "Prior to filing new issues:", "When filing new issues, include flutter doctor output.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/vs-code", "base_url": "https://docs.flutter.dev/"}, {"title": "Common Flutter errors | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page explains several frequently-encountered Flutter\nframework errors (including layout errors) and gives suggestions\non how to resolve them.\nThis is a living document with more errors to be added in\nfuture revisions, and your contributions are welcomed.\nFeel free to open an issue or submit a pull request to\nmake this page more useful to you and the Flutter community.", "RenderFlex overflow is one of the most frequently\nencountered Flutter framework errors,\nand you\u2019ve probably run into it already.", "What does the error look like?", "When it happens, yellow and black stripes appear,\nindicating the area of overflow in the app UI.\nIn addition, an error message displays in the debug console:", "How might you run into this error?", "The error often occurs when a Column or Row has a\nchild widget that isn\u2019t constrained in its size.\nFor example,\nthe code snippet below demonstrates a common scenario:", "In the above example,\nthe Column tries to be wider than the space the Row\n(its parent) can allocate to it, causing an overflow error.\nWhy does the Column try to do that?\nTo understand this layout behavior, you need to know\nhow Flutter framework performs layout:", "\u201cTo perform layout, Flutter walks the render tree in a depth-first traversal\nand passes down size constraints from parent to child\u2026 Children respond by\npassing up a size to their parent object within the constraints the parent\nestablished.\u201d \u2013 Flutter architectural overview", "In this case, the Row widget doesn\u2019t constrain the\nsize of its children, nor does the Column widget.\nLacking constraints from its parent widget, the second\nText widget tries to be as wide as all the characters\nit needs to display. The self-determined width of the\nText widget then gets adopted by the Column, which\nclashes with the maximum amount of horizontal space its parent,\nthe Row widget, can provide.", "How to fix it?", "Well, you need to make sure the Column won\u2019t attempt\nto be wider than it can be. To achieve this,\nyou need to constrain its width. One way to do it is to\nwrap the Column in an Expanded widget:", "Another way is to wrap the Column in a Flexible widget\nand specify a flex factor. In fact,\nthe Expanded widget is equivalent to the Flexible widget\nwith a flex factor of 1.0, as its source code shows.\nTo further understand how to use the Flex widget in Flutter layouts,\ncheck out this 90-second Widget of the Week video\non the Flexible widget.", "The resources linked below provide further information about this error.", "While this error is pretty common,\nit\u2019s often a side effect of a primary error \noccurring earlier in the rendering pipeline.", "What does the error look like?", "The message shown by the error looks like this:", "How might you run into this error?", "Usually, the issue is related to violation of box constraints,\nand it needs to be solved by providing more information\nto Flutter about how you\u2019d like to constrain the widgets in question.\nYou can learn more about how constraints work\nin Flutter on the Understanding constraints page.", "The RenderBox was not laid out error is often\ncaused by one of two other errors:", "This is another common layout error you could run into \nwhile creating a UI in your Flutter app.", "What does the error look like?", "The message shown by the error looks like this:", "How might you run into this error?", "The error is often caused when a ListView\n(or other kinds of scrollable widgets such as GridView)\nis placed inside a Column. A ListView takes all\nthe vertical space available to it,\nunless it\u2019s constrained by its parent widget.\nHowever, a Column doesn\u2019t impose any constraint\non its children\u2019s height by default.\nThe combination of the two behaviors leads to the failure of\ndetermining the size of the ListView.", "How to fix it?", "To fix this error, specify how tall the ListView should be.\nTo make it as tall as the remaining space in the Column,\nwrap it using an Expanded widget (as shown in the following example).\nOtherwise, specify an absolute height using a SizedBox\nwidget or a relative height using a Flexible widget.", "The resources linked below provide\nfurther information about this error.", "The error message suggests that it\u2019s also related\nto box constraints, which are important to understand\nto avoid many of the most common Flutter framework errors.", "What does the error look like?", "The message shown by the error looks like this:", "How might you run into the error?", "This error occurs, for example, when a Row contains a\nTextFormField or a TextField but the latter has\nno width constraint.", "How to fix it?", "As suggested by the error message,\nfix this error by constraining the text field\nusing either an Expanded or SizedBox widget.\nThe following example demonstrates using an Expanded widget:", "This error is about missing an expected parent widget.", "What does the error look like?", "The message shown by the error looks like this:", "How might you run into the error?", "While Flutter\u2019s widgets are generally flexible\nin how they can be composed together in a UI,\na small subset of those widgets expect specific parent widgets.\nWhen this expectation can\u2019t be satisfied in your widget tree,\nyou\u2019re likely to encounter this error.", "Here is an incomplete list of widgets that expect\nspecific parent widgets within the Flutter framework.\nFeel free to submit a PR (using the doc icon in\nthe top right corner of the page) to expand this list.", "How to fix it?", "The fix should be obvious once you know\nwhich parent widget is missing.", "The build method in your Flutter code isn\u2019t\na good place to call setState,\neither directly or indirectly.", "What does the error look like?", "When the error occurs,\nthe following message is displayed in the console:", "How might you run into the error?", "In general, this error occurs when the setState\nmethod is called within the build method.", "A common scenario where this error occurs is when\nattempting to trigger a Dialog from within the\nbuild method. This is often motivated by the need to\nimmediately show information to the user,\nbut setState should never be called from a build method.", "The following snippet seems to be a common culprit of this error:", "This code doesn\u2019t make an explicit call to setState,\nbut it\u2019s called by showDialog.\nThe build method isn\u2019t the right place to call\nshowDialog because build can be called by the\nframework for every frame, for example, during an animation.", "How to fix it?", "One way to avoid this error is to use the Navigator API\nto trigger the dialog as a route. In the following example,\nthere are two pages. The second page has a\ndialog to be displayed upon entry.\nWhen the user requests the second page by\nclicking a button on the first page,\nthe Navigator pushes two routes\u2013one\nfor the second page and another for the dialog.", "This error can occur when multiple scrolling\nwidgets (such as ListView) appear on the\nscreen at the same time. It\u2019s more likely for\nthis error to occur on a web or desktop app,\nthan a mobile app since it\u2019s rare to encounter\nthis scenario on mobile.", "For more information and to learn how to fix,\ncheck out the following video on\nPrimaryScrollController:", "To learn more about how to debug errors,\nespecially layout errors in Flutter, \ncheck out the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/common-errors", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release an iOS app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide provides a step-by-step walkthrough of releasing a\nFlutter app to the App Store and TestFlight.", "Xcode is required to build and release your app. You\nmust use a device running macOS to follow this guide.", "Before beginning the process of releasing your app,\nensure that it meets\nApple\u2019s App Review Guidelines.", "In order to publish your app to the App Store,\nyou must first enroll in the\nApple Developer Program.\nYou can read more about the various\nmembership options in Apple\u2019s\nChoosing a Membership guide.", "Manage your app\u2019s life cycle on\nApp Store Connect (formerly iTunes Connect).\nYou define your app name and description, add screenshots,\nset pricing, and manage releases to the App Store and TestFlight.", "Registering your app involves two steps: registering a unique\nBundle ID, and creating an application record on App Store Connect.", "For a detailed overview of App Store Connect, see the\nApp Store Connect guide.", "Every iOS application is associated with a Bundle ID,\na unique identifier registered with Apple.\nTo register a Bundle ID for your app, follow these steps:", "Register your app on App Store Connect:", "For a detailed overview, see\nAdd an app to your account.", "This step covers reviewing the most important settings\nin the Xcode workspace.\nFor detailed procedures and descriptions, see\nPrepare for app distribution.", "Navigate to your target\u2019s settings in Xcode:", "Verify the most important settings.", "In the Identity section of the General tab:", "In the Signing & Capabilities tab:", "In the Deployment section of the Build Settings tab:", "The General tab of your project settings should resemble\nthe following:", "For a detailed overview of app signing, see\nCreate, export, and delete signing certificates.", "If you changed Deployment Target in your Xcode project,\nopen ios/Flutter/AppframeworkInfo.plist in your Flutter app\nand update the MinimumOSVersion value to match.", "When a new Flutter app is created, a placeholder icon set is created.\nThis step covers replacing these placeholder icons with your\napp\u2019s icons:", "Similar to the app icon,\nyou can also replace the placeholder launch image:", "During development, you\u2019ve been building, debugging, and testing\nwith debug builds. When you\u2019re ready to ship your app to users\non the App Store or TestFlight, you need to prepare a release build.", "The default version number of the app is 1.0.0.\nTo update it, navigate to the pubspec.yaml file\nand update the following line:", "The version number is three numbers separated by dots,\nsuch as 1.0.0 in the example above, followed by an optional\nbuild number such as 1 in the example above, separated by a +.", "Both the version and the build number can be overridden in\nflutter build ipa by specifying --build-name and --build-number,\nrespectively.", "In iOS, build-name uses CFBundleShortVersionString\nwhile build-number uses CFBundleVersion.\nRead more about iOS versioning at Core Foundation Keys\non the Apple Developer\u2019s site.", "You can also override the pubspec.yaml build name and number in Xcode:", "Run flutter build ipa to produce an Xcode build archive (.xcarchive file)\nin your project\u2019s build/ios/archive/ directory and an App Store app\nbundle (.ipa file) in build/ios/ipa.", "Consider adding the --obfuscate and --split-debug-info flags to\nobfuscate your Dart code to make it more difficult\nto reverse engineer.", "If you are not distributing to the App Store, you can optionally\nchoose a different export method by\nadding the option --export-method ad-hoc,\n--export-method development or --export-method enterprise.", "info Note:\n  On versions of Flutter where flutter build ipa --export-method is unavailable,\n  open build/ios/archive/MyApp.xcarchive and follow the instructions below\n  to validate and distribute the app from Xcode.", "Once the app bundle is created, upload it to\nApp Store Connect by either:", "Install and open the Apple Transport macOS app.\nDrag and drop the build/ios/ipa/*.ipa app bundle into the app.", "Or upload the app bundle from the command line by running:", "Run man altool for details about how to authenticate with the App Store Connect API key.", "Or open build/ios/archive/MyApp.xcarchive in Xcode.", "Click the Validate App button. If any issues are reported,\naddress them and produce another build. You can reuse the same\nbuild ID until you upload an archive.", "After the archive has been successfully validated, click\nDistribute App.", "info Note:\n  When you export your app at the end of Distribute App,\n  Xcode will create a directory containing\n  an IPA of your app and an ExportOptions.plist file.\n  You can create new IPAs with the same options without launching\n  Xcode by running\n  flutter build ipa --export-options-plist=path/to/ExportOptions.plist.\n  See xcodebuild -h for details about the keys in this property list.", "You can follow the status of your build in the\nActivities tab of your app\u2019s details page on\nApp Store Connect.\nYou should receive an email within 30 minutes notifying you that\nyour build has been validated and is available to release to testers\non TestFlight. At this point you can choose whether to release\non TestFlight, or go ahead and release your app to the App Store.", "For more details, see\nUpload an app to App Store Connect.", "This step covers creating a build archive and uploading\nyour build to App Store Connect using Flutter build commands\nand Codemagic CLI Tools executed in a terminal\nin the Flutter project directory. This allows you to create a build archive\nwith full control of distribution certificates in a temporary keychain \nisolated from your login keychain.", "Install the Codemagic CLI tools:", "You\u2019ll need to generate an App Store Connect API Key\nwith App Manager access to automate operations with App Store Connect. To make\nsubsequent commands more concise, set the following environment variables from\nthe new key: issuer id, key id, and API key file.", "You need to export or create an iOS Distribution certificate to code sign and package a build archive.", "If you have existing certificates, you can export the\nprivate keys by executing the following command for each certificate:", "Or you can create a new private key by executing the following command:", "Later, you can have CLI tools automatically create a new iOS Distribution from the private key.", "Set up a new temporary keychain to be used for code signing:", "Restore Login Keychain!\nAfter running keychain initialize you must run the following:", "This sets your login keychain as the default to avoid potential\nauthentication issues with apps on your machine.", "Fetch the code signing files from App Store Connect:", "Where cert_key is either your exported iOS Distribution certificate private key\nor a new private key which automatically generates a new certificate. The certificate\nwill be created from the private key if it doesn\u2019t exist in App Store Connect.", "Now add the fetched certificates to your keychain:", "Update the Xcode project settings to use fetched code signing profiles:", "Build the Flutter the iOS project:", "Note that export_options.plist is the output of the xcode-project use-profiles command.", "Publish the app to App Store Connect:", "As mentioned earlier, don\u2019t forget to set your login keychain\nas the default to avoid authentication issues\nwith apps on your machine:", "You should receive an email within 30 minutes notifying you that\nyour build has been validated and is available to release to testers\non TestFlight. At this point you can choose whether to release\non TestFlight, or go ahead and release your app to the App Store.", "TestFlight allows developers to push their apps\nto internal and external testers. This optional step\ncovers releasing your build on TestFlight.", "For more details, see Distribute an app using TestFlight.", "When you\u2019re ready to release your app to the world,\nfollow these steps to submit your app for review and\nrelease to the App Store:", "Apple notifies you when their app review process is complete.\nYour app is released according to the instructions you\nspecified in the Version Release section.", "For more details, see\nDistribute an app through the App Store.", "The Distribute your app guide provides a\ndetailed overview of the process of releasing an app to the App Store.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/ios", "base_url": "https://docs.flutter.dev/"}, {"title": "Developing packages & plugins | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Packages enable the creation of modular code that can be shared easily.\nA minimal package consists of the following:", "info Note:\n  For a list of dos and don\u2019ts when writing an effective plugin,\n  see the Medium article by Mehmet Fidanboylu,\n  Writing a good plugin.", "Packages can contain more than one kind of content:", "Plugin packages can be written for Android\n(using Kotlin or Java), iOS (using Swift or Objective-C),\nweb, macOS, Windows, or Linux, or any combination\nthereof.", "A concrete example is the url_launcher plugin package.\nTo see how to use the url_launcher package, and how it\nwas extended to implement support for web,\nsee the Medium article by Harry Terkelsen,\nHow to Write a Flutter Web Plugin, Part 1.", "The following instructions explain how to write a Flutter\npackage.", "To create a starter Flutter package,\nuse the --template=package flag with flutter create:", "This creates a package project in the hello\nfolder with the following content:", "For pure Dart packages, simply add the functionality\ninside the main lib/<package name>.dart file,\nor in several files in the lib directory.", "To test the package, add unit tests\nin a test directory.", "For additional details on how to organize the\npackage contents,\nsee the Dart library package documentation.", "If you want to develop a package that calls into\nplatform-specific APIs,\nyou need to develop a plugin package.", "The API is connected to the platform-specific\nimplementation(s) using a platform channel.", "Federated plugins are a way of splitting support for\ndifferent platforms into separate packages.\nSo, a federated plugin can use one package for iOS,\nanother for Android, another for web,\nand yet another for a car (as an example of an IoT device).\nAmong other benefits, this approach allows a domain expert\nto extend an existing plugin to work for the platform they know best.", "A federated plugin requires the following packages:", "Ideally, when adding a platform implementation to\na federated plugin, you will coordinate with the package\nauthor to include your implementation.\nIn this way, the original author endorses your\nimplementation.", "For example, say you write a foobar_windows\nimplementation for the (imaginary) foobar plugin.\nIn an endorsed plugin, the original foobar author\nadds your Windows implementation as a dependency\nin the pubspec for the app-facing package.\nThen, when a developer includes the foobar plugin\nin their Flutter app, the Windows implementation,\nas well as the other endorsed implementations,\nare automatically available to the app.", "If you can\u2019t, for whatever reason, get your implementation\nadded by the original plugin author, then your plugin\nis not endorsed. A developer can still use your\nimplementation, but must manually add the plugin\nto the app\u2019s pubspec file. So, the developer\nmust include both the foobar dependency and\nthe foobar_windows dependency in order to achieve\nfull functionality.", "For more information on federated plugins,\nwhy they are useful, and how they are\nimplemented, see the Medium article by Harry Terkelsen,\nHow To Write a Flutter Web Plugin, Part 2.", "Plugins can specify the platforms they support by\nadding keys to the platforms map in the\npubspec.yaml file. For example,\nthe following pubspec file shows the\nflutter: map for the hello plugin,\nwhich supports only iOS and Android:", "When adding plugin implementations for more platforms,\nthe platforms map should be updated accordingly.\nFor example, here\u2019s the map in the pubspec file\nfor the hello plugin,\nwhen updated to add support for macOS and web:", "A platform package uses the same format,\nbut includes an implements entry indicating\nwhich app-facing package it implements. For example,\na hello_windows plugin containing the Windows\nimplementation for hello\nwould have the following flutter: map:", "An app facing package can endorse a platform package by adding a\ndependency on it, and including it as a default_package in the\nplatforms: map. If the hello plugin above endorsed hello_windows,\nit would look as follows:", "Note that as shown here, an app-facing package can have\nsome platforms implemented within the package,\nand others in endorsed federated implementations.", "Many frameworks support both iOS and macOS with identical\nor mostly identical APIs, making it possible to implement\nsome plugins for both iOS and macOS with the same codebase.\nNormally each platform\u2019s implementation is in its own\nfolder, but the sharedDarwinSource option allows iOS\nand macOS to use the same folder instead:", "When sharedDarwinSource is enabled, instead of\nan ios directory for iOS and a macos directory\nfor macOS, both platforms use a shared darwin\ndirectory for all code and resources. When enabling\nthis option, you need to move any existing files\nfrom ios and macos to the shared directory. You\nalso need to update the podspec file to set the\ndependencies and deployment targets for both platforms,\nfor example:", "To create a plugin package, use the --template=plugin\nflag with flutter create.", "Use the --platforms= option followed by a\ncomma-separated list to specify the platforms\nthat the plugin supports. Available platforms are:\nandroid, ios, web, linux, macos, and windows.\nIf no platforms are specified, the\nresulting project doesn\u2019t support any platforms.", "Use the --org option to specify your organization,\nusing reverse domain name notation. This value is used\nin various package and bundle identifiers in the\ngenerated plugin code.", "Use the -a option to specify the language for android\nor the -i option to specify the language for ios.\nPlease choose one of the following:", "This creates a plugin project in the hello folder\nwith the following specialized content:", "By default, the plugin project uses Swift for iOS code and\nKotlin for Android code. If you prefer Objective-C or Java,\nyou can specify the iOS language using -i and the\nAndroid language using -a. For example:", "As a plugin package contains code for several platforms\nwritten in several programming languages,\nsome specific steps are needed to ensure a smooth experience.", "The API of the plugin package is defined in Dart code.\nOpen the main hello/ folder in your favorite Flutter editor.\nLocate the file lib/hello.dart.", "We recommend you edit the Android code using Android Studio.", "Then use the following steps:", "The Android platform code of your plugin is located in\nhello/java/com.example.hello/HelloPlugin.", "You can run the example app from Android Studio by\npressing the run (\u25b6) button.", "We recommend you edit the iOS code using Xcode.", "Before editing the iOS platform code in Xcode,\nfirst make sure that the code has been built at least once\n(in other words, run the example app from your IDE/editor,\nor in a terminal execute\ncd hello/example; flutter build ios --no-codesign).", "Then use the following steps:", "The iOS platform code for your plugin is located in\nPods/Development Pods/hello/../../example/ios/.symlinks/plugins/hello/ios/Classes\nin the Project Navigator. (If you are using sharedDarwinSource,\nthe path will end with hello/darwin/Classes instead.)", "You can run the example app by pressing the run (\u25b6) button.", "We recommend you edit the Linux code using an IDE with\nC++ integration. The instructions below are for\nVisual Studio Code with the \u201cC/C++\u201d and \u201cCMake\u201d extensions\ninstalled, but can be adjusted for other IDEs.", "Before editing the Linux platform code in an IDE,\nfirst make sure that the code has been built at least once\n(in other words, run the example app from your Flutter\nIDE/editor, or in a terminal execute\ncd hello/example; flutter build linux).", "Then use the following steps:", "The Linux platform code for your plugin is located in\nflutter/ephemeral/.plugin_symlinks/hello/linux/.", "You can run the example app using flutter run.\nNote: Creating a runnable Flutter application\non Linux requires steps that are part of the flutter\ntool, so even if your editor provides CMake\nintegration building and running that way won\u2019t\nwork correctly.", "We recommend you edit the macOS code using Xcode.", "Before editing the macOS platform code in Xcode,\nfirst make sure that the code has been built at least once\n(in other words, run the example app from your IDE/editor,\nor in a terminal execute\ncd hello/example; flutter build macos).", "Then use the following steps:", "The macOS platform code for your plugin is located in\nPods/Development Pods/hello/../../example/macos/Flutter/ephemeral/.symlinks/plugins/hello/macos/Classes\nin the Project Navigator. (If you are using sharedDarwinSource,\nthe path will end with hello/darwin/Classes instead.)", "You can run the example app by pressing the run (\u25b6) button.", "We recommend you edit the Windows code using Visual Studio.", "Before editing the Windows platform code in Visual Studio,\nfirst make sure that the code has been built at least once\n(in other words, run the example app from your IDE/editor,\nor in a terminal execute\ncd hello/example; flutter build windows).", "Then use the following steps:", "The Windows platform code for your plugin is located in\nhello_plugin/Source Files and hello_plugin/Header Files in\nthe Solution Explorer.", "You can run the example app by right-clicking hello_example in\nthe Solution Explorer and selecting Set as Startup Project,\nthen pressing the run (\u25b6) button. Important: After\nmaking changes to plugin code, you must select\nBuild > Build Solution before running again, otherwise\nan outdated copy of the built plugin will be run instead\nof the latest version containing your changes.", "Finally, you need to connect the API written in Dart code with\nthe platform-specific implementations.\nThis is done using a platform channel,\nor through the interfaces defined in a platform\ninterface package.", "To add support for specific platforms to an\nexisting plugin project, run flutter create with\nthe --template=plugin flag again in the project directory.\nFor example, to add web support in an existing plugin, run:", "If this command displays a message about updating the\npubspec.yaml file, follow the provided instructions.", "In many cases, non-web platform implementations only use the\nplatform-specific implementation language, as shown above. However,\nplatform implementations can also use platform-specific Dart as well.", "info Note:\n  The examples below only apply to non-web platforms. Web\n  plugin implementations are always written in Dart, and use\n  pluginClass and fileName for their Dart implementations\n  as shown above.", "In some cases, some platforms can be\nimplemented entirely in Dart (for example, using FFI).\nFor a Dart-only platform implementation on a platform other than web,\nreplace the pluginClass in pubspec.yaml with a dartPluginClass.\nHere is the hello_windows example above modified for a\nDart-only implementation:", "In this version you would have no C++ Windows code, and would instead\nsubclass the hello plugin\u2019s Dart platform interface class with a\nHelloPluginWindows class that includes a static\nregisterWith() method.  This method is called during startup,\nand can be used to register the Dart implementation:", "Platform implementations can also use both Dart and a platform-specific\nlanguage. For example, a plugin could use a different platform channel\nfor each platform so that the channels can be customized per platform.", "A hybrid implementation uses both of the registration systems\ndescribed above. Here is the hello_windows example above modified for a\nhybrid implementation:", "The Dart HelloPluginWindows class would use the registerWith()\nshown above for Dart-only implementations, while the C++ HelloPlugin\nclass would be the same as in a C++-only implementation.", "We encourage you test your plugin with automated tests\nto ensure that functionality doesn\u2019t regress\nas you make changes to your code.", "To learn more about testing your plugins,\ncheck out Testing plugins.\nIf you are writing tests for your Flutter app\nand plugins are causing crashes,\ncheck out Flutter in plugin tests.", "If you want to develop a package that calls into native APIs using\nDart\u2019s FFI, you need to develop an FFI plugin package.", "Both FFI plugin packages and (non-FFI) plugin packages support\nbundling native code, but FFI plugin packages do not support\nmethod channels and do include method channel registration code.\nIf you want to implement a plugin that uses both method channels\nand FFI, use a (non-FFI) plugin. You can chose per platform to\nuse an FFI or (non-FFI) plugin.", "FFI plugin packages were introduced in Flutter 3.0, if you\u2019re\ntargeting older Flutter versions, you can use a (non-FFI) plugin.", "To create a starter FFI plugin package,\nuse the --template=plugin_ffi flag with flutter create:", "This creates an FFI plugin project in the hello\nfolder with the following specialized content:", "lib: The Dart code that defines the API of the plugin,\n  and which calls into the native code using dart:ffi.", "src: The native source code, and a CMakeLists.txt\n  file for building that source code into a dynamic library.", "platform folders (android, ios, windows, etc.): The\n  build files for building and bundling the native code\n  library with the platform application.", "The pubspec.yaml specifies FFI plugins as follows:", "This configuration invokes the native build\nfor the various target platforms and bundles\nthe binaries in Flutter applications using these FFI plugins.", "This can be combined with dartPluginClass,\nsuch as when FFI is used for the\nimplementation of one platform in a federated plugin:", "A plugin can have both FFI and method channels:", "The native build systems that are invoked by FFI\n(and method channels) plugins are:", "To use the native code, bindings in Dart are needed.", "To avoid writing these by hand, they are generated from the header file\n(src/hello.h) by package:ffigen.\nRegenerate the bindings by running the following:", "Very short-running native functions can be directly\ninvoked from any isolate.\nFor an example, see sum in lib/hello.dart.", "Longer-running functions should be invoked on a\nhelper isolate to avoid dropping frames in\nFlutter applications.\nFor an example, see sumAsync in lib/hello.dart.", "It is recommended practice to add the following documentation\nto all packages:", "When you publish a package,\nAPI documentation is automatically generated and\npublished to pub.dev/documentation.\nFor example, see the docs for device_info.", "If you wish to generate API documentation locally on\nyour development machine, use the following commands:", "Change directory to the location of your package:", "Tell the documentation tool where the\n    Flutter SDK is located (change the following commands to reflect\n    where you placed it):", "Run the dart doc tool\n    (included as part of the Flutter SDK), as follows:", "For tips on how to write API documentation, see\nEffective Dart Documentation.", "Individual licenses inside each LICENSE file\nshould be separated by 80 hyphens\non their own on a line.", "If a LICENSE file contains more than one\ncomponent license, then each component\nlicense must start with the names of the\npackages to which the component license applies,\nwith each package name on its own line,\nand the list of package names separated from\nthe actual license text by a blank line.\n(The packages need not match the names of\nthe pub package. For example, a package might itself contain\ncode from multiple third-party sources,\nand might need to include a license for each one.)", "The following example shows a well-organized license file:", "Here is another example of a well-organized license file:", "Here is an example of a poorly-organized license file:", "Another example of a poorly-organized license file:", "tips_and_updates Tip:\n  Have you noticed that some of the packages and plugins\n  on pub.dev are designated as Flutter Favorites?\n  These are the packages published by verified developers\n  and are identified as the packages and plugins you\n  should first consider using when writing your app.\n  To learn more,\n  see the Flutter Favorites program.", "Once you have implemented a package, you can publish it on\npub.dev, so that other developers can easily use it.", "Prior to publishing, make sure to review the pubspec.yaml,\nREADME.md, and CHANGELOG.md files to make sure their\ncontent is complete and correct. Also, to improve the\nquality and usability of your package (and to make it\nmore likely to achieve the status of a Flutter Favorite),\nconsider including the following items:", "Next, run the publish command in dry-run mode\nto see if everything passes analysis:", "The next step is publishing to pub.dev,\nbut be sure that you are ready because\npublishing is forever:", "For more details on publishing, see the\npublishing docs on dart.dev.", "If you are developing a package hello that depends on\nthe Dart API exposed by another package, you need to add\nthat package to the dependencies section of your\npubspec.yaml file. The code below makes the Dart API\nof the url_launcher plugin available to hello:", "You can now import 'package:url_launcher/url_launcher.dart'\nand launch(someUrl) in the Dart code of hello.", "This is no different from how you include packages in\nFlutter apps or any other Dart project.", "But if hello happens to be a plugin package\nwhose platform-specific code needs access\nto the platform-specific APIs exposed by url_launcher,\nyou also need to add suitable dependency declarations\nto your platform-specific build files, as shown below.", "The following example sets a dependency for\nurl_launcher in hello/android/build.gradle:", "You can now import io.flutter.plugins.urllauncher.UrlLauncherPlugin\nand access the UrlLauncherPlugin\nclass in the source code at hello/android/src.", "For more information on build.gradle files, see the\nGradle Documentation on build scripts.", "The following example sets a dependency for\nurl_launcher in hello/ios/hello.podspec:", "You can now #import \"UrlLauncherPlugin.h\" and\naccess the UrlLauncherPlugin class in the source code\nat hello/ios/Classes.", "For additional details on .podspec files, see the\nCocoaPods Documentation on them.", "All web dependencies are handled by the pubspec.yaml\nfile like any other Dart package.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//packages-and-plugins/developing-packages", "base_url": "https://docs.flutter.dev/"}, {"title": "Obfuscate Dart code | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Code obfuscation is the process of modifying an\napp\u2019s binary to make it harder for humans to understand.\nObfuscation hides function and class names in your\ncompiled Dart code, replacing each symbol with\nanother symbol, making it difficult for an attacker\nto reverse engineer your proprietary app.", "Flutter\u2019s code obfuscation works\nonly on a release build.", "Note that obfuscating your code does not\nencrypt resources nor does it protect against\nreverse engineering.\nIt only renames symbols with more obscure names.", "info\n  It is a poor security practice to\n  store secrets in an app.", "The following build targets\nsupport the obfuscation process\ndescribed on this page:", "info\n  Web apps don\u2019t support obfuscation.\n  A web app can be minified, which provides a similar result.\n  When you build a release version of a Flutter web app,\n  the web compiler minifies the app. To learn more,\n  see Build and release a web app.", "To obfuscate your app, use the flutter build command\nin release mode\nwith the --obfuscate and  --split-debug-info options.\nThe --split-debug-info option specifies the directory\nwhere Flutter outputs debug files.\nIn the case of obfuscation, it outputs a symbol map.\nFor example:", "Once you\u2019ve obfuscated your binary, save\nthe symbols file. You need this if you later\nwant to de-obfuscate a stack trace.", "tips_and_updates Tip:\n  The --split-debug-info option can also be used without --obfuscate\n  to extract Dart program symbols, reducing code size.\n  To learn more about app size, see Measuring your app\u2019s size.", "For detailed information on these flags, run\nthe help command for your specific target, for example:", "If these flags are not listed in the output,\nrun flutter --version to check your version of Flutter.", "To debug a stack trace created by an obfuscated app,\nuse the following steps to make it human readable:", "Find the matching symbols file.\nFor example, a crash from an Android arm64\ndevice would need app.android-arm64.symbols.", "Provide both the stack trace (stored in a file)\nand the symbols file to the flutter symbolize command.\nFor example:", "For more information on the symbolize command,\nrun flutter symbolize -h.", "To make the name that an app obfuscated human readable,\nuse the following steps:", "To save the name obfuscation map at app build time,\nuse --extra-gen-snapshot-options=--save-obfuscation-map=/<your-path>.\nFor example:", "To recover the name, use the generated obfuscation map.\nThe obfuscation map is a flat JSON array with pairs of\noriginal names and obfuscated names. For example,\n[\"MaterialApp\", \"ex\", \"Scaffold\", \"ey\"], where ex\nis the obfuscated name of MaterialApp.", "Be aware of the following when coding an app that will\neventually be an obfuscated binary.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/obfuscate", "base_url": "https://docs.flutter.dev/"}, {"title": "Install and run DevTools from VS Code | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "To use the DevTools from VS Code, you need the Dart extension.\nIf you\u2019re debugging Flutter applications, you should also install\nthe Flutter extension.", "Start a debug session for your application by opening the root\nfolder of your project (the one containing pubspec.yaml)\nin VS Code and clicking Run > Start Debugging (F5).", "Once the debug session is active and the application has started,\nthe Open DevTools commands become available in the\nVS Code command palette (F1):", "The chosen tool will be opened embedded inside VS Code.", "You can choose to have DevTools always opened in a browser with the\ndart.embedDevTools setting, and control whether it opens as a full window or\nin a new column next to your current editor with the dart.devToolsLocation\nsetting.", "A full list of Dart/Flutter settings are available\nhere or in the\nVS Code settings editor.\nSome recommendation settings for Dart/Flutter in VS Code can be found\nhere.", "You can also see whether DevTools is running and launch it in a browser from the\nlanguage status area (the {} icon next to Dart in the status bar).", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/vscode", "base_url": "https://docs.flutter.dev/"}, {"title": "Add Flutter to iOS | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/ios", "base_url": "https://docs.flutter.dev/"}, {"title": "Understanding Flutter's keyboard focus system | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This article explains how to control where keyboard input is directed. If you\nare implementing an application that uses a physical keyboard, such as most\ndesktop and web applications, this page is for you. If your app won\u2019t be used\nwith a physical keyboard, you can skip this.", "Flutter comes with a focus system that directs the keyboard input to a\nparticular part of an application. In order to do this, users \u201cfocus\u201d the input\nonto that part of an application by tapping or clicking the desired UI element.\nOnce that happens, text entered with the keyboard flows to that part of the\napplication until the focus moves to another part of the application.  Focus can\nalso be moved by pressing a particular keyboard shortcut, which is typically\nbound to Tab, so it is sometimes called \u201ctab traversal\u201d.", "This page explores the APIs used to perform these operations on a Flutter\napplication, and how the focus system works. We have noticed that there is some\nconfusion among developers about how to define and use FocusNode objects.\nIf that describes your experience, skip ahead to the best practices for\ncreating FocusNode objects.", "Some examples of situations where you might need to know how to use the focus\nsystem:", "Below are terms, as Flutter uses them, for elements of the focus system. The\nvarious classes that implement some of these concepts are introduced below.", "The FocusNode and FocusScopeNode objects implement the\nmechanics of the focus system. They are long-lived objects (longer than widgets,\nsimilar to render objects) that hold the focus state and attributes so that they\nare persistent between builds of the widget tree. Together, they form\nthe focus tree data structure.", "They were originally intended to be developer-facing objects used to control\nsome aspects of the focus system, but over time they have evolved to mostly\nimplement details of the focus system. In order to prevent breaking existing\napplications, they still contain public interfaces for their attributes. But, in\ngeneral, the thing for which they are most useful is to act as a relatively\nopaque handle, passed to a descendant widget in order to call requestFocus()\non an ancestor widget, which requests that a descendant widget obtain focus.\nSetting of the other attributes is best managed by a Focus or\nFocusScope widget, unless you are not using them, or implementing your own\nversion of them.", "Some dos and don\u2019ts around using these objects include:", "There is an API for telling a node to \u201cgive up the focus\u201d, named\nFocusNode.unfocus(). While it does remove focus from the node, it is important\nto realize that there really is no such thing as \u201cunfocusing\u201d all nodes. If a\nnode is unfocused, then it must pass the focus somewhere else, since there is\nalways a primary focus. The node that receives the focus when a node calls\nunfocus() is either the nearest FocusScopeNode, or a previously focused node\nin that scope, depending upon the disposition argument given to unfocus().\nIf you would like more control over where the focus goes when you remove it from\na node, explicitly focus another node instead of calling unfocus(), or use the\nfocus traversal mechanism to find another node with the focusInDirection,\nnextFocus, or previousFocus methods on FocusNode.", "When calling unfocus(), the disposition argument allows two modes for\nunfocusing: UnfocusDisposition.scope and\nUnfocusDisposition.previouslyFocusedChild. The default is scope, which gives\nthe focus to the nearest parent focus scope. This means that if the focus is\nthereafter moved to the next node with FocusNode.nextFocus, it starts with the\n\u201cfirst\u201d focusable item in the scope.", "The previouslyFocusedChild disposition will search the scope to find the\npreviously focused child and request focus on it. If there is no previously\nfocused child, it is equivalent to scope.", "Beware: If there is no other scope, then focus moves to the root scope node of\n  the focus system, FocusManager.rootScope. This is generally not desirable, as\n  the root scope doesn\u2019t have a context for the framework to determine which\n  node should be focused next. If you find that your application suddenly loses\n  the ability to navigate by using focus traversal, this is probably what has\n  happened.  To fix it, add a FocusScope as an ancestor to the focus node that\n  is requesting the unfocus. The WidgetsApp (from which MaterialApp and\n  CupertinoApp are derived) has its own FocusScope, so this should not be an\n  issue if you are using those.", "The Focus widget owns and manages a focus node, and is the workhorse of the\nfocus system.  It manages the attaching and detaching of the focus node it owns\nfrom the focus tree, manages the attributes and callbacks of the focus node, and\nhas static functions to enable discovery of focus nodes attached to the widget\ntree.", "In its simplest form, wrapping the Focus widget around a widget subtree allows\nthat widget subtree to obtain focus as part of the focus traversal process, or\nwhenever requestFocus is called on the FocusNode passed to it. When combined\nwith a gesture detector that calls requestFocus, it can receive focus when\ntapped or clicked.", "You might pass a FocusNode object to the Focus widget to manage, but if you\ndon\u2019t, it creates its own. The main reason to create your own\nFocusNode is to be able to call requestFocus()\non the node to control the focus from a parent widget. Most of the other\nfunctionality of a FocusNode is best accessed by changing the attributes of\nthe Focus widget itself.", "The Focus widget is used in most of Flutter\u2019s own controls to implement their\nfocus functionality.", "Here is an example showing how to use the Focus widget to make a custom\ncontrol focusable. It creates a container with text that reacts to receiving the\nfocus.", "If you wish to listen for key events in a subtree, set the onKey attribute of\nthe Focus widget to be a handler that either just listens to the key, or\nhandles the key and stops its propagation to other widgets.", "Key events start at the focus node with primary focus. If that node doesn\u2019t\nreturn KeyEventResult.handled from its onKey handler, then its parent focus\nnode is given the event. If the parent doesn\u2019t handle it, it goes to its parent,\nand so on, until it reaches the root of the focus tree. If the event reaches the\nroot of the focus tree without being handled, then it is returned to the\nplatform to give to the next native control in the application (in case the\nFlutter UI is part of a larger native application UI). Events that are handled\nare not propagated to other Flutter widgets, and they are also not propagated to\nnative widgets.", "Here\u2019s an example of a Focus widget that absorbs every key that its subtree\ndoesn\u2019t handle, without being able to be the primary focus:", "Focus key events are processed before text entry events, so handling a key event\nwhen the focus widget surrounds a text field prevents that key from being\nentered into the text field.", "Here\u2019s an example of a widget that won\u2019t allow the letter \u201ca\u201d to be typed into\nthe text field:", "If the intent is input validation, this example\u2019s functionality would probably\nbe better implemented using a TextInputFormatter, but the technique can still\nbe useful: the Shortcuts widget uses this method to handle shortcuts before\nthey become text input, for instance.", "One of the main aspects of focus is controlling what can receive focus and how.\nThe attributes canRequestFocus, skipTraversal, and descendantsAreFocusable\ncontrol how this node and its descendants participate in the focus process.", "If the skipTraversal attribute true, then this focus node doesn\u2019t participate\nin focus traversal. It is still focusable if requestFocus is called on its\nfocus node, but is otherwise skipped when the focus traversal system is looking\nfor the next thing to focus on.", "The canRequestFocus attribute, unsurprisingly, controls whether or not the\nfocus node that this Focus widget manages can be used to request focus. If\nthis attribute is false, then calling requestFocus on the node has no effect.\nIt also implies that this node is skipped for focus traversal, since it can\u2019t\nrequest focus.", "The descendantsAreFocusable attribute controls whether the descendants of this\nnode can receive focus, but still allows this node to receive focus.  This\nattribute can be used to turn off focusability for an entire widget subtree.\nThis is how the ExcludeFocus widget works: it\u2019s just a Focus widget with\nthis attribute set.", "Setting the autofocus attribute of a Focus widget tells the widget to\nrequest the focus the first time the focus scope it belongs to is focused.  If\nmore than one widget has autofocus set, then it is arbitrary which one\nreceives the focus, so try to only set it on one widget per focus scope.", "The autofocus attribute only takes effect if there isn\u2019t already a focus in\nthe scope that the node belongs to.", "Setting the autofocus attribute on two nodes that belong to different focus\nscopes is well defined: each one becomes the focused widget when their\ncorresponding scopes are focused.", "The Focus.onFocusChanged callback can be used to get notifications that the\nfocus state for a particular node has changed. It notifies if the node is added\nto or removed from the focus chain, which means it gets notifications even if it\nisn\u2019t the primary focus. If you only want to know if you have received the\nprimary focus, check and see if hasPrimaryFocus is true on the focus node.", "Sometimes, it is useful to obtain the focus node of a Focus widget to\ninterrogate its attributes.", "To access the focus node from an ancestor of the Focus widget, create and pass\nin a FocusNode as the Focus widget\u2019s focusNode attribute. Because it needs\nto be disposed of, the focus node you pass needs to be owned by a stateful\nwidget, so don\u2019t just create one each time it is built.", "If you need access to the focus node from the descendant of a Focus widget,\nyou can call Focus.of(context) to obtain the focus node of the nearest Focus\nwidget to the given context. If you need to obtain the FocusNode of a Focus\nwidget within the same build function, use a Builder to make sure you have\nthe correct context. This is shown in the following example:", "One of the details of the focus system is that when focus is requested, it only\ntakes effect after the current build phase completes.  This means that focus\nchanges are always delayed by one frame, because changing focus can\ncause arbitrary parts of the widget tree to rebuild, including ancestors of the\nwidget currently requesting focus. Because descendants cannot dirty their\nancestors, it has to happen between frames, so that any needed changes can\nhappen on the next frame.", "The FocusScope widget is a special version of the Focus widget that manages\na FocusScopeNode instead of a FocusNode.  The FocusScopeNode is a special\nnode in the focus tree that serves as a grouping mechanism for the focus nodes\nin a subtree. Focus traversal stays within a focus scope unless a node outside\nof the scope is explicitly focused.", "The focus scope also keeps track of the current focus and history of the nodes\nfocused within its subtree.  That way, if a node releases focus or is removed\nwhen it had focus, the focus can be returned to the node that had focus\npreviously.", "Focus scopes also serve as a place to return focus to if none of the descendants\nhave focus.  This allows the focus traversal code to have a starting context for\nfinding the next (or first) focusable control to move to.", "If you focus a focus scope node, it first attempts to focus the current, or most\nrecently focused node in its subtree, or the node in its subtree that requested\nautofocus (if any).  If there is no such node, it receives the focus itself.", "The FocusableActionDetector is a widget that combines the functionality of\nActions, Shortcuts, MouseRegion and a Focus widget to create\na detector that defines actions and key bindings, and provides callbacks for\nhandling focus and hover highlights. It is what Flutter controls use to\nimplement all of these aspects of the controls. It is just implemented using the\nconstituent widgets, so if you don\u2019t need all of its functionality, you can just\nuse the ones you need, but it is a convenient way to build these behaviors into\nyour custom controls.", "info Note:\n  To learn more, watch this short Widget of the Week video on the FocusableActionDetector widget:", "Once an application has the ability to focus, the next thing many apps want to\ndo is to allow the user to control the focus using the keyboard or another input\ndevice. The most common example of this is \u201ctab traversal\u201d where the user\npresses Tab to go to the \u201cnext\u201d control. Controlling what \u201cnext\u201d\nmeans is the subject of this section. This kind of traversal is provided by\nFlutter by default.", "In a simple grid layout, it\u2019s fairly easy to decide which control is next. If\nyou\u2019re not at the end of the row, then it\u2019s the one to the right (or left for\nright-to-left locales). If you are at the end of a row, it\u2019s the first control\nin the next row. Unfortunately, applications are rarely laid out in grids, so\nmore guidance is often needed.", "The default algorithm in Flutter (ReadingOrderTraversalPolicy) for focus\ntraversal is pretty good: It gives the right answer for most applications.\nHowever, there are always pathological cases, or cases where the context or\ndesign requires a different order than the one the default ordering algorithm\narrives at. For those cases, there are other mechanisms for achieving the\ndesired order.", "The FocusTraversalGroup widget should be placed in the tree around widget\nsubtrees that should be fully traversed before moving on to another widget or\ngroup of widgets. Just grouping widgets into related groups is often enough to\nresolve many tab traversal ordering problems. If not, the group can also be\ngiven a FocusTraversalPolicy to determine the ordering within the group.", "The default ReadingOrderTraversalPolicy is usually sufficient, but in\ncases where more control over ordering is needed, an\nOrderedTraversalPolicy can be used. The order argument of the\nFocusTraversalOrder widget wrapped around the focusable components\ndetermines the order. The order can be any subclass of FocusOrder, but\nNumericFocusOrder and LexicalFocusOrder are provided.", "If none of the provided focus traversal policies are sufficient for your\napplication, you could also write your own policy and use it to determine any\ncustom ordering you want.", "Here\u2019s an example of how to use the FocusTraversalOrder widget to traverse a\nrow of buttons in the order TWO, ONE, THREE using NumericFocusOrder.", "The FocusTraversalPolicy is the object that determines which widget is next,\ngiven a request and the current focus node. The requests (member functions) are\nthings like findFirstFocus, findLastFocus, next, previous, and\ninDirection.", "FocusTraversalPolicy is the abstract base class for concrete policies, like\nReadingOrderTraversalPolicy,  OrderedTraversalPolicy and the\nDirectionalFocusTraversalPolicyMixin classes.", "In order to use a FocusTraversalPolicy, you give one to a\nFocusTraversalGroup, which determines the widget subtree in which the policy\nwill be effective. The member functions of the class are rarely called directly:\nthey are meant to be used by the focus system.", "The FocusManager maintains the current primary focus for the system. It\nonly has a few pieces of API that are useful to users of the focus system. One\nis the FocusManager.instance.primaryFocus property, which contains the\ncurrently focused focus node and is also accessible from the global\nprimaryFocus field.", "Other useful properties are FocusManager.instance.highlightMode and\nFocusManager.instance.highlightStrategy. These are used by widgets that need\nto switch between a \u201ctouch\u201d mode and a \u201ctraditional\u201d (mouse and keyboard) mode\nfor their focus highlights. When a user is using touch to navigate, the focus\nhighlight is usually hidden, and when they switch to a mouse or keyboard, the\nfocus highlight needs to be shown again so they know what is focused. The\nhightlightStrategy tells the focus manager how to interpret changes in the\nusage mode of the device: it can either automatically switch between the two\nbased on the most recent input events, or it can be locked in touch or\ntraditional modes. The provided widgets in Flutter already know how to use this\ninformation, so you only need it if you\u2019re writing your own controls from\nscratch. You can use addHighlightModeListener callback to listen for changes\nin the highlight mode.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/interactivity/focus", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter Favorite program | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The aim of the Flutter Favorite program is to identify\npackages and plugins that you should first consider when\nbuilding your app.\nThis is not a guarantee of quality or suitability to your\nparticular situation\u2014you should always perform your\nown evaluation of packages and plugins for your project.", "You can see the complete list of\nFlutter Favorite packages on pub.dev.", "info Note:\n  If you came here looking for the Happy Paths recommendations,\n  we have discontinued that project in favor of Flutter Favorites.", "Flutter Favorite packages have passed high quality standards\nusing the following metrics:", "The Flutter Ecosystem Committee is comprised of Flutter\nteam members and Flutter community members spread\nacross its ecosystem.\nOne of their jobs is to decide when a package\nhas met the quality bar to become a Flutter Favorite.", "The current committee members\n(ordered alphabetically by last name)\nare as follows:", "If you\u2019d like to nominate a package or plugin as a\npotential future Flutter Favorite, or would like\nto bring any other issues to the attention of the committee,\nsend the committee an email.", "Flutter Favorite packages are labeled as such on pub.dev\nby the Flutter team.\nIf you own a package that has been designated as a Flutter Favorite,\nyou must adhere to the following guidelines:", "You should expect the list of Flutter Favorite packages\nto grow and change as the ecosystem continues to thrive.\nThe committee will continue working with package authors\nto increase quality, as well as consider other areas of the\necosystem that could benefit from the Flutter Favorite program,\nsuch as tools, consulting firms, and prolific Flutter contributors.", "As the Flutter ecosystem grows,\nwe\u2019ll be looking at expanding the set of metrics,\nwhich might include the following:", "You can see the complete list of\nFlutter Favorite packages on pub.dev.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//packages-and-plugins/favorites", "base_url": "https://docs.flutter.dev/"}, {"title": "An introduction to widget testing | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In the introduction to unit testing recipe,\nyou learned how to test Dart classes using the test package.\nTo test widget classes, you need a few additional tools provided by the\nflutter_test package, which ships with the Flutter SDK.", "The flutter_test package provides the following tools for\ntesting widgets:", "If this sounds overwhelming, don\u2019t worry. Learn how all of these pieces fit\ntogether throughout this recipe, which uses the following steps:", "Before writing tests, include the flutter_test\ndependency in the dev_dependencies section of the pubspec.yaml file.\nIf creating a new Flutter project with the command line tools or\na code editor, this dependency should already be in place.", "Next, create a widget for testing. For this recipe,\ncreate a widget that displays a title and message.", "With a widget to test, begin by writing your first test.\nUse the testWidgets() function provided by the\nflutter_test package to define a test.\nThe testWidgets function allows you to define a\nwidget test and creates a WidgetTester to work with.", "This test verifies that MyWidget displays a given title and message.\nIt is titled accordingly, and it will be populated in the next section.", "Next, build MyWidget inside the test environment by using the\npumpWidget() method provided by WidgetTester.\nThe pumpWidget method builds and renders the provided widget.", "Create a MyWidget instance that displays \u201cT\u201d as the title\nand \u201cM\u201d as the message.", "After the initial call to pumpWidget(), the WidgetTester provides\nadditional ways to rebuild the same widget. This is useful if you\u2019re\nworking with a StatefulWidget or animations.", "For example, tapping a button calls setState(), but Flutter won\u2019t\nautomatically rebuild your widget in the test environment.\nUse one of the following methods to ask Flutter to rebuild the widget.", "info Note:\n  To kick off the animation, you need to call pump()\n  once (with no duration specified) to start the ticker.\n  Without it, the animation does not start.", "These methods provide fine-grained control over the build lifecycle,\nwhich is particularly useful while testing.", "With a widget in the test environment, search\nthrough the widget tree for the title and message\nText widgets using a Finder. This allows verification that\nthe widgets are being displayed correctly.", "For this purpose, use the top-level find()\nmethod provided by the flutter_test package to create the Finders.\nSince you know you\u2019re looking for Text widgets, use the\nfind.text() method.", "For more information about Finder classes, see the\nFinding widgets in a widget test recipe.", "Finally, verify the title and message Text widgets appear on screen\nusing the Matcher constants provided by flutter_test.\nMatcher classes are a core part of the test package,\nand provide a common way to verify a given\nvalue meets expectations.", "Ensure that the widgets appear on screen exactly one time.\nFor this purpose, use the findsOneWidget Matcher.", "In addition to findsOneWidget, flutter_test provides additional\nmatchers for common cases.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/widget/introduction", "base_url": "https://docs.flutter.dev/"}, {"title": "Web renderers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When running and building apps for the web, you can choose between two different\nrenderers. This page describes both renderers and how to choose the best one for\nyour needs. The two renderers are:", "The --web-renderer command line option takes one of three values, auto,\nhtml, or canvaskit.", "This flag can be used with the run or build subcommands. For example:", "This flag is ignored when a non-browser (mobile or desktop) device\ntarget is selected.", "To override the web renderer at runtime:", "The web renderer can\u2019t be changed after the Flutter engine startup process\nbegins in main.dart.js.", "info Note:\n  As of Flutter 3.7.0,  setting a window.flutterWebRenderer\n  (an approach used in previous releases) displays a\n  deprecation notice in the JS console. For more information,\n  check out Customizing web app initialization.", "Choose the auto option (default) if you are optimizing for download size on\nmobile browsers and optimizing for performance on desktop browsers.", "Choose the html option if you are optimizing download size over performance on\nboth desktop and mobile browsers.", "Choose the canvaskit option if you are prioritizing performance and\npixel-perfect consistency on both desktop and mobile browsers.", "Run in Chrome using the default renderer option (auto):", "Build your app in release mode, using the default (auto) option:", "Build your app in release mode, using just the CanvasKit renderer:", "Run  your app in profile mode using the HTML renderer:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web/renderers", "base_url": "https://docs.flutter.dev/"}, {"title": "Videos | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "These Flutter videos, produced both internally\nat Google and by the Flutter community,\nmight help if you are a visual learner.", "Note that many people make Flutter videos.\nThis page shows some that we like,\nbut there are many others, including\nsome in different languages.", "Even if you couldn\u2019t make it to Nairobi for the in-person\nevent, you can enjoy the content created for Flutter Forward!", "Flutter Forward livestream\nFlutter Forward playlist", "Flutter Forward is happening on Jan 25th, in Nairobi, Kenya.\nBefore the event, the Flutter team provided 17 days of Flutter\nfeaturing new content and activities leading up to the event.\nThis playlist contains these and other pre-event videos relating to\nFlutter Forward.", "17 Days of Flutter!\nGet ready for Flutter Forward playlist", "info Note:\n  Season 2 of Learning to Fly has been released as part\n  of the 17 Days of Flutter, leading up to the 3.7\n  release! Season 2 centers around creating a platform\n  game, DoodleDash, using the Flame engine.", "Follow along with Khanh\u2019s journey as she learns Flutter.\nFrom ideation down to the moments of confusion,\nlearn alongside her as she asks important questions like: \n\u201cWhat is the best way to build out a theme? How to approach using fonts?\u201d\nAnd more!", "Building my first Flutter app | Learning to Fly\nLearning to Fly playlist", "Here are some of the series offered on the\nflutterdev YouTube channel.\nFor more information, check out all\nof the Flutter channel\u2019s playlists.", "This series focuses on tips, tricks, best practices,\nand general advice on getting the most out of Flutter.\nIn the comments section for this series,\nyou can submit suggestions future episodes.", "Introducing Decoding Flutter\nDecoding Flutter playlist", "Do you have 60 seconds?\nEach one-minute video highlights a Flutter widget.", "Introducing widget of the week\nFlutter widget of the week playlist", "If you have another minute (or two),\neach of these videos highlights a Flutter package.", "flutter_slidable package\nFlutter package of the week playlist", "This series features Flutter programmers coding,\nunscripted and in real time. Mistakes, solutions\n(some of them correct), and snazzy intro music included.", "Introducing the Boring Flutter show\nThe Boring Flutter show playlist", "Google I/O 2022 is over, but you can still catch\nthe great Flutter content!", "Flutter at Google I/O playlist", "Flutter Engage 2021 was a day-long event that\nofficially launched Flutter 2.", "Check out the Flutter Engage 2021 highlights reel:", "Watch recordings of the sessions on the Flutter YouTube channel:", "Keynote\nFlutter Engage 2021 playlist", "Watch recordings of the sessions offered by the Flutter community:", "Flutter Engage community talks playlist", "Five-to-ten minute tutorials (more or less) on using Flutter.", "Introducing Flutter in focus\nFlutter in focus playlist", "Here are a some Flutter talks given at various conferences.", "Videos showing how various customers, such as Abbey Road Studio, Hamilton,\nand Alibaba, have used Flutter to create beautiful compelling apps with\nmillions of downloads.", "Flutter developer stories playlist", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/videos", "base_url": "https://docs.flutter.dev/"}, {"title": "Create flavors of a Flutter app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Have you ever wondered how to set up different environments in your Flutter app?\nFlavors (known as build configurations in iOS), allow you (the developer) to\ncreate separate environments for your app using the same code base.\nFor example, you might have one flavor for your full-fledged production app,\nanother as a limited \u201cfree\u201d app, another for testing experimental features, and so on.", "Say you want to make both free and paid versions of your Flutter app.\nYou can use flavors to set up both app versions\nwithout writing two separate apps.\nFor example, the free version of the app has basic functionality and ads.\nIn contrast, the paid version has basic app functionality, extra features,\ndifferent styles for paid users, and no ads.", "You also might use flavors for feature development.\nIf you\u2019ve built a new feature and want to try it out,\nyou could set up a flavor to test it out.\nYour production code remains unaffected\nuntil you\u2019re ready to deploy your new feature.", "Flavors let you define compile-time configurations\nand set parameters that are read at runtime to customize\nyour app\u2019s behavior.", "This document guides you through setting up Flutter flavors for iOS and Android.", "To set up flavors in iOS, you\u2019ll define build configurations in Xcode.", "Open your project in Xcode.", "Select Product > Scheme > New Scheme from the menu to\nadd a new Scheme.", "Duplicate the build configurations to differentiate between the\ndefault configurations that are already available and the new configurations\nfor the free scheme.", "info Note:\n  Your configurations should be based on your Debug.xconfig or Release.xcconfig\n  file, not the Pods-Runner.xcconfigs. You can check this by expanding the configuration names.", "To match the free flavor, add -free\nat the end of each new configuration name.", "Change the free scheme to match the build configurations already created.", "Now that you\u2019ve set up your free flavor,\nyou can, for example, add different product bundle identifiers per flavor.\nA bundle identifier uniquely identifies your application.\nIn this example, we set the Debug-free value to equal\ncom.flavor-test.free.", "Change the app bundle identifier to differentiate between schemes.\nIn Product Bundle Identifier, append .free to each -free scheme value.", "In the Build Settings, set the Product Name value to match each flavor.\nFor example, add Debug Free.", "Add the display name to Info.plist. Update the Bundle Display Name \nvalue to $(PRODUCT_NAME).", "Now you have set up your flavor by making a free scheme\nin Xcode and setting the build configurations for that scheme.", "For more information, skip to the Launching your app flavors\nsection at the end of this document.", "If your app uses a Flutter plugin, you need to update the ios/Podfile.", "Setting up flavors in Android can be done in your project\u2019s\nbuild.gradle file.", "Inside your Flutter project,\nnavigate to android/app/build.gradle.", "Create a flavorDimension to group your added product flavors.\nGradle doesn\u2019t combine product flavors that share the same dimension.", "Add a productFlavors object with the desired flavors along\nwith values for dimension, resValue,\nand applicationId or applicationIdSuffix.", "Next, add a launch.json file; this allows you to run the command\nflutter run --flavor [environment name].", "In VSCode, set up the launch configurations as follows:", "You can now run the terminal command\nflutter run --flavor free or you can set up a run\nconfiguration in your IDE.", "For examples of build flavors for iOS (Xcode) and Android,\ncheck out the integration test samples in the Flutter repo.", "For more information on creating and using flavors, check out\nthe following resources:", "For packages that support creating flavors, check out the following:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/flavors", "base_url": "https://docs.flutter.dev/"}, {"title": "Install | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Select the operating system on which you are installing Flutter:", "error Important:\n  If you\u2019re in China, read Using Flutter in China.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/install", "base_url": "https://docs.flutter.dev/"}, {"title": "Animations tutorial | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This tutorial shows you how to build explicit animations in Flutter.\nAfter introducing some of the essential concepts, classes,\nand methods in the animation library, it walks you through 5\nanimation examples. The examples build on each other,\nintroducing you to different aspects of the animation library.", "The Flutter SDK also provides built-in explicit animations,\nsuch as FadeTransition, SizeTransition,\nand SlideTransition. These simple animations are\ntriggered by setting a beginning and ending point.\nThey are simpler to implement\nthan custom explicit animations, which are described here.", "The animation system in Flutter is based on typed\nAnimation objects. Widgets can either incorporate\nthese animations in their build functions directly by\nreading their current value and listening to their state\nchanges or they can use the animations as the basis of\nmore elaborate animations that they pass along to\nother widgets.", "In Flutter, an Animation object knows nothing about what\nis onscreen. An Animation is an abstract class that\nunderstands its current value and its state (completed or dismissed).\nOne of the more commonly used animation types is Animation<double>.", "An Animation object sequentially generates\ninterpolated numbers between two values over a certain duration.\nThe output of an Animation object might be linear,\na curve, a step function, or any other mapping you can devise.\nDepending on how the Animation object is controlled,\nit could run in reverse, or even switch directions in the\nmiddle.", "Animations can also interpolate types other than double, such as\nAnimation<Color> or Animation<Size>.", "An Animation object has state. Its current value is\nalways available in the .value member.", "An Animation object knows nothing about rendering or\nbuild() functions.", "A CurvedAnimation defines the animation\u2019s progress\nas a non-linear curve.", "info Note:\n  The Curves class defines many commonly used curves,\n  or you can create your own. For example:", "Browse the Curves documentation for a complete listing\n  (with visual previews) of the Curves constants that ship with Flutter.", "CurvedAnimation and AnimationController (described in the next section)\nare both of type Animation<double>, so you can pass them interchangeably.\nThe CurvedAnimation wraps the object it\u2019s modifying\u2014you\ndon\u2019t subclass AnimationController to implement a curve.", "AnimationController is a special Animation\nobject that generates a new value whenever the hardware\nis ready for a new frame. By default,\nan AnimationController linearly produces the numbers\nfrom 0.0 to 1.0 during a given duration.\nFor example, this code creates an Animation object,\nbut does not start it running:", "AnimationController derives from Animation<double>, so it can be used\nwherever an Animation object is needed. However, the AnimationController\nhas additional methods to control the animation. For example, you start\nan animation with the .forward() method. The generation of numbers is\ntied to the screen refresh, so typically 60 numbers are generated per\nsecond. After each number is generated, each Animation object calls the\nattached Listener objects. To create a custom display list for each\nchild, see RepaintBoundary.", "When creating an AnimationController, you pass it a vsync argument.\nThe presence of vsync prevents offscreen animations from consuming\nunnecessary resources.\nYou can use your stateful object as the vsync by adding\nSingleTickerProviderStateMixin to the class definition.\nYou can see an example of this in animate1 on GitHub.", "info Note:\n  In some cases, a position might exceed the AnimationController\u2019s\n  0.0-1.0 range. For example, the fling() function\n  allows you to provide velocity, force, and position\n  (via the Force object). The position can be anything and\n  so can be outside of the 0.0 to 1.0 range.", "A CurvedAnimation can also exceed the 0.0 to 1.0 range,\n  even if the AnimationController doesn\u2019t.\n  Depending on the curve selected, the output of\n  the CurvedAnimation can have a wider range than the input.\n  For example, elastic curves such as Curves.elasticIn\n  significantly overshoots or undershoots the default range.", "By default, the AnimationController object ranges from 0.0 to 1.0.\nIf you need a different range or a different data type, you can use a\nTween to configure an animation to interpolate to a\ndifferent range or data type. For example, the\nfollowing Tween goes from -200.0 to 0.0:", "A Tween is a stateless object that takes only begin and end.\nThe sole job of a Tween is to define a mapping from an\ninput range to an output range. The input range is commonly\n0.0 to 1.0, but that\u2019s not a requirement.", "A Tween inherits from Animatable<T>, not from Animation<T>.\nAn Animatable, like Animation, doesn\u2019t have to output double.\nFor example, ColorTween specifies a progression between two colors.", "A Tween object doesn\u2019t store any state. Instead, it provides the\nevaluate(Animation<double> animation) method that uses the \ntransform function to map the current value of the animation\n(between 0.0 and 1.0), to the actual animation value.", "The current value of the Animation object can be found in the\n.value method. The evaluate function also performs some housekeeping,\nsuch as ensuring that begin and end are returned when the\nanimation values are 0.0 and 1.0, respectively.", "To use a Tween object, call animate() on the Tween,\npassing in the controller object. For example,\nthe following code generates the\ninteger values from 0 to 255 over the course of 500 ms.", "info Note:\n  The animate() method returns an Animation,\n  not an Animatable.", "The following example shows a controller, a curve, and a Tween:", "An Animation object can have Listeners and StatusListeners,\ndefined with addListener() and addStatusListener().\nA Listener is called whenever the value of the animation changes.\nThe most common behavior of a Listener is to call setState()\nto cause a rebuild. A StatusListener is called when an animation begins,\nends, moves forward, or moves reverse, as defined by AnimationStatus.\nThe next section has an example of the addListener() method,\nand Monitoring the progress of the animation shows an\nexample of addStatusListener().", "This section walks you through 5 animation examples.\nEach section provides a link to the source code for that example.", "So far you\u2019ve learned how to generate a sequence of numbers over time.\nNothing has been rendered to the screen. To render with an\nAnimation object, store the Animation object as a\nmember of your widget, then use its value to decide how to draw.", "Consider the following app that draws the Flutter logo without animation:", "The following shows the same code modified to animate the\nlogo to grow from nothing to full size.\nWhen defining an AnimationController, you must pass in a\nvsync object. The vsync parameter is described in the\nAnimationController section.", "The changes from the non-animated example are highlighted:", "The addListener() function calls setState(),\nso every time the Animation generates a new number,\nthe current frame is marked dirty, which forces\nbuild() to be called again. In build(),\nthe container changes size because its height and\nwidth now use animation.value instead of a hardcoded value.\nDispose of the controller when the State object is\ndiscarded to prevent memory leaks.", "With these few changes,\nyou\u2019ve created your first animation in Flutter!", "Dart language tricks:\n  You might not be familiar with Dart\u2019s cascade notation\u2014the two\n  dots in ..addListener(). This syntax means that the addListener()\n  method is called with the return value from animate().\n  Consider the following example:", "This code is equivalent to:", "To learn more about cascades,\n  check out Cascade notation\n  in the Dart language documentation.", "The AnimatedWidget base class allows you to separate out\nthe core widget code from the animation code.\nAnimatedWidget doesn\u2019t need to maintain a State\nobject to hold the animation. Add the following AnimatedLogo class:", "AnimatedLogo uses the current value of the animation\nwhen drawing itself.", "The LogoApp still manages the AnimationController and the Tween,\nand it passes the Animation object to AnimatedLogo:", "It\u2019s often helpful to know when an animation changes state,\nsuch as finishing, moving forward, or reversing.\nYou can get notifications for this with addStatusListener().\nThe following code modifies the previous example so that\nit listens for a state change and prints an update.\nThe highlighted line shows the change:", "Running this code produces this output:", "Next, use addStatusListener() to reverse the animation\nat the beginning or the end. This creates a \u201cbreathing\u201d effect:", "One problem with the code in the animate3 example,\nis that changing the animation required changing the widget\nthat renders the logo. A better solution\nis to separate responsibilities into different classes:", "You can accomplish this separation with the help of the\nAnimatedBuilder class. An AnimatedBuilder is a\nseparate class in the render tree. Like AnimatedWidget,\nAnimatedBuilder automatically listens to notifications\nfrom the Animation object, and marks the widget tree\ndirty as necessary, so you don\u2019t need to call addListener().", "The widget tree for the animate4\nexample looks like this:", "Starting from the bottom of the widget tree, the code for rendering\nthe logo is straightforward:", "The middle three blocks in the diagram are all created in the\nbuild() method in GrowTransition, shown below.\nThe GrowTransition widget itself is stateless and holds\nthe set of final variables necessary to define the transition animation.\nThe build() function creates and returns the AnimatedBuilder,\nwhich takes the (Anonymous builder) method and the\nLogoWidget object as parameters. The work of rendering the\ntransition actually happens in the (Anonymous builder)\nmethod, which creates a Container of the appropriate size\nto force the LogoWidget to shrink to fit.", "One tricky point in the code below is that the child looks\nlike it\u2019s specified twice. What\u2019s happening is that the\nouter reference of child is passed to AnimatedBuilder,\nwhich passes it to the anonymous closure, which then uses\nthat object as its child. The net result is that the\nAnimatedBuilder is inserted in between the two widgets\nin the render tree.", "Finally, the code to initialize the animation looks very\nsimilar to the animate2 example. The initState()\nmethod creates an AnimationController and a Tween,\nthen binds them with animate(). The magic happens in\nthe build() method, which returns a GrowTransition\nobject with a LogoWidget as a child, and an animation object to\ndrive the transition. These are the three elements listed\nin the bullet points above.", "In this section, you\u2019ll build on the example from\nmonitoring the progress of the animation\n(animate3), which used AnimatedWidget\nto animate in and out continuously. Consider the case\nwhere you want to animate in and out while the\nopacity animates from transparent to opaque.", "info Note:\n  This example shows how to use multiple tweens on the same animation\n  controller, where each tween manages a different effect in\n  the animation. It is for illustrative purposes only.\n  If you were tweening opacity and size in production code,\n  you\u2019d probably use FadeTransition and SizeTransition\n  instead.", "Each tween manages an aspect of the animation. For example:", "You can get the size with sizeAnimation.value and the opacity\nwith opacityAnimation.value, but the constructor for AnimatedWidget\nonly takes a single Animation object. To solve this problem,\nthe example creates its own Tween objects and explicitly calculates the\nvalues.", "Change AnimatedLogo to encapsulate its own Tween objects,\nand its build() method calls Tween.evaluate()\non the parent\u2019s animation object to calculate\nthe required size and opacity values.\nThe following code shows the changes with highlights:", "This tutorial gives you a foundation for creating animations in\nFlutter using Tweens, but there are many other classes to explore.\nYou might investigate the specialized Tween classes,\nanimations specific to Material Design,\nReverseAnimation,\nshared element transitions (also known as Hero animations),\nphysics simulations and fling() methods.\nSee the animations landing page\nfor the latest available documents and examples.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations/tutorial", "base_url": "https://docs.flutter.dev/"}, {"title": "Adding an iOS App Clip target | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "error Important:\n  This experimental preview currently exceeds the 10MB\n  uncompressed IPA payload size limit and cannot be\n  used in production (#71098).", "This guide describes how to manually add another\nFlutter-rendering iOS App Clip target to your\nexisting Flutter project or add-to-app project.", "report_problem Warning:\n  This is an advanced guide and is best intended\n  for audience with a working knowledge of iOS development.", "To see a working sample, see the App Clip sample on GitHub.", "Open your iOS Xcode project, such as\nios/Runner.xcworkspace for full-Flutter apps.", "Click on your project in the Project Navigator to show\nthe project settings.", "Press + at the bottom of the target list to add a new target.", "Select the App Clip type for your new target.", "Enter your new target detail in the dialog.", "Select Storyboard for Interface.", "Select UIKit App Delegate for Life Cycle.", "Select the same language as your original target for Language.", "(In other words, to simplify the setup,\ndon\u2019t create a Swift App Clip target for\nan Objective-C main target, and vice versa.)", "In the following dialog,\nactivate the new scheme for the new target.", "In the Project Navigator, in the newly created App Clip group,\ndelete everything except Info.plist and\n<app clip target>.entitlements.", "tips_and_updates Tip:\n  For add-to-app users, it\u2019s up to the reader to decide\n  how much of this template to keep to invoke\n  FlutterViewController or FlutterEngine APIs\n  from this code later.", "Move files to trash.", "If you don\u2019t use the SceneDelegate.swift file,\nremove the reference to it in the Info.plist.", "Open the Info.plist file in the App Clip group.\nDelete the entire dictionary entry for\nApplication Scene Manifest.", "This step isn\u2019t necessary for add-to-app projects\nsince add-to-app projects have their custom build\nconfigurations and versions.", "Back in the project settings,\nselect the project entry now rather than any targets.", "In the Info tab, under the Configurations\nexpandable group, expand the\nDebug, Profile, and Release entries.", "For each, select the same value from the drop-down menu\nfor the App Clip target as the entry selected for the\nnormal app target.", "This gives your App Clip target access to Flutter\u2019s\nrequired build settings.", "In the App Clip group\u2019s Info.plist file, set:", "Assuming the intent is to show the same Flutter UI\nin the standard app as in the App Clip,\nshare the same code and assets.", "For each of the following: Main.storyboard, Assets.xcassets,\nLaunchScreen.storyboard, GeneratedPluginRegistrant.m, and\nAppDelegate.swift (and Supporting Files/main.m if using Objective-C),\nselect the file, then in the first tab of the inspector,\nalso include the App Clip target in the Target Membership\ncheckbox group.", "In this case,\ndo not delete everything listed in Step 3.\nInstead, use the scaffolding and the iOS add-to-app APIs\nto perform a custom launch of Flutter.\nFor example to show a custom Flutter route.", "This is a standard step for App Clip development.\nSee the official Apple documentation.", "Open the <app clip target>.entitlements file.\nAdd an Associated Domains Array type.\nAdd a row to the array with appclips:<your bundle id>.", "The same associated domains entitlement needs to be added\nto your main app, as well.", "Copy the <app clip target>.entitlements file from your\nApp Clip group to your main app group and rename it to\nthe same name as your main target\nsuch as Runner.entitlements.", "Open the file and delete the\nParent Application Identifiers\nentry for the main app\u2019s entitlement file\n(leave that entry for the App Clip\u2019s entitlement file).", "Back in the project settings, select the main app\u2019s target,\nopen the Build Settings tab.\nSet the Code Signing Entitlements setting to the\nrelative path of the second entitlements file\ncreated for the main app.", "These steps are not necessary for add-to-app.", "In your App Clip\u2019s target\u2019s project settings,\nopen the Build Settings tab.", "For setting Framework Search Paths, add 2 entries:", "In other words, the same as the main app target\u2019s build settings.", "For the Swift target,\nset the Objective-C Bridging Header\nbuild setting to Runner/Runner-Bridging-Header.h", "In other words,\nthe same as the main app target\u2019s build settings.", "Now open the Build Phases tab. Press the + sign\nand select New Run Script Phase.", "Drag that new phase to below the Dependencies phase.", "Expand the new phase and add this line to the script content:", "In other words,\nthe same as the main app target\u2019s build phases.", "This ensures that your Flutter Dart code is compiled\nwhen running the App Clip target.", "Press the + sign and select New Run Script Phase again.\nLeave it as the last phase.", "In other words,\nthe same as the main app target\u2019s build phases.", "This ensures that your Flutter app and engine are embedded\ninto the App Clip bundle.", "report_problem Warning:\n  CocoaPods version 1.10.0.beta.1 or higher is required\n  to run Flutter apps with plugins.", "Open the Podfile for your Flutter project\nor add-to-app host project.", "For full-Flutter apps, replace the following section:", "At the top of the file,\nalso uncomment platform :ios, '11.0' and set the\nversion to the lowest of the two target\u2019s iOS\nDeployment Target.", "For add-to-app, add to:", "From the command line,\nenter your Flutter project directory\nand then install the pod:", "You can now run your App Clip target from Xcode by\nselecting your App Clip target from the scheme drop-down,\nselecting an iOS 14 device and pressing run.", "To test launching an App Clip from the beginning,\nalso consult Apple\u2019s doc on\nTesting Your App Clip\u2019s Launch Experience.", "Unfortunately flutter attach cannot auto-discover\nthe Flutter session in an App Clip due to\nnetworking permission restrictions.", "In order to debug your App Clip and use functionalities\nlike hot reload, you must look for the Observatory URI\nfrom the console output in Xcode after running.\n[PENDING: Is this still true?]", "You must then copy paste it back into the\nflutter attach command to connect.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/ios-app-clip", "base_url": "https://docs.flutter.dev/"}, {"title": "Hosting native Android views in your Flutter app with Platform Views | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Platform views allow you to embed native views in a Flutter app,\nso you can apply transforms, clips, and opacity to the native view\nfrom Dart.", "This allows you, for example, to use the native\nGoogle Maps from the Android SDK\ndirectly inside your Flutter app.", "info Note:\n  This page discusses how to host your own native Android views\n  within a Flutter app.\n  If you\u2019d like to embed native iOS views in your Flutter app,\n  see Hosting native iOS views.", "Flutter supports two modes:\nHybrid composition and virtual displays.", "Which one to use depends on the use case.\nLet\u2019s take a look:", "Hybrid composition\nappends the native android.view.View to the view hierarchy. \nTherefore, keyboard handling, and accessibility work out of the box.\nPrior to Android 10, this mode might significantly\nreduce the frame throughput (FPS) of the Flutter UI.\nFor more context, see Performance.", "Virtual displays\nrender the android.view.View instance to a texture, \nso it\u2019s not embedded within the Android Activity\u2019s view hierarchy.\nCertain platform interactions such as keyboard handling\nand accessibility features might not work.", "To create a platform view on Android,\nuse the following steps:", "On the Dart side, create a Widget\nand add one of the following build implementations.", "In your Dart file,\nfor example native_view_example.dart,\nuse the following instructions:", "Add the following imports:", "Implement a build() method:", "For more information, see the API docs for:", "In your Dart file,\nfor example native_view_example.dart,\nuse the following instructions:", "Add the following imports:", "Implement a build() method:", "For more information, see the API docs for:", "On the platform side, use the standard\nio.flutter.plugin.platform package\nin either Java or Kotlin:", "In your native code, implement the following:", "Extend io.flutter.plugin.platform.PlatformView\nto provide a reference to the android.view.View\n(for example, NativeView.kt):", "Create a factory class that creates an instance of the\nNativeView created earlier\n(for example, NativeViewFactory.kt):", "Finally, register the platform view.\nYou can do this in an app or a plugin.", "For app registration,\nmodify the app\u2019s main activity\n(for example, MainActivity.kt):", "For plugin registration,\nmodify the plugin\u2019s main class\n(for example, PlatformViewPlugin.kt):", "In your native code, implement the following:", "Extend io.flutter.plugin.platform.PlatformView\nto provide a reference to the android.view.View\n(for example, NativeView.java):", "Create a factory class that creates an\ninstance of the NativeView created earlier\n(for example, NativeViewFactory.java):", "Finally, register the platform view.\nYou can do this in an app or a plugin.", "For app registration,\nmodify the app\u2019s main activity\n(for example, MainActivity.java):", "For plugin registration,\nmodify the plugin\u2019s main file\n(for example, PlatformViewPlugin.java):", "For more information, see the API docs for:", "Finally, modify your build.gradle file\nto require one of the minimal Android SDK versions:", "Certain Android Views do not invalidate themselves when their content changes.\nSome example views include SurfaceView and SurfaceTexture.\nWhen your Platform View includes these views you are required to\nmanually invalidate the view after they have been drawn to\n(or more specifically: after the swap chain is flipped).\nManual view invalidation is done by calling invalidate on the View \nor one of its parent views.", "Platform views in Flutter come with performance trade-offs.", "For example, in a typical Flutter app, the Flutter UI is composed\non a dedicated raster thread. This allows Flutter apps to be fast,\nas the main platform thread is rarely blocked.", "While a platform view is rendered with hybrid composition,\nthe Flutter UI is composed from the platform thread,\nwhich competes with other tasks like handling OS or plugin messages.", "Prior to Android 10, hybrid composition copied each Flutter frame\nout of the graphic memory into main memory, and then copied it back\nto a GPU texture. As this copy happens per frame, the performance of\nthe entire Flutter UI might be impacted. In Android 10 or above, the\ngraphics memory is copied only once.", "Virtual display, on the other hand,\nmakes each pixel of the native view\nflow through additional intermediate graphic buffers,\nwhich cost graphic memory and drawing performance.", "For complex cases, there are some techniques that\ncan be used to mitigate these issues.", "For example, you could use a placeholder texture\nwhile an animation is happening in Dart.\nIn other words, if an animation is slow while a\nplatform view is rendered,\nthen consider taking a screenshot of the\nnative view and rendering it as a texture.", "For more information, see:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android/platform-views", "base_url": "https://docs.flutter.dev/"}, {"title": "Hosting native iOS views in your Flutter app with Platform Views | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Platform views allow you to embed native views in a Flutter app,\nso you can apply transforms, clips, and opacity to the native view\nfrom Dart.", "This allows you, for example, to use the native\nGoogle Maps from the Android and iOS SDKs\ndirectly inside your Flutter app.", "info Note:\n  This page discusses how to host your own native iOS views\n  within a Flutter app.\n  If you\u2019d like to embed native Android views\n  in your Flutter app,\n  see Hosting native Android views.", "iOS only uses Hybrid composition,\nwhich means that the native\nUIView is appended to the view hierarchy.", "To create a platform view on iOS,\nuse the following instructions:", "On the Dart side, create a Widget\nand add the build implementation,\nas shown in the following steps.", "In the Dart widget file, make changes similar to those \nshown in native_view_example.dart:", "Add the following imports:", "Implement a build() method:", "For more information, see the API docs for:\nUIKitView.", "On the platform side, use either Swift or Objective-C:", "Implement the factory and the platform view.\nThe FLNativeViewFactory creates the platform view,\nand the platform view provides a reference to the UIView.\nFor example, FLNativeView.swift:", "Finally, register the platform view.\nThis can be done in an app or a plugin.", "For app registration,\nmodify the App\u2019s AppDelegate.swift:", "For plugin registration,\nmodify the plugin\u2019s main file\n(for example, FLPlugin.swift):", "In Objective-C, add the headers for the factory and the platform view.\nFor example, as shown in FLNativeView.h:", "Implement the factory and the platform view.\nThe FLNativeViewFactory creates the platform view,\nand the platform view provides a reference to the\nUIView. For example, FLNativeView.m:", "Finally, register the platform view.\nThis can be done in an app or a plugin.", "For app registration,\nmodify the App\u2019s AppDelegate.m:", "For plugin registration,\nmodify the main plugin file\n(for example, FLPlugin.m):", "For more information, see the API docs for:", "When implementing the build() method in Dart,\nyou can use defaultTargetPlatform\nto detect the platform, and decide which widget to use:", "Platform views in Flutter come with performance trade-offs.", "For example, in a typical Flutter app, the Flutter UI is \ncomposed on a dedicated raster thread. \nThis allows Flutter apps to be fast, \nas the main platform thread is rarely blocked.", "When a platform view is rendered with hybrid composition, \nthe Flutter UI is composed from the platform thread. \nThe platform thread competes with other tasks \nlike handling OS or plugin messages.", "When an iOS PlatformView is on screen, the screen refresh rate is \ncapped at 80fps to avoid rendering janks.", "For complex cases, there are some techniques that can be used \nto mitigate performance issues.", "For example, you could use a placeholder texture while an \nanimation is happening in Dart. \nIn other words, if an animation is slow while a platform view is rendered, \nthen consider taking a screenshot of the native view and rendering it as a texture.", "There are some limitations when composing iOS Platform Views.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/platform-views", "base_url": "https://docs.flutter.dev/"}, {"title": "Building user interfaces with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter widgets are built using a modern framework that takes\ninspiration from React. The central idea is that you build\nyour UI out of widgets. Widgets describe what their view\nshould look like given their current configuration and state.\nWhen a widget\u2019s state changes, the widget rebuilds its description,\nwhich the framework diffs against the previous description in order\nto determine the minimal changes needed in the underlying render\ntree to transition from one state to the next.", "info Note:\n  If you would like to become better acquainted with Flutter by diving\n  into some code, check out basic layout codelab,\n  building layouts,\n  and adding interactivity to your Flutter app.", "The minimal Flutter app simply calls the runApp()\nfunction with a widget:", "The runApp() function takes the given\nWidget and makes it the root of the widget tree.\nIn this example, the widget tree consists of two widgets,\nthe Center widget and its child, the Text widget.\nThe framework forces the root widget to cover the screen,\nwhich means the text \u201cHello, world\u201d ends up centered on screen.\nThe text direction needs to be specified in this instance;\nwhen the MaterialApp widget is used,\nthis is taken care of for you, as demonstrated later.", "When writing an app, you\u2019ll commonly author new widgets that\nare subclasses of either StatelessWidget or StatefulWidget,\ndepending on whether your widget manages any state.\nA widget\u2019s main job is to implement a build() function,\nwhich describes the widget in terms of other, lower-level widgets.\nThe framework builds those widgets in turn until the process\nbottoms out in widgets that represent the underlying RenderObject,\nwhich computes and describes the geometry of the widget.", "Flutter comes with a suite of powerful basic widgets,\nof which the following are commonly used:", "Below are some simple widgets that combine these and other widgets:", "Be sure to have a uses-material-design: true entry in the flutter\nsection of your pubspec.yaml file. It allows you to use the predefined\nset of Material icons. It\u2019s generally a good idea to include this line\nif you are using the Materials library.", "Many Material Design widgets need to be inside of a MaterialApp\nto display properly, in order to inherit theme data.\nTherefore, run the application with a MaterialApp.", "The MyAppBar widget creates a Container with a height of 56\ndevice-independent pixels with an internal padding of 8 pixels,\nboth on the left and the right. Inside the container,\nMyAppBar uses a Row layout to organize its children.\nThe middle child, the title widget, is marked as Expanded,\nwhich means it expands to fill any remaining available space\nthat hasn\u2019t been consumed by the other children.\nYou can have multiple Expanded children and determine the\nratio in which they consume the available space using the\nflex argument to Expanded.", "The MyScaffold widget organizes its children in a vertical column.\nAt the top of the column it places an instance of MyAppBar,\npassing the app bar a Text widget to use as its title.\nPassing widgets as arguments to other widgets is a powerful technique\nthat lets you create generic widgets that can be reused in a wide\nvariety of ways. Finally, MyScaffold uses an\nExpanded to fill the remaining space with its body,\nwhich consists of a centered message.", "For more information, check out Layouts.", "Flutter provides a number of widgets that help you build apps\nthat follow Material Design. A Material app starts with the\nMaterialApp widget, which builds a number of useful widgets\nat the root of your app, including a Navigator,\nwhich manages a stack of widgets identified by strings,\nalso known as \u201croutes\u201d. The Navigator lets you transition smoothly\nbetween screens of your application. Using the MaterialApp\nwidget is entirely optional but a good practice.", "Now that the code has switched from MyAppBar and MyScaffold to the\nAppBar and Scaffold widgets, and from material.dart,\nthe app is starting to look a bit more Material.\nFor example, the app bar has a shadow and the title text inherits the\ncorrect styling automatically. A floating action button is also added.", "Notice that widgets are passed as arguments to other widgets.\nThe Scaffold widget takes a number of different widgets as\nnamed arguments, each of which are placed in the Scaffold\nlayout in the appropriate place. Similarly, the\nAppBar widget lets you pass in widgets for the\nleading widget, and the actions of the title widget.\nThis pattern recurs throughout the framework and is something you\nmight consider when designing your own widgets.", "For more information, check out Material Components widgets.", "info Note:\n  Material is one of the 2 bundled designs included with Flutter.\n  To create an iOS-centric design,\n  check out the Cupertino components package,\n  which has its own versions of\n  CupertinoApp, and CupertinoNavigationBar.", "Most applications include some form of user interaction with the system.\nThe first step in building an interactive application is to detect\ninput gestures. See how that works by creating a simple button:", "The GestureDetector widget doesn\u2019t have a visual\nrepresentation but instead detects gestures made by the\nuser. When the user taps the Container,\nthe GestureDetector calls its onTap() callback, in this\ncase printing a message to the console. You can use\nGestureDetector to detect a variety of input gestures,\nincluding taps, drags, and scales.", "Many widgets use a GestureDetector to provide\noptional callbacks for other widgets. For example, the\nIconButton, ElevatedButton, and\nFloatingActionButton widgets have onPressed()\ncallbacks that are triggered when the user taps the widget.", "For more information, check out Gestures in Flutter.", "So far, this page has used only stateless widgets.\nStateless widgets receive arguments from their parent widget,\nwhich they store in final member variables.\nWhen a widget is asked to build(), it uses these stored\nvalues to derive new arguments for the widgets it creates.", "In order to build more complex experiences\u2014for example,\nto react in more interesting ways to user input\u2014applications\ntypically carry some state. Flutter uses StatefulWidgets to capture\nthis idea. StatefulWidgets are special widgets that know how to generate\nState objects, which are then used to hold state.\nConsider this basic example, using the ElevatedButton mentioned earlier:", "You might wonder why StatefulWidget and State are separate objects.\nIn Flutter, these two types of objects have different life cycles.\nWidgets are temporary objects, used to construct a presentation of\nthe application in its current state. State objects, on the other\nhand, are persistent between calls to\nbuild(), allowing them to remember information.", "The example above accepts user input and directly uses\nthe result in its build() method.  In more complex applications,\ndifferent parts of the widget hierarchy might be\nresponsible for different concerns; for example, one\nwidget might present a complex user interface\nwith the goal of gathering specific information,\nsuch as a date or location, while another widget might\nuse that information to change the overall presentation.", "In Flutter, change notifications flow \u201cup\u201d the widget\nhierarchy by way of callbacks, while current state flows\n\u201cdown\u201d to the stateless widgets that do presentation.\nThe common parent that redirects this flow is the State.\nThe following slightly more complex example shows how\nthis works in practice:", "Notice the creation of two new stateless widgets,\ncleanly separating the concerns of displaying the counter\n(CounterDisplay) and changing the counter (CounterIncrementor).\nAlthough the net result is the same as the previous example,\nthe separation of responsibility allows greater complexity to\nbe encapsulated in the individual widgets,\nwhile maintaining simplicity in the parent.", "For more information, check out:", "What follows is a more complete example that brings together\nthese concepts: A hypothetical shopping application displays various\nproducts offered for sale, and maintains a shopping cart for\nintended purchases. Start by defining the presentation class,\nShoppingListItem:", "The ShoppingListItem widget follows a common pattern\nfor stateless widgets.  It stores the values it receives\nin its constructor in final member variables,\nwhich it then uses during its build() function.\nFor example, the inCart boolean toggles between two visual\nappearances: one that uses the primary color from the current\ntheme, and another that uses gray.", "When the user taps the list item, the widget doesn\u2019t modify\nits inCart value directly. Instead, the widget calls the\nonCartChanged function it received from its parent widget.\nThis pattern lets you store state higher in the widget\nhierarchy, which causes the state to persist for longer periods of time.\nIn the extreme, the state stored on the widget passed to\nrunApp() persists for the lifetime of the\napplication.", "When the parent receives the onCartChanged callback,\nthe parent updates its internal state, which triggers\nthe parent to rebuild and create a new instance\nof ShoppingListItem with the new inCart value.\nAlthough the parent creates a new instance of\nShoppingListItem when it rebuilds, that operation is cheap\nbecause the framework compares the newly built widgets with the previously\nbuilt widgets and applies only the differences to the underlying\nRenderObject.", "Here\u2019s an example parent widget that stores mutable state:", "The ShoppingList class extends StatefulWidget,\nwhich means this widget stores mutable state.\nWhen the ShoppingList widget is first inserted\ninto the tree, the framework calls the createState() function\nto create a fresh instance of _ShoppingListState to associate with that\nlocation in the tree. (Notice that subclasses of\nState are typically named with leading underscores to\nindicate that they are private implementation details.)\nWhen this widget\u2019s parent rebuilds, the parent creates a new instance\nof ShoppingList, but the framework reuses the _ShoppingListState\ninstance that is already in the tree rather than calling\ncreateState again.", "To access properties of the current ShoppingList,\nthe _ShoppingListState can use its widget property.\nIf the parent rebuilds and creates a new ShoppingList,\nthe _ShoppingListState rebuilds with the new widget value.\nIf you wish to be notified when the widget property changes,\noverride the didUpdateWidget() function, which is passed\nan oldWidget to let you compare the old widget with\nthe current widget.", "When handling the onCartChanged callback, the _ShoppingListState\nmutates its internal state by either adding or removing a product from\n_shoppingCart. To signal to the framework that it changed its internal\nstate, it wraps those calls in a setState() call.\nCalling setState marks this widget as dirty and schedules it to be rebuilt\nthe next time your app needs to update the screen.\nIf you forget to call setState when modifying the internal\nstate of a widget, the framework won\u2019t know your widget is\ndirty and might not call the widget\u2019s build() function,\nwhich means the user interface might not update to reflect\nthe changed state.  By managing state in this way,\nyou don\u2019t need to write separate code for creating and\nupdating child widgets. Instead, you simply implement the build\nfunction, which handles both situations.", "After calling createState() on the StatefulWidget,\nthe framework inserts the new state object into the tree and\nthen calls initState() on the state object.\nA subclass of State can override initState to do work\nthat needs to happen just once. For example, override initState\nto configure animations or to subscribe to platform services.\nImplementations of initState are required to start\nby calling super.initState.", "When a state object is no longer needed,\nthe framework calls dispose() on the state object.\nOverride the dispose function to do cleanup work.\nFor example, override dispose to cancel timers or to\nunsubscribe from platform services. Implementations of\ndispose typically end by calling super.dispose.", "For more information, check out State.", "Use keys to control which widgets the framework matches up\nwith other widgets when a widget rebuilds. By default, the\nframework matches widgets in the current and previous build\naccording to their runtimeType and the order in which they appear.\nWith keys, the framework requires that the two widgets have\nthe same key as well as the same runtimeType.", "Keys are most useful in widgets that build many instances of\nthe same type of widget. For example, the ShoppingList widget,\nwhich builds just enough ShoppingListItem instances to\nfill its visible region:", "Without keys, the first entry in the current build\nwould always sync with the first entry in the previous build,\neven if, semantically, the first entry in the list just\nscrolled off screen and is no longer visible in the viewport.", "By assigning each entry in the list a \u201csemantic\u201d key,\nthe infinite list can be more efficient because the\nframework syncs entries with matching semantic keys\nand therefore similar (or identical) visual appearances.\nMoreover, syncing the entries semantically means that\nstate retained in stateful child widgets remains attached\nto the same semantic entry rather than the entry in the\nsame numerical position in the viewport.", "For more information, check out the Key API.", "Use global keys to uniquely identify child widgets.\nGlobal keys must be globally unique across the entire\nwidget hierarchy, unlike local keys which need\nonly be unique among siblings. Because they are\nglobally unique, a global key can be used to\nretrieve the state associated with a widget.", "For more information, check out the GlobalKey API.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui", "base_url": "https://docs.flutter.dev/"}, {"title": "Handling errors in Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter framework catches errors that occur during callbacks\ntriggered by the framework itself, including errors encountered\nduring the build, layout, and paint phases. Errors that don\u2019t occur\nwithin Flutter\u2019s callbacks can\u2019t be caught by the framework,\nbut you can handle them by setting up an error handler on the\nPlatformDispatcher.", "All errors caught by Flutter are routed to the\nFlutterError.onError handler. By default,\nthis calls FlutterError.presentError,\nwhich dumps the error to the device logs.\nWhen running from an IDE, the inspector overrides this\nbehavior so that errors can also be routed to the IDE\u2019s\nconsole, allowing you to inspect the\nobjects mentioned in the message.", "info Note:\n  Consider calling FlutterError.presentError\n  from your custom error handler in order to see\n  the logs in the console as well.", "When an error occurs during the build phase,\nthe ErrorWidget.builder callback is\ninvoked to build the widget that is used\ninstead of the one that failed. By default,\nin debug mode this shows an error message in red,\nand in release mode this shows a gray background.", "When errors occur without a Flutter callback on the call stack,\nthey are handled by the PlatformDispatcher\u2019s error callback. By default,\nthis only prints errors and does nothing else.", "You can customize these behaviors,\ntypically by setting them to values in\nyour void main() function.", "Below each error type handling is explained. At the bottom\nthere\u2019s a code snippet which handles all types of errors. Even\nthough you can just copy-paste the snippet, we recommend you\nto first get acquainted with each of the error types.", "For example, to make your application quit immediately any time an\nerror is caught by Flutter in release mode, you could use the\nfollowing handler:", "info Note:\n  The top-level kReleaseMode constant indicates\n  whether the app was compiled in release mode.", "This handler can also be used to report errors to a logging service.\nFor more details, see our cookbook chapter for\nreporting errors to a service.", "To define a customized error widget that displays whenever\nthe builder fails to build a widget, use MaterialApp.builder.", "Consider an onPressed callback that invokes an asynchronous function,\nsuch as MethodChannel.invokeMethod (or pretty much any plugin).\nFor example:", "If invokeMethod throws an error, it won\u2019t be forwarded to FlutterError.onError.\nInstead, it\u2019s forwarded to the PlatformDispatcher.", "To catch such an error, use PlatformDispatcher.instance.onError.", "Say you want to exit application on any exception and to display\na custom error widget whenever a widget building fails - you can base\nyour errors handling on next code snippet:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/errors", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter's build modes | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter tooling supports three modes when compiling your app,\nand a headless mode for testing.\nYou choose a compilation mode depending on where you are in\nthe development cycle. Are you debugging your code? Do you\nneed profiling information? Are you ready to deploy your app?", "A quick summary for when to use which mode is as follows:", "The rest of the page details these modes.", "In debug mode, the app is set up for debugging on the physical\ndevice, emulator, or simulator.", "Debug mode for mobile apps mean that:", "Debug mode for a web app means that:", "By default, flutter run compiles to debug mode.\nYour IDE supports this mode. Android Studio,\nfor example, provides a Run > Debug\u2026 menu option,\nas well as a green bug icon overlayed with a small triangle\non the project page.", "Use release mode for deploying the app, when you want maximum\noptimization and minimal footprint size. For mobile, release mode\n(which is not supported on the simulator or emulator), means that:", "Release mode for a web app means that:", "The command flutter run --release compiles to release mode.\nYour IDE supports this mode. Android Studio, for example,\nprovides a Run > Run\u2026 menu option, as well as a triangular\ngreen run button icon on the project page.\nYou can compile to release mode for a specific target\nwith flutter build <target>. For a list of supported targets,\nuse flutter help build.", "For more information, see the docs on releasing\niOS and Android apps.", "In profile mode, some debugging ability is maintained\u2014enough\nto profile your app\u2019s performance. Profile mode is disabled on\nthe emulator and simulator, because their behavior is not representative\nof real performance. On mobile, profile mode is similar to release mode,\nwith the following differences:", "Profile mode for a web app means that:", "Your IDE supports this mode. Android Studio, for example,\nprovides a Run > Profile\u2026 menu option.\nThe command flutter run --profile compiles to profile mode.", "info Note:\n  Use the DevTools suite to profile your app\u2019s performance.", "For more information on the build modes, see\nFlutter\u2019s build modes.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/build-modes", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release a web app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "During a typical development cycle,\nyou test an app using flutter run -d chrome\n(for example) at the command line.\nThis builds a debug version of your app.", "This page helps you prepare a release version\nof your app and covers the following topics:", "Build the app for deployment using the\nflutter build web command.\nYou can also choose which renderer to use\nby using the --web-renderer option (See Web renderers).\nThis generates the app, including the assets,\nand places the files into the /build/web\ndirectory of the project.", "The release build of a simple app has the\nfollowing structure:", "info Note:\n  The canvaskit directory and its contents are only present when the\n  CanvasKit renderer is selected\u2014not when the HTML renderer is selected.", "Launch a web server (for example,\npython -m http.server 8000,\nor by using the dhttpd package),\nand open the /build/web directory. Navigate to\nlocalhost:8000 in your browser\n(given the python SimpleHTTPServer example)\nto view the release version of your app.", "When you are ready to deploy your app,\nupload the release bundle\nto Firebase, the cloud, or a similar service.\nHere are a few possibilities, but there are\nmany others:", "You can use the Firebase CLI to build and release your Flutter app with Firebase\nHosting.", "To get started, install or update the Firebase CLI:", "Enable the web frameworks preview to the Firebase framework-aware CLI:", "In an empty directory or an existing Flutter project, run the initialization\ncommand:", "Answer yes when asked if you want to use a web framework.", "If you\u2019re in an empty directory,\n you\u2019ll be asked to choose your web framework. Choose Flutter Web.", "Choose your hosting source directory; this could be an existing flutter app.", "Select a region to host your files.", "Choose whether to set up automatic builds and deploys with GitHub.", "Deploy the app to Firebase Hosting:", "Running this command automatically runs flutter build web --release,\n so you don\u2019t have to build your app in a separate step.", "To learn more, visit the official Firebase Hosting documentation for\nFlutter on the web.", "The web supports the standard Image widget to display images.\nBy design, web browsers run untrusted code without harming the host computer.\nThis limits what you can do with images compared to mobile and desktop platforms.", "For more information, see Displaying images on the web.", "By default, the flutter build and flutter run commands\nuse the auto choice for the web renderer. This means that\nyour app runs with the HTML renderer on mobile browsers and\nCanvasKit on desktop browsers. We recommend this combination\nto optimize for the characteristics of each platform.", "For more information, see Web renderers.", "Minification is handled for you when you\ncreate a release build.", "Added in Flutter 3.10\nYou can embed a Flutter web app into\nany HTML element of your web page, with flutter.js and the hostElement\nengine initialization parameter.", "To tell Flutter web in which element to render, use the hostElement parameter of the initializeEngine\nfunction:", "To learn more, check out Customizing web app initialization.", "You can embed a Flutter web app,\nas you would embed other content,\nin an iframe tag of an HTML file.\nIn the following example, replace \u201cURL\u201d\nwith the location of your HTML page:", "As of release 1.20, the Flutter template for web apps includes support\nfor the core features needed for an installable, offline-capable PWA app.\nFlutter-based PWAs can be installed in the same way as any other web-based\nPWA; the settings signaling that your Flutter app is a PWA are provided by\nmanifest.json, which is produced by flutter create in the web directory.", "PWA support remains a work in progress,\nso please give us feedback if you see something that doesn\u2019t look right.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/web", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Memory view | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The memory view provides insights into details\nof the application\u2019s memory allocation and\ntools to detect and debug specific issues.", "info Note:\n  This page is up to date for DevTools 2.23.0.", "For information on how to locate DevTools screens in different IDEs,\ncheck out the DevTools overview.", "To better understand the insights found on this page,\nthe first section explains how Dart manages memory.\nIf you already understand Dart\u2019s memory management,\nyou can skip to the Memory view guide.", "Use the memory view for preemptive memory optimization or when\nyour application experiences one of the following conditions:", "Dart objects created using a class constructor\n(for example, by using MyClass()) live in a\nportion of memory called the heap. The memory\nin the heap is managed by the Dart VM (virtual machine).\nThe Dart VM allocates memory for the object at the moment of the object creation,\nand releases (or deallocates) the memory when the object\nis no longer used (see Dart garbage collection).", "Every Dart application creates a root object that references,\ndirectly or indirectly, all other objects the application allocates.", "If, at some moment of the application run,\nthe root object stops referencing an allocated object,\nthe object becomes unreachable,\nwhich is a signal for the garbage collector (GC)\nto deallocate the object\u2019s memory.", "The sequence of references from root to an object\nis called the object\u2019s retaining path,\nas it retains the object\u2019s memory from the garbage collection.\nOne object can have many retaining paths.\nObjects with at least one retaining path are\ncalled reachable objects.", "The following example illustrates the concepts:", "Shallow size includes only the size of the object\nand its references, while retained size also includes\nthe size of the retained objects.", "The retained size of the root object includes\nall reachable Dart objects.", "In the following example, the size of myHugeInstance\nisn\u2019t part of the parent\u2019s or child\u2019s shallow sizes,\nbut is part of their retained sizes:", "In DevTools calculations, if an object has more\nthan one retaining path, its size is assigned as\nretained only to the members of the shortest retaining path.", "In this example the object x has two retaining paths:", "Only members of the shortest path (d and e) will include\nx into their retaining size.", "Garbage collector cannot prevent all types of memory leaks, and developers\nstill need to watch objects to have leak-free lifecycle.", "While the garbage collector takes care of all\nunreachable objects, it\u2019s the responsibility\nof the application to ensure that unneeded objects\nare no longer reachable (referenced from the root).", "So, if non needed objects are left referenced\n(in a global or static variable,\nor as a field of a long-living object),\nthe garbage collector can\u2019t recognize them,\nthe memory allocation grows progressively,\nand the app eventually crashes with an out-of-memory error.", "One hard-to-catch leak pattern relates to using closures.\nIn the following code, a reference to the\ndesigned-to-be short-living myHugeObject is implicitly\nstored in the closure context and passed to setHandler.\nAs a result, myHugeObject won\u2019t be garbage collected\nas long as handler is reachable.", "An example of a large, short-living object that\nmight squeeze into a long-living area and thus cause leaks,\nis the context parameter passed to Flutter\u2019s\nbuild method.", "The following code is leak prone,\nas useHandler might store the handler\nin a long-living area:", "The following code is not leak prone,\nbecause:", "In general, use the following rule for a\nBuildContext: if the closure doesn\u2019t outlive\nthe widget, it\u2019s ok to pass the context to the closure.", "Stateful widgets require extra attention.\nThey consist of two classes: the widget and the\nwidget state,\nwhere the widget is short living,\nand the state is long living. The build context,\nowned by the widget, should never be referenced\nfrom the state\u2019s fields, as the state won\u2019t be garbage\ncollected together with the widget, and can significantly outlive it.", "In a memory leak, an application progressively uses memory,\nfor example, by repeatedly creating a listener,\nbut not disposing it.", "Memory bloat uses more memory than is necessary for\noptimal performance, for example, by using overly large\nimages or keeping streams open through their lifetime.", "Both leaks and bloats, when large,\ncause an application to crash with an out-of-memory error.\nHowever, leaks are more likely to cause memory issues,\nbecause even a small leak,\nif repeated many times, leads to a crash.", "The DevTools memory view helps you investigate\nmemory allocations (both in the heap and external),\nmemory leaks, memory bloat, and more. The view\nhas the following features:", "The expandable chart provides the following features:", "A timeseries graph visualizes the state of\nFlutter memory at successive intervals of time.\nEach data point on the chart corresponds to the\ntimestamp (x-axis) of measured quantities (y-axis)\nof the heap. For example, usage, capacity, external,\ngarbage collection, and resident set size are captured.", "The memory overview chart is a timeseries graph\nof collected memory statistics. It visually presents\nthe state of the Dart or Flutter heap and Dart\u2019s\nor Flutter\u2019s native memory over time.", "The chart\u2019s x-axis is a timeline of events (timeseries).\nThe data plotted in the y-axis all has a timestamp of\nwhen the data was collected. In other words,\nit shows the polled state (capacity, used, external,\nRSS (resident set size), and GC (garbage collection))\nof the memory every 500 ms. This helps provide a live\nappearance on the state of the memory as the application is running.", "Clicking the Legend button displays the\ncollected measurements, symbols, and colors\nused to display the data.", "The Memory Size Scale y-axis automatically\nadjusts to the range of data collected in the\ncurrent visible chart range.", "The quantities plotted on the y-axis are as follows:", "Use the Profile Memory tab to see current memory\nallocation by class and memory type. For a\ndeeper analysis in Google Sheets or other tools,\ndownload the data in CSV format.\nToggle Refresh on GC, to see allocation in real time.", "Use the Diff Snapshots tab to investigate a feature\u2019s\nmemory management. Follow the guidance on the tab\nto take snapshots before and after interaction\nwith the application, and diff the snapshots:", "Tap the Filter classes and packages button,\nto narrow the data:", "For a deeper analysis in Google Sheets\nor other tools, download the data in CSV format.", "Use the Trace Instances tab to investigate what methods\nallocate memory for a set of classes during feature execution:", "Switch between bottom-up and call tree views\ndepending on specifics of your tasks.", "The call tree view shows the method allocations\nfor each instance. The view is a top-down representation\nof the call stack, meaning that a method can be expanded\nto show its callees.", "The bottom-up view shows the list of different\ncall stacks that have allocated the instances.", "For more information, check out the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/memory", "base_url": "https://docs.flutter.dev/"}, {"title": "Adding a splash screen to your Android app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Splash screens (also known as launch screens) provide \na simple initial experience while your Android app loads. \nThey set the stage for your application, \nwhile allowing time for the app engine \nto load and your app to initialize.", "report_problem Warning:\n  If you are experiencing a crash from implementing a splash screen, you\n  might need to migrate your code. See detailed instructions in the\n  Deprecated Splash Screen API Migration guide.", "In Android, there are two separate screens that you can control:\na launch screen shown while your Android app initializes,\nand a splash screen that displays while the Flutter experience\ninitializes.", "info Note:\n  As of Flutter 2.5, the launch and splash screens have been\n  consolidated\u2014Flutter now only implements the Android launch screen,\n  which is displayed until the framework draws the first frame.\n  This launch screen can act as both an Android launch screen and an\n  Android splash screen via customization, and thus, is referred to\n  as both terms. For example of such customization, check out the\n  Android splash screen sample app.", "If, prior to 2.5, you used flutter create to create an app,\n  and you run the app on 2.5 or later, the app might crash.\n  For more info, see the Deprecated Splash Screen API Migration guide.", "info Note:\n  For apps that embed one or more Flutter screens within an\n  existing Android app, consider\n  pre-warming a FlutterEngine and reusing the\n  same engine throughout your app to minimize wait\n  time associated with initialization of the Flutter engine.", "Every Android app requires initialization time while the\noperating system sets up the app\u2019s process.\nAndroid provides the concept of a launch screen to\ndisplay a Drawable while the app is initializing.", "The default Flutter project template includes a definition\nof a launch theme and a launch background. You can customize\nthis by editing styles.xml, where you can define a theme\nwhose windowBackground is set to the\nDrawable that should be displayed as the launch screen.", "In addition, styles.xml defines a normal theme\nto be applied to FlutterActivity after the launch\nscreen is gone. The normal theme background only shows\nfor a very brief moment after the splash screen disappears,\nand during orientation change and Activity restoration.\nTherefore, it\u2019s recommended that the normal theme use a\nsolid background color that looks similar to the primary\nbackground color of the Flutter UI.", "In AndroidManifest.xml, set the theme of\nFlutterActivity to the launch theme. Then,\nadd a metadata element to the desired FlutterActivity\nto instruct Flutter to switch from the launch theme\nto the normal theme at the appropriate time.", "The Android app now displays the desired launch screen\nwhile the app initializes.", "To configure your launch screen on Android 12,\ncheck out Android Splash Screens.", "As of Android 12, you must use the new splash screen\nAPI in your styles.xml file.\nConsider creating an alternate resource file for Android 12 and higher.\nAlso make sure that your background image is in line with\nthe icon guidelines;\ncheck out Android Splash Screens for more details.", "Make sure that\nio.flutter.embedding.android.SplashScreenDrawable is\nnot set in your manifest, and that provideSplashScreen\nis not implemented, as these APIs are deprecated.\nDoing so causes the Android launch screen to fade smoothly\ninto the Flutter when the\napp is launched and the app might crash.", "Some apps might want to continue showing the last frame of\nthe Android launch screen in Flutter. For example,\nthis preserves the illusion of a single frame\nwhile additional loading continues in Dart.\nTo achieve this, the following\nAndroid APIs might be helpful:", "Then, you can reimplement the first frame in Flutter\nthat shows elements of your Android launch screen in\nthe same positions on screen.\nFor an example of this, check out the\nAndroid splash screen sample app.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android/splash-screen", "base_url": "https://docs.flutter.dev/"}, {"title": "Navigation and routing | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter provides a complete system for navigating between screens and handling\ndeep links. Small applications without complex deep linking can use\nNavigator, while apps with specific deep linking and navigation\nrequirements should also use the Router to correctly handle deep links on\nAndroid and iOS, and to stay in sync with the address bar when the app is\nrunning on the web.", "To configure your Android or iOS application to handle deep links, see \nDeep linking.", "The Navigator widget displays screens as a stack using the correct transition\nanimations for the target platform. To navigate to a new screen, access the\nNavigator through the route\u2019s BuildContext and call imperative methods such\nas push() or pop():", "Because Navigator keeps a stack of Route objects (representing the history\nstack), The push() method also takes a Route object. The MaterialPageRoute\nobject is a subclass of Route that specifies the transition animations for\nMaterial Design. For more examples of how to use the Navigator, follow the\nnavigation recipes from the Flutter Cookbook or visit the Navigator API\ndocumentation.", "info Note:\n  We don\u2019t recommend using named routes for most applications.\n  For more information, see the Limitations section below.", "Applications with simple navigation and deep linking requirements can use the\nNavigator for navigation and the MaterialApp.routes parameter for deep\nlinks:", "Routes specified here are called named routes. For a complete example, follow\nthe Navigate with named routes recipe from the Flutter Cookbook.", "Although named routes can handle deep links, the behavior is always the same and\ncan\u2019t be customized. When a new deep link is received by the platform, Flutter\npushes a new Route onto the Navigator regardless where the user currently is.", "Flutter also doesn\u2019t support the browser forward button for applications using\nnamed routes. For these reasons, we don\u2019t recommend using named routes in most\napplications.", "Flutter applications with advanced navigation and routing requirements (such as\na web app that uses direct links to each screen, or an app with multiple\nNavigator widgets) should use a routing package such as go_router that can\nparse the route path and configure the Navigator whenever the app receives a\nnew deep link.", "To use the Router, switch to the router constructor on MaterialApp or\nCupertinoApp and provide it with a Router configuration. Routing packages,\nsuch as go_router, typically provide a\nconfiguration for you. For example:", "Because packages like go_router are declarative, they will always display the\nsame screen(s) when a deep link is received.", "Note for advanced developers:  If you prefer not to use a routing package\n  and would like full control over navigation and routing in your app, override\n  RouteInformationParser and RouterDelegate. When the state in your app\n  changes, you can precisely control the stack of screens by providing a list of\n  Page objects using the Navigator.pages parameter. For more details, see the\n  Router API documentation.", "The Router and Navigator are designed to work together. You can navigate\nusing the Router API through a declarative routing package, such as\ngo_router, or by calling imperative methods such as push() and pop() on\nthe Navigator.", "When you navigate using the Router or a declarative routing package, each\nroute on the Navigator is page-backed, meaning it was created from a\nPage using the pages\nargument on the Navigator constructor. Conversely, any Route\ncreated by calling Navigator.push or showDialog will add a pageless\nroute to the Navigator. If you are using a routing package, Routes that are\npage-backed are always deep-linkable, whereas pageless routes\nare not.", "When a page-backed Route is removed from the Navigator, all of the\npageless routes after it are also removed. For example, if a deep link\nnavigates by removing a page-backed route from the Navigator, all pageless\n_routes after (up until the next _page-backed route) are removed too.", "info Note:\n  You can\u2019t prevent navigation from page-backed screens using WillPopScope.\n  Instead, you should consult your routing package\u2019s API documentation.", "Apps using the Router class integrate with the browser History API to provide\na consistent experience when using the browser\u2019s back and forward buttons.\nWhenever you navigate using the Router, a History API entry is added to the\nbrowser\u2019s history stack. Pressing the back button uses reverse\nchronological navigation, meaning that the user is taken to the previously\nvisited location that was shown using the Router. This means that if the user\npops a page from the Navigator and then presses the browser back button\nthe previous page is pushed back onto the stack.", "For more information on navigation and routing, check out the following\nresources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/navigation", "base_url": "https://docs.flutter.dev/"}, {"title": "Add interactivity to your Flutter app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "How do you modify your app to make it react to user input?\nIn this tutorial, you\u2019ll add interactivity to an app that\ncontains only non-interactive widgets.\nSpecifically, you\u2019ll modify an icon to make it tappable\nby creating a custom stateful widget that manages two\nstateless widgets.", "The building layouts tutorial showed you how to create\nthe layout for the following screenshot.", "When the app first launches, the star is solid red,\nindicating that this lake has previously been favorited.\nThe number next to the star indicates that 41\npeople have favorited this lake. After completing this tutorial,\ntapping the star removes its favorited status,\nreplacing the solid star with an outline and\ndecreasing the count. Tapping again favorites the lake,\ndrawing a solid star and increasing the count.", "To accomplish this, you\u2019ll create a single custom widget\nthat includes both the star and the count,\nwhich are themselves widgets. Tapping the star changes state\nfor both widgets, so the same widget should manage both.", "You can get right to touching the code in\nStep 2: Subclass StatefulWidget.\nIf you want to try different ways of managing state,\nskip to Managing state.", "A widget is either stateful or stateless. If a widget can\nchange\u2014when a user interacts with it,\nfor example\u2014it\u2019s stateful.", "A stateless widget never changes.\nIcon, IconButton, and Text are\nexamples of stateless widgets. Stateless widgets\nsubclass StatelessWidget.", "A stateful widget is dynamic: for example,\nit can change its appearance in response to events\ntriggered by user interactions or when it receives data.\nCheckbox, Radio, Slider,\nInkWell, Form, and TextField\nare examples of stateful widgets. Stateful widgets\nsubclass StatefulWidget.", "A widget\u2019s state is stored in a State object,\nseparating the widget\u2019s state from its appearance.\nThe state consists of values that can change, like a\nslider\u2019s current value or whether a checkbox is checked.\nWhen the widget\u2019s state changes,\nthe state object calls setState(),\ntelling the framework to redraw the widget.", "In this section, you\u2019ll create a custom stateful widget.\nYou\u2019ll replace two stateless widgets\u2014the solid red\nstar and the numeric count next to it\u2014with a single\ncustom stateful widget that manages a row with two\nchildren widgets: an IconButton and Text.", "Implementing a custom stateful widget requires creating two classes:", "This section shows you how to build a stateful widget,\ncalled FavoriteWidget, for the lakes app.\nAfter setting up, your first step is choosing how state is\nmanaged for FavoriteWidget.", "If you\u2019ve already built the app in the\nbuilding layouts tutorial (step 6),\nskip to the next section.", "Once you have a connected and enabled device,\nor you\u2019ve launched the iOS simulator\n(part of the Flutter install) or the\nAndroid emulator (part of the Android Studio\ninstall), you are good to go!", "A widget\u2019s state can be managed in several ways,\nbut in our example the widget itself,\nFavoriteWidget, will manage its own state.\nIn this example, toggling the star is an isolated\naction that doesn\u2019t affect the parent widget or the rest of\nthe UI, so the widget can handle its state internally.", "Learn more about the separation of widget and state,\nand how state might be managed, in Managing state.", "The FavoriteWidget class manages its own state,\nso it overrides createState() to create a State\nobject. The framework calls createState()\nwhen it wants to build the widget.\nIn this example, createState() returns an\ninstance of _FavoriteWidgetState,\nwhich you\u2019ll implement in the next step.", "info Note:\n  Members or classes that start with an underscore\n  (_) are private. For more information,\n  see Libraries and imports, a section in the\n  Dart language documentation.", "The _FavoriteWidgetState class stores the mutable data\nthat can change over the lifetime of the widget.\nWhen the app first launches, the UI displays a solid\nred star, indicating that the lake has \u201cfavorite\u201d status,\nalong with 41 likes. These values are stored in the\n_isFavorited and _favoriteCount fields:", "The class also defines a build() method,\nwhich creates a row containing a red IconButton,\nand Text.  You use IconButton (instead of Icon)\nbecause it has an onPressed property that defines\nthe callback function (_toggleFavorite) for handling a tap.\nYou\u2019ll define the callback function next.", "tips_and_updates Tip:\n  Placing the Text in a SizedBox and setting its\n  width prevents a discernible \u201cjump\u201d when the text changes\n  between the values of 40 and 41 \u2014 a jump would\n  otherwise occur because those values have different widths.", "The _toggleFavorite() method, which is called when the\nIconButton is pressed, calls setState().\nCalling setState() is critical, because this\ntells the framework that the widget\u2019s state has\nchanged and that the widget should be redrawn.\nThe function argument to setState() toggles the\nUI between these two states:", "Add your custom stateful widget to the widget tree in\nthe app\u2019s build() method. First, locate the code that\ncreates the Icon and Text, and delete it.\nIn the same location, create the stateful widget:", "That\u2019s it! When you hot reload the app,\nthe star icon should now respond to taps.", "If you can\u2019t get your code to run, look in your\nIDE for possible errors.  Debugging Flutter apps might help.\nIf you still can\u2019t find the problem,\ncheck your code against the interactive lakes example on GitHub.", "If you still have questions, refer to any one of the developer\ncommunity channels.", "The rest of this page covers several ways a widget\u2019s state can\nbe managed, and lists other available interactive widgets.", "Who manages the stateful widget\u2019s state? The widget itself?\nThe parent widget?  Both? Another object?\nThe answer is\u2026 it depends. There are several valid ways\nto make your widget interactive. You, as the widget designer,\nmake the decision based on how you expect your widget to be used.\nHere are the most common ways to manage state:", "How do you decide which approach to use?\nThe following principles should help you decide:", "If the state in question is user data,\nfor example the checked or unchecked\nmode of a checkbox, or the position of a slider,\nthen the state is best managed by the parent widget.", "If the state in question is aesthetic,\nfor example an animation, then the\nstate is best managed by the widget itself.", "If in doubt, start by managing state in the parent widget.", "We\u2019ll give examples of the different ways of managing state\nby creating three simple examples: TapboxA, TapboxB,\nand TapboxC. The examples all work similarly\u2014each\ncreates a container that, when tapped, toggles between a\ngreen or grey box. The _active boolean determines the\ncolor: green for active or grey for inactive.", "These examples use GestureDetector to capture activity\non the Container.", "Sometimes it makes the most sense for the widget\nto manage its state internally. For example,\nListView automatically scrolls when its\ncontent exceeds the render box. Most developers\nusing ListView don\u2019t want to manage ListView\u2019s\nscrolling behavior, so ListView itself manages its scroll offset.", "Often it makes the most sense for the parent widget\nto manage the state and tell its child widget when to update.\nFor example, IconButton allows you to treat\nan icon as a tappable button. IconButton is a\nstateless widget because we decided that the parent\nwidget needs to know whether the button has been tapped,\nso it can take appropriate action.", "In the following example, TapboxB exports its state\nto its parent through a callback. Because TapboxB\ndoesn\u2019t manage any state, it subclasses StatelessWidget.", "For some widgets, a mix-and-match approach makes\nthe most sense. In this scenario, the stateful widget\nmanages some of the state, and the parent widget\nmanages other aspects of the state.", "In the TapboxC example, on tap down,\na dark green border appears around the box. On tap up,\nthe border disappears and the box\u2019s color changes. TapboxC\nexports its _active state to its parent but manages its\n_highlight state internally. This example has two State\nobjects, _ParentWidgetState and _TapboxCState.", "An alternate implementation might have exported the highlight\nstate to the parent while keeping the active state internal,\nbut if you asked someone to use that tap box,\nthey\u2019d probably complain that it doesn\u2019t make much sense.\nThe developer cares whether the box is active.\nThe developer probably doesn\u2019t care how the highlighting\nis managed, and prefers that the tap box handles those\ndetails.", "Flutter offers a variety of buttons and similar interactive widgets.\nMost of these widgets implement the Material Design guidelines,\nwhich define a set of components with an opinionated UI.", "If you prefer, you can use GestureDetector to build\ninteractivity into any custom widget.\nYou can find examples of GestureDetector in\nManaging state. Learn more about the GestureDetector\nin Handle taps, a recipe in the Flutter cookbook.", "tips_and_updates Tip:\n  Flutter also provides a set of iOS-style widgets called\n  Cupertino.", "When you need interactivity, it\u2019s easiest to use one of\nthe prefabricated widgets. Here\u2019s a partial list:", "The following resources might help when adding interactivity\nto your app.", "Gestures, a section in the Flutter cookbook.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/interactivity", "base_url": "https://docs.flutter.dev/"}, {"title": "Performance best practices | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  To learn how to use the Performance View\n  (part of Flutter DevTools)\n  for debugging performance issues,\n  see Using the Performance view.", "Generally, Flutter applications are performant by default,\nso you only need to avoid common pitfalls to get excellent\nperformance. These best practice recommendations will help you\nwrite the most performant Flutter app possible.", "info Note:\n  If you are writing web apps in Flutter, you might be interested\n  in a series of articles, written by the Flutter Material team,\n  after they modified the Flutter Gallery app to make it more\n  performant on the web:", "How do you design a Flutter app to most efficiently\nrender your scenes? In particular, how do you ensure\nthat the painting code generated by the\nframework is as efficient as possible?\nSome rendering and layout operations are known\nto be slow, but can\u2019t always be avoided.\nThey should be used thoughtfully,\nfollowing the guidance below.", "Some operations are more expensive than others,\nmeaning that they consume more resources.\nObviously, you want to only use these operations\nwhen necessary. How you design and implement your\napp\u2019s UI can have a big impact on how efficiently it runs.", "Here are some things to keep in mind when designing your UI:", "For more information, check out:", "Some Flutter code uses saveLayer(), an expensive operation,\nto implement various visual effects in the UI.\nEven if your code doesn\u2019t explicitly call saveLayer(),\nother widgets or packages that you use might call it behind the scenes.\nPerhaps your app is calling saveLayer() more than necessary;\nexcessive calls to saveLayer() can cause jank.", "Calling saveLayer() allocates an offscreen buffer\nand drawing content into the offscreen buffer might\ntrigger a render target switch.\nThe GPU wants to run like a firehose,\nand a render target switch forces the GPU\nto redirect that stream temporarily and then\ndirect it back again. On mobile GPUs this is\nparticularly disruptive to rendering throughput.", "At runtime, if you need to dynamically display various shapes\ncoming from a server (for example), each with some transparency,\nthat might (or might not) overlap,\nthen you pretty much have to use saveLayer().", "How can you tell how often your app calls saveLayer(),\neither directly or indirectly?\nThe saveLayer() method triggers\nan event on the DevTools timeline; learn when\nyour scene uses saveLayer by checking the\nPerformanceOverlayLayer.checkerboardOffscreenLayers\nswitch in the DevTools Performance view.", "Can you avoid calls to saveLayer?\nIt might require rethinking of how you\ncreate your visual effects:", "Note to package owners:\n  As a best practice, consider providing documentation\n  for when saveLayer might be necessary for your package,\n  how it might be avoided, and when it can\u2019t be avoided.", "Other widgets that might trigger saveLayer()\nand are potentially costly:", "Opacity is another expensive operation, as is clipping.\nHere are some tips you might find to be useful:", "How your grids and lists are implemented\nmight be causing performance problems for your app.\nThis section describes an important best\npractice when creating grids and lists,\nand how to determine whether your app uses\nexcessive layout passes.", "When building a large grid or list,\nuse the lazy builder methods, with callbacks.\nThat ensures that only the visible portion of the\nscreen is built at startup time.", "For more information and examples, check out:", "For information on how intrinsic passes might be causing\nproblems with your grids and lists, see the next section.", "If you\u2019ve done much Flutter programming, you are\nprobably familiar with how layout and constraints work\nwhen creating your UI. You might even have memorized Flutter\u2019s\nbasic layout rule: Constraints go down. Sizes go up.\nParent sets position.", "For some widgets, particularly grids and lists,\nthe layout process can be expensive.\nFlutter strives to perform just one layout pass\nover the widgets but, sometimes,\na second pass (called an intrinsic pass) is needed,\nand that can slow performance.", "An intrinsic pass happens when, for example,\nyou want all cells to have the size\nof the biggest or smallest cell (or some\nsimilar calculation that requires polling all cells).", "For example, consider a large grid of Cards.\nA grid should have uniformly sized cells,\nso the layout code performs a pass,\nstarting from the root of the grid (in the widget tree),\nasking each card in the grid (not just the\nvisible cards) to return\nits intrinsic size\u2014the size\nthat the widget prefers, assuming no constraints.\nWith this information,\nthe framework determines a uniform cell size,\nand re-visits all grid cells a second time,\ntelling each card what size to use.", "To determine whether you have excessive intrinsic passes,\nenable the Track layouts option\nin DevTools (disabled by default),\nand look at the app\u2019s stack trace\nto learn how many layout passes were performed.\nOnce you enable tracking, intrinsic timeline events\nare labeled as \u2018$runtimeType intrinsics\u2019.", "You have a couple options for avoiding the intrinsic pass:", "To dive even deeper into how layout works,\ncheck out the layout and rendering\nsection in the Flutter architectural overview.", "Since there are two separate threads for building\nand rendering, you have 16ms for building,\nand 16ms for rendering on a 60Hz display.\nIf latency is a concern,\nbuild and display a frame in 16ms or less.\nNote that means built in 8ms or less,\nand rendered in 8ms or less,\nfor a total of 16ms or less.", "If your frames are rendering in well under\n16ms total in profile mode,\nyou likely don\u2019t have to worry about performance\neven if some performance pitfalls apply,\nbut you should still aim to build and\nrender a frame as fast as possible. Why?", "If you are wondering why 60fps leads to a smooth visual experience,\ncheck out the video Why 60fps?", "If you need to tune your app\u2019s performance,\nor perhaps the UI isn\u2019t as smooth as you expect,\nthe DevTools Performance view can help!", "Also, the Flutter plugin for your IDE might\nbe useful. In the Flutter Performance window,\nenable the Show widget rebuild information check box.\nThis feature helps you detect when frames are\nbeing rendered and displayed in more than 16ms.\nWhere possible,\nthe plugin provides a link to a relevant tip.", "The following behaviors might negatively impact\nyour app\u2019s performance.", "Avoid using the Opacity widget,\nand particularly avoid it in an animation.\nUse AnimatedOpacity or FadeInImage instead.\nFor more information, check out\nPerformance considerations for opacity animation.", "When using an AnimatedBuilder,\navoid putting a subtree in the builder\nfunction that builds widgets that don\u2019t\ndepend on the animation. This subtree is\nrebuilt for every tick of the animation.\nInstead, build that part of the subtree\nonce and pass it as a child to\nthe AnimatedBuilder. For more information,\ncheck out Performance optimizations.", "Avoid clipping in an animation.\nIf possible, pre-clip the image before animating it.", "Avoid using constructors with a concrete List\nof children (such as Column() or ListView())\nif most of the children are not visible\non screen to avoid the build cost.", "Avoid overriding operator == on Widget objects.\nWhile it might seem like it would help by avoiding unnecessary rebuilds,\nin practice it hurts performance because it results in O(N\u00b2) behavior.\nThe only exception to this rule is leaf widgets (widgets with no children),\nin the specific case where comparing the properties of the widget\nis likely to be significantly more efficient than rebuilding the widget\nand where the widget will rarely change configuration.\nEven in such cases,\nit is generally preferable to rely on caching the widgets,\nbecause even one override of operator ==\ncan result in across-the-board performance degradation\nas the compiler can no longer assume that the call is always static.", "For more performance info, check out the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/best-practices", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Debug console | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The DevTools Debug console allows you to watch an\napplication\u2019s standard output (stdout),\nevaluate expressions for a paused or running\napp in debug mode, and analyze inbound and outbound\nreferences for objects.", "info Note:\n  This page is up to date for DevTools 2.23.0.", "The Debug console is available from the Inspector,\nDebugger, and Memory views.", "The console shows the application\u2019s standard output (stdout):", "If you click a widget on the Inspector screen,\nthe variable for this widget displays in the Console:", "In the console, you can evaluate expressions for a paused\nor running application, assuming that you are running\nyour app in debug mode:", "To assign an evaluated object to a variable,\nuse $0, $1 (through $5) in the form of var x = $0:", "To drop a variable to the console from a heap snapshot,\ndo the following:", "The Console screen displays both live and static\ninbound and outbound references, as well as field values:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/console", "base_url": "https://docs.flutter.dev/"}, {"title": "Layouts in Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The core of Flutter\u2019s layout mechanism is widgets.\nIn Flutter, almost everything is a widget\u2014even\nlayout models are widgets. The images, icons,\nand text that you see in a Flutter app are all widgets.\nBut things you don\u2019t see are also widgets,\nsuch as the rows, columns, and grids that arrange,\nconstrain, and align the visible widgets.", "You create a layout by composing widgets to build more complex widgets.\nFor example, the first screenshot below shows 3 icons with a label\nunder each one:", "The second screenshot displays the visual layout, showing a row of\n3 columns where each column contains an icon and a label.", "info Note:\n  Most of the screenshots in this tutorial are displayed with\n  debugPaintSizeEnabled set to true so you can see the visual layout.\n  For more information, see\n  Debugging layout issues visually, a section in\n  Using the Flutter inspector.", "Here\u2019s a diagram of the widget tree for this UI:", "Most of this should look as you might expect, but you might be wondering\nabout the containers (shown in pink). Container is a widget class\nthat allows you to customize its child widget. Use a Container when\nyou want to add padding, margins, borders, or background color,\nto name some of its capabilities.", "In this example, each Text widget is placed in a Container\nto add margins. The entire Row is also placed in a\nContainer to add padding around the row.", "The rest of the UI in this example is controlled by properties.\nSet an Icon\u2019s color using its color property.\nUse the Text.style property to set the font, its color, weight, and so on.\nColumns and rows have properties that allow you to specify how their\nchildren are aligned vertically or horizontally, and how much space\nthe children should occupy.", "How do you lay out a single widget in Flutter? This section\nshows you how to create and display a simple widget.\nIt also shows the entire code for a simple Hello World app.", "In Flutter, it takes only a few steps to put text, an icon,\nor an image on the screen.", "Choose from a variety of layout widgets based\non how you want to align or constrain the visible widget,\nas these characteristics are typically passed on to the\ncontained widget.", "This example uses Center which centers its content\nhorizontally and vertically.", "For example, create a Text widget:", "Create an Image widget:", "Create an Icon widget:", "All layout widgets have either of the following:", "Add the Text widget to the Center widget:", "A Flutter app is itself a widget, and most widgets have a build()\nmethod. Instantiating and returning a widget in the app\u2019s build() method\ndisplays the widget.", "For a Material app, you can use a Scaffold widget;\nit provides a default banner, background color,\nand has API for adding drawers, snack bars, and bottom sheets.\nThen you can add the Center widget directly to the body\nproperty for the home page.", "info Note:\n  The Material library implements widgets that follow Material\n  Design principles. When designing your UI, you can exclusively use\n  widgets from the standard widgets library, or you can use\n  widgets from the Material library. You can mix widgets from both\n  libraries, you can customize existing widgets,\n  or you can build your own set of custom widgets.", "For a non-Material app, you can add the Center widget to the app\u2019s\nbuild() method:", "By default a non-Material app doesn\u2019t include an AppBar, title,\nor background color. If you want these features in a non-Material app,\nyou have to build them yourself. This app changes the background\ncolor to white and the text to dark grey to mimic a Material app.", "That\u2019s it! When you run the app, you should see Hello World.", "One of the most common layout patterns is to arrange\nwidgets vertically or horizontally. You can use a\nRow widget to arrange widgets horizontally,\nand a Column widget to arrange widgets vertically.", "To create a row or column in Flutter, you add a list of children\nwidgets to a Row or Column widget. In turn,\neach child can itself be a row or column, and so on.\nThe following example shows how it is possible to nest rows or\ncolumns inside of rows or columns.", "This layout is organized as a Row. The row contains two children:\na column on the left, and an image on the right:", "The left column\u2019s widget tree nests rows and columns.", "You\u2019ll implement some of Pavlova\u2019s layout code in\nNesting rows and columns.", "info Note:\nRow and Column are basic primitive widgets for horizontal\n  and vertical layouts\u2014these low-level widgets allow for maximum\n  customization. Flutter also offers specialized, higher level widgets\n  that might be sufficient for your needs. For example,\n  instead of Row you might prefer ListTile,\n  an easy-to-use widget with properties for leading and trailing icons,\n  and up to 3 lines of text.  Instead of Column, you might prefer\n  ListView, a column-like layout that automatically scrolls\n  if its content is too long to fit the available space.\n  For more information, see Common layout widgets.", "You control how a row or column aligns its children using the\nmainAxisAlignment and crossAxisAlignment properties.\nFor a row, the main axis runs horizontally and the cross axis runs\nvertically. For a column, the main axis runs vertically and the cross\naxis runs horizontally.", "The MainAxisAlignment and CrossAxisAlignment\nenums offer a variety of constants for controlling alignment.", "info Note:\n  When you add images to your project,\n  you need to update the pubspec.yaml file to access\n  them\u2014this example uses Image.asset to display\n  the images.  For more information, see this example\u2019s\n  pubspec.yaml file or Adding assets and images.\n  You don\u2019t need to do this if you\u2019re referencing online\n  images using Image.network.", "In the following example, each of the 3 images is 100 pixels wide.\nThe render box (in this case, the entire screen)\nis more than 300 pixels wide, so setting the main axis\nalignment to spaceEvenly divides the free horizontal\nspace evenly between, before, and after each image.", "Columns work the same way as rows. The following example shows a column\nof 3 images, each is 100 pixels high. The height of the render box\n(in this case, the entire screen) is more than 300 pixels, so\nsetting the main axis alignment to spaceEvenly divides the free vertical\nspace evenly between, above, and below each image.", "When a layout is too large to fit a device, a yellow\nand black striped pattern appears along the affected edge.\nHere is an example of a row that is too wide:", "Widgets can be sized to fit within a row or column by using the\nExpanded widget. To fix the previous example where the\nrow of images is too wide for its render box,\nwrap each image with an Expanded widget.", "Perhaps you want a widget to occupy twice as much space as its\nsiblings. For this, use the Expanded widget flex property,\nan integer that determines the flex factor for a widget.\nThe default flex factor is 1. The following code sets\nthe flex factor of the middle image to 2:", "By default, a row or column occupies as much space along its main axis\nas possible, but if you want to pack the children closely together,\nset its mainAxisSize to MainAxisSize.min. The following example\nuses this property to pack the star icons together.", "The layout framework allows you to nest rows and columns\ninside of rows and columns as deeply as you need.\nLet\u2019s look at the code for the outlined\nsection of the following layout:", "The outlined section is implemented as two rows. The ratings row contains\nfive stars and the number of reviews. The icons row contains three\ncolumns of icons and text.", "The widget tree for the ratings row:", "The ratings variable creates a row containing a smaller row\nof 5 star icons, and text:", "tips_and_updates Tip:\n  To minimize the visual confusion that can result from\n  heavily nested layout code, implement pieces of the UI\n  in variables and functions.", "The icons row, below the ratings row, contains 3 columns;\neach column contains an icon and two lines of text,\nas you can see in its widget tree:", "The iconList variable defines the icons row:", "The leftColumn variable contains the ratings and icons rows,\nas well as the title and text that describes the Pavlova:", "The left column is placed in a SizedBox to constrain its width.\nFinally, the UI is constructed with the entire row (containing the\nleft column and the image) inside a Card.", "The Pavlova image is from Pixabay.\nYou can embed an image from the net using Image.network() but,\nfor this example, the image is saved to an images directory in the project,\nadded to the pubspec file, and accessed using Images.asset().\nFor more information, see Adding assets and images.", "tips_and_updates Tip:\n  The Pavlova example runs best horizontally on a wide device,\n  such as a tablet.  If you are running this example in the iOS simulator,\n  you can select a different device using the Hardware > Device menu.\n  For this example, we recommend the iPad Pro.\n  You can change its orientation to landscape mode using\n  Hardware > Rotate. You can also change the size of the\n  simulator window (without changing the number of logical pixels)\n  using Window > Scale.", "Flutter has a rich library of layout widgets.\nHere are a few of those most commonly used.\nThe intent is to get you up and running as quickly as possible,\nrather than overwhelm you with a complete list.\nFor information on other available widgets,\nrefer to the Widget catalog,\nor use the Search box in the API reference docs.\nAlso, the widget pages in the API docs often make suggestions\nabout similar widgets that might better suit your needs.", "The following widgets fall into two categories: standard widgets\nfrom the widgets library, and specialized widgets from the\nMaterial library. Any app can use the widgets library but\nonly Material apps can use the Material Components library.", "Many layouts make liberal use of Containers to separate\nwidgets using padding, or to add borders or margins.\nYou can change the device\u2019s background by placing the\nentire layout into a Container and changing its background\ncolor or image.", "This layout consists of a column with two rows, each containing\n2 images. A Container is used to change the background color\nof the column to a lighter grey.", "A Container is also used to add a rounded border and margins\nto each image:", "You can find more Container examples in the tutorial\nand the Flutter Gallery (running app, repo).", "Use GridView to lay widgets out as a two-dimensional\nlist. GridView provides two pre-fabricated lists,\nor you can build your own custom grid. When a GridView\ndetects that its contents are too long to fit the render box,\nit automatically scrolls.", "info Note:\n  When displaying a two-dimensional list where it\u2019s important which\n  row and column a cell occupies (for example,\n  it\u2019s the entry in the \u201ccalorie\u201d column for the \u201cavocado\u201d row), use\n  Table or DataTable.", "Uses GridView.extent to create a grid with tiles a maximum\n  150 pixels wide.", "Uses GridView.count to create a grid that\u2019s 2 tiles\n  wide in portrait mode, and 3 tiles wide in landscape mode.\n  The titles are created by setting the footer property for\n  each GridTile.", "Dart code: grid_list_demo.dart\n  from the Flutter Gallery", "ListView, a column-like widget, automatically\nprovides scrolling when its content is too long for\nits render box.", "Uses ListView to display a list of businesses using\n  ListTiles. A Divider separates the theaters from\n  the restaurants.", "Uses ListView to display the Colors from\n  the Material Design palette\n  for a particular color family.", "Dart code: colors_demo.dart from the\n  Flutter Gallery", "Use Stack to arrange widgets on top of a base\nwidget\u2014often an image. The widgets can completely\nor partially overlap the base widget.", "Uses Stack to overlay a Container\n  (that displays its Text on a translucent\n  black background) on top of a CircleAvatar.\n  The Stack offsets the text using the alignment property and\n  Alignments.", "Uses Stack to overlay an icon on top of an image.", "Dart code: bottom_navigation_demo.dart\n  from the Flutter Gallery", "A Card, from the Material library,\ncontains related nuggets of information and can\nbe composed from almost any widget, but is often used with\nListTile. Card has a single child,\nbut its child can be a column, row, list, grid,\nor other widget that supports multiple children.\nBy default, a Card shrinks its size to 0 by 0 pixels.\nYou can use SizedBox to constrain the size of a card.", "In Flutter, a Card features slightly rounded corners\nand a drop shadow, giving it a 3D effect.\nChanging a Card\u2019s elevation property allows you to control\nthe drop shadow effect. Setting the elevation to 24,\nfor example, visually lifts the Card further from the\nsurface and causes the shadow to become more dispersed.\nFor a list of supported elevation values, see Elevation in the\nMaterial guidelines.\nSpecifying an unsupported value disables the drop shadow entirely.", "A Card containing 3 ListTiles and sized by wrapping\n  it with a SizedBox. A Divider separates the first\n  and second ListTiles.", "A Card containing an image and text.", "Dart code: cards_demo.dart\n  from the Flutter Gallery", "Use ListTile, a specialized row widget from the\nMaterial library, for an easy way to create a row\ncontaining up to 3 lines of text and optional leading\nand trailing icons. ListTile is most commonly used in\nCard or ListView, but can be used elsewhere.", "A Card containing 3 ListTiles.", "Uses ListTile with leading widgets.\nDart code: list_demo.dart\n  from the Flutter Gallery", "To fully understand Flutter\u2019s layout system, you need\nto learn how Flutter positions and sizes\nthe components in a layout. For more information,\nsee Understanding constraints.", "The following videos, part of the\nFlutter in Focus series,\nexplain Stateless and Stateful widgets.", "Flutter in Focus playlist", "Each episode of the\nWidget of the Week series\nfocuses on a widget. Several of them includes layout widgets.", "Flutter Widget of the Week playlist", "The following resources might help when writing layout code.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout", "base_url": "https://docs.flutter.dev/"}, {"title": "Fade in images with a placeholder | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When displaying images using the default Image widget,\nyou might notice they simply pop onto the screen as they\u2019re loaded.\nThis might feel visually jarring to your users.", "Instead, wouldn\u2019t it be nice to display a placeholder at first,\nand images would fade in as they\u2019re loaded? Use the\nFadeInImage widget for exactly this purpose.", "FadeInImage works with images of any type: in-memory, local assets,\nor images from the internet.", "In this example, use the transparent_image\npackage for a simple transparent placeholder.", "You can also consider using local assets for placeholders.\nFirst, add the asset to the project\u2019s pubspec.yaml file\n(for more details, see Adding assets and images):", "Then, use the FadeInImage.assetNetwork() constructor:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/images/fading-in-images", "base_url": "https://docs.flutter.dev/"}, {"title": "Staggered animations | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Terminology:\n  If the concept of tweens or tweening is new to you, see the\n  Animations in Flutter tutorial.", "Staggered animations are a straightforward concept: visual changes\nhappen as a series of operations, rather than all at once.\nThe animation might be purely sequential, with one change occurring after\nthe next, or it might partially or completely overlap. It might also\nhave gaps, where no changes occur.", "This guide shows how to build a staggered animation in Flutter.", "This guide explains the basic_staggered_animation example.\n  You can also refer to a more complex example,\n  staggered_pic_selection.", "The following video demonstrates the animation performed by\nbasic_staggered_animation:", "In the video, you see the following animation of a single widget,\nwhich begins as a bordered blue square with slightly rounded corners.\nThe square runs through changes in the following order:", "After running forward, the animation runs in reverse.", "New to Flutter?\n  This page assumes you know how to create a layout using Flutter\u2019s\n  widgets.  For more information, see Building Layouts in Flutter.", "The following diagram shows the Intervals used in the\nbasic_staggered_animation example.\nYou might notice the following characteristics:", "To set up the animation:", "When the controlling animation\u2019s value changes,\nthe new animation\u2019s value changes, triggering the UI to update.", "The following code creates a tween for the width property.\nIt builds a CurvedAnimation,\nspecifying an eased curve. See Curves for\nother available pre-defined animation curves.", "The begin and end values don\u2019t have to be doubles.\nThe following code builds the tween for the borderRadius property\n(which controls the roundness of the square\u2019s corners),\nusing BorderRadius.circular().", "Like all interactive widgets, the complete animation consists\nof a widget pair: a stateless and a stateful widget.", "The stateless widget specifies the Tweens,\ndefines the Animation objects, and provides a build() function\nresponsible for building the animating portion of the widget tree.", "The stateful widget creates the controller, plays the animation,\nand builds the non-animating portion of the widget tree.\nThe animation begins when a tap is detected anywhere in the screen.", "Full code for basic_staggered_animation\u2019s main.dart", "In the stateless widget, StaggerAnimation,\nthe build() function instantiates an\nAnimatedBuilder\u2014a general purpose widget for building\nanimations. The AnimatedBuilder\nbuilds a widget and configures it using the Tweens\u2019 current values.\nThe example creates a function named _buildAnimation() (which performs\nthe actual UI updates), and assigns it to its builder property.\nAnimatedBuilder listens to notifications from the animation controller,\nmarking the widget tree dirty as values change.\nFor each tick of the animation, the values are updated,\nresulting in a call to _buildAnimation().", "The stateful widget, StaggerDemo, creates the AnimationController\n(the one who rules them all), specifying a 2000 ms duration. It plays\nthe animation, and builds the non-animating portion of the widget tree.\nThe animation begins when a tap is detected in the screen.\nThe animation runs forward, then backward.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations/staggered-animations", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter architectural overview | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This article is intended to provide a high-level overview of the architecture of\nFlutter, including the core principles and concepts that form its design.", "Flutter is a cross-platform UI toolkit that is designed to allow code reuse\nacross operating systems such as iOS and Android, while also allowing\napplications to interface directly with underlying platform services. The goal\nis to enable developers to deliver high-performance apps that feel natural on\ndifferent platforms, embracing differences where they exist while sharing as\nmuch code as possible.", "During development, Flutter apps run in a VM that offers stateful hot reload of\nchanges without needing a full recompile. For release, Flutter apps are compiled\ndirectly to machine code, whether Intel x64 or ARM instructions, or to\nJavaScript if targeting the web. The framework is open source, with a permissive\nBSD license, and has a thriving ecosystem of third-party packages that\nsupplement the core library functionality.", "This overview is divided into a number of sections:", "Flutter is designed as an extensible, layered system. It exists as a series of\nindependent libraries that each depend on the underlying layer. No layer has\nprivileged access to the layer below, and every part of the framework level is\ndesigned to be optional and replaceable.", "To the underlying operating system, Flutter applications are packaged in the\nsame way as any other native application. A platform-specific embedder provides\nan entrypoint; coordinates with the underlying operating system for access to\nservices like rendering surfaces, accessibility, and input; and manages the\nmessage event loop. The embedder is written in a language that is appropriate\nfor the platform: currently Java and C++ for Android, Objective-C/Objective-C++\nfor iOS and macOS, and C++ for Windows and Linux. Using the embedder, Flutter\ncode can be integrated into an existing application as a module, or the code may\nbe the entire content of the application. Flutter includes a number of embedders\nfor common target platforms, but other embedders also\nexist.", "At the core of Flutter is the Flutter engine,\nwhich is mostly written in C++ and supports\nthe primitives necessary to support all Flutter applications.\nThe engine is responsible for rasterizing composited scenes\nwhenever a new frame needs to be painted.\nIt provides the low-level implementation of Flutter\u2019s core API,\nincluding graphics (through Impeller on iOS and coming to Android,\nand Skia on other platforms) text layout,\nfile and network I/O, accessibility support,\nplugin architecture, and a Dart runtime\nand compile toolchain.", "The engine is exposed to the Flutter framework through\ndart:ui,\nwhich wraps the underlying C++ code in Dart classes. This library\nexposes the lowest-level primitives, such as classes for driving input,\ngraphics, and text rendering subsystems.", "Typically, developers interact with Flutter through the Flutter framework,\nwhich provides a modern, reactive framework written in the Dart language. It\nincludes a rich set of platform, layout, and foundational libraries, composed of\na series of layers. Working from the bottom to the top, we have:", "The Flutter framework is relatively small; many higher-level features that\ndevelopers might use are implemented as packages, including platform plugins\nlike camera and\nwebview, as well as platform-agnostic\nfeatures like characters,\nhttp, and\nanimations that build upon the core Dart and\nFlutter libraries. Some of these packages come from the broader ecosystem,\ncovering services like in-app\npayments, Apple\nauthentication, and\nanimations.", "The rest of this overview broadly navigates down the layers, starting with the\nreactive paradigm of UI development. Then, we describe how widgets are composed\ntogether and converted into objects that can be rendered as part of an\napplication. We describe how Flutter interoperates with other code at a platform\nlevel, before giving a brief summary of how Flutter\u2019s web support differs from\nother targets.", "The following diagram gives an overview of the pieces\nthat make up a regular Flutter app generated by flutter create.\nIt shows where the Flutter Engine sits in this stack,\nhighlights API boundaries, and identifies the repositories\nwhere the individual pieces live. The legend below clarifies\nsome of the terminology commonly used to describe the\npieces of a Flutter app.", "On the surface, Flutter is a reactive, declarative UI framework,\nin which the developer provides a mapping from application state to interface\nstate, and the framework takes on the task of updating the interface at runtime\nwhen the application state changes. This model is inspired by\nwork that came from Facebook for their own React framework,\nwhich includes a rethinking of many traditional design principles.", "In most traditional UI frameworks, the user interface\u2019s initial state is\ndescribed once and then separately updated by user code at runtime, in response\nto events. One challenge of this approach is that, as the application grows in\ncomplexity, the developer needs to be aware of how state changes cascade\nthroughout the entire UI. For example, consider the following UI:", "There are many places where the state can be changed: the color box, the hue\nslider, the radio buttons. As the user interacts with the UI, changes must be\nreflected in every other place. Worse, unless care is taken, a minor change to\none part of the user interface can cause ripple effects to seemingly unrelated\npieces of code.", "One solution to this is an approach like MVC, where you push data changes to the\nmodel via the controller, and then the model pushes the new state to the view\nvia the controller. However, this also is problematic, since creating and\nupdating UI elements are two separate steps that can easily get out of sync.", "Flutter, along with other reactive frameworks, takes an alternative approach to\nthis problem, by explicitly decoupling the user interface from its underlying\nstate. With React-style APIs, you only create the UI description, and the\nframework takes care of using that one configuration to both create and/or\nupdate the user interface as appropriate.", "In Flutter, widgets (akin to components in React) are represented by immutable\nclasses that are used to configure a tree of objects. These widgets are used to\nmanage a separate tree of objects for layout, which is then used to manage a\nseparate tree of objects for compositing. Flutter is, at its core, a series of\nmechanisms for efficiently walking the modified parts of trees, converting trees\nof objects into lower-level trees of objects, and propagating changes across\nthese trees.", "A widget declares its user interface by overriding the build() method, which\nis a function that converts state to UI:", "The build() method is by design fast to execute and should be free of side\neffects, allowing it to be called by the framework whenever needed (potentially\nas often as once per rendered frame).", "This approach relies on certain characteristics of a language runtime (in\nparticular, fast object instantiation and deletion). Fortunately, Dart is\nparticularly well suited for this\ntask.", "As mentioned, Flutter emphasizes widgets as a unit of composition. Widgets are\nthe building blocks of a Flutter app\u2019s user interface, and each widget is an\nimmutable declaration of part of the user interface.", "Widgets form a hierarchy based on composition. Each widget nests inside its\nparent and can receive context from the parent. This structure carries all the\nway up to the root widget (the container that hosts the Flutter app, typically\nMaterialApp or CupertinoApp), as this trivial example shows:", "In the preceding code, all instantiated classes are widgets.", "Apps update their user interface in response to events (such as a user\ninteraction) by telling the framework to replace a widget in the hierarchy with\nanother widget. The framework then compares the new and old widgets, and\nefficiently updates the user interface.", "Flutter has its own implementations of each UI control, rather than deferring to\nthose provided by the system: for example, there is a pure Dart\nimplementation of both the\niOS Toggle\ncontrol\nand the one for the\nAndroid equivalent.", "This approach provides several benefits:", "Widgets are typically composed of many other small, single-purpose widgets that\ncombine to produce powerful effects.", "Where possible, the number of design concepts is kept to a minimum while\nallowing the total vocabulary to be large. For example, in the widgets layer,\nFlutter uses the same core concept (a Widget) to represent drawing to the\nscreen, layout (positioning and sizing), user interactivity, state management,\ntheming, animations, and navigation. In the animation layer, a pair of concepts,\nAnimations and Tweens, cover most of the design space. In the rendering\nlayer, RenderObjects are used to describe layout, painting, hit testing, and\naccessibility. In each of these cases, the corresponding vocabulary ends up\nbeing large: there are hundreds of widgets and render objects, and dozens of\nanimation and tween types.", "The class hierarchy is deliberately shallow and broad to maximize the possible\nnumber of combinations, focusing on small, composable widgets that each do one\nthing well. Core features are abstract, with even basic features like padding\nand alignment being implemented as separate components rather than being built\ninto the core. (This also contrasts with more traditional APIs where features\nlike padding are built in to the common core of every layout component.) So, for\nexample, to center a widget, rather than adjusting a notional Align property,\nyou wrap it in a Center\nwidget.", "There are widgets for padding, alignment, rows, columns, and grids. These layout\nwidgets do not have a visual representation of their own. Instead, their sole\npurpose is to control some aspect of another widget\u2019s layout. Flutter also\nincludes utility widgets that take advantage of this compositional approach.", "For example, Container, a\ncommonly used widget, is made up of several widgets responsible for layout,\npainting, positioning, and sizing. Specifically, Container is made up of the\nLimitedBox,\nConstrainedBox,\nAlign,\nPadding,\nDecoratedBox, and\nTransform widgets, as you\ncan see by reading its source code. A defining characteristic of Flutter is that\nyou can drill down into the source for any widget and examine it. So, rather\nthan subclassing Container to produce a customized effect, you can compose it\nand other widgets in novel ways, or just create a new widget using\nContainer as inspiration.", "As mentioned earlier, you determine the visual representation of a widget by\noverriding the\nbuild() function to\nreturn a new element tree. This tree represents the widget\u2019s part of the user\ninterface in more concrete terms. For example, a toolbar widget might have a\nbuild function that returns a horizontal\nlayout of some\ntext and\nvarious\nbuttons. As needed,\nthe framework recursively asks each widget to build until the tree is entirely\ndescribed by concrete renderable\nobjects. The\nframework then stitches together the renderable objects into a renderable object\ntree.", "A widget\u2019s build function should be free of side effects. Whenever the function\nis asked to build, the widget should return a new tree of widgets1, regardless of what the widget previously returned. The\nframework does the heavy lifting work to determine which build methods need to\nbe called based on the render object tree (described in more detail later). More\ninformation about this process can be found in the Inside Flutter\ntopic.", "On each rendered frame, Flutter can recreate just the parts of the UI where the\nstate has changed by calling that widget\u2019s build() method. Therefore it is\nimportant that build methods should return quickly, and heavy computational work\nshould be done in some asynchronous manner and then stored as part of the state\nto be used by a build method.", "While relatively na\u00efve in approach, this automated comparison is quite\neffective, enabling high-performance, interactive apps. And, the design of the\nbuild function simplifies your code by focusing on declaring what a widget is\nmade of, rather than the complexities of updating the user interface from one\nstate to another.", "The framework introduces two major classes of widget: stateful and stateless\nwidgets.", "Many widgets have no mutable state: they don\u2019t have any properties that change\nover time (for example, an icon or a label). These widgets subclass\nStatelessWidget.", "However, if the unique characteristics of a widget need to change based on user\ninteraction or other factors, that widget is stateful. For example, if a\nwidget has a counter that increments whenever the user taps a button, then the\nvalue of the counter is the state for that widget. When that value changes, the\nwidget needs to be rebuilt to update its part of the UI. These widgets subclass\nStatefulWidget, and\n(because the widget itself is immutable) they store mutable state in a separate\nclass that subclasses State.\nStatefulWidgets don\u2019t have a build method; instead, their user interface is\nbuilt through their State object.", "Whenever you mutate a State object (for example, by incrementing the counter),\nyou must call setState()\nto signal the framework to update the user interface by calling the State\u2019s\nbuild method again.", "Having separate state and widget objects lets other widgets treat both stateless\nand stateful widgets in exactly the same way, without being concerned about\nlosing state. Instead of needing to hold on to a child to preserve its state,\nthe parent can create a new instance of the child at any time without losing the\nchild\u2019s persistent state. The framework does all the work of finding and reusing\nexisting state objects when appropriate.", "So, if many widgets can contain state, how is state managed and passed around\nthe system?", "As with any other class, you can use a constructor in a widget to initialize its\ndata, so a build() method can ensure that any child widget is instantiated\nwith the data it needs:", "As widget trees get deeper, however, passing state information up and down the\ntree hierarchy becomes cumbersome. So, a third widget type,\nInheritedWidget,\nprovides an easy way to grab data from a shared ancestor. You can use\nInheritedWidget to create a state widget that wraps a common ancestor in the\nwidget tree, as shown in this example:", "Whenever one of the ExamWidget or GradeWidget objects needs data from\nStudentState, it can now access it with a command such as:", "The of(context) call takes the build context (a handle to the current widget\nlocation), and returns the nearest ancestor in the\ntree\nthat matches the StudentState type. InheritedWidgets also offer an\nupdateShouldNotify() method, which Flutter calls to determine whether a state\nchange should trigger a rebuild of child widgets that use it.", "Flutter itself uses InheritedWidget extensively as part of the framework for\nshared state, such as the application\u2019s visual theme, which includes\nproperties like color and type\nstyles that are\npervasive throughout an application. The MaterialApp build() method inserts\na theme in the tree when it builds, and then deeper in the hierarchy a widget\ncan use the .of() method to look up the relevant theme data, for example:", "This approach is also used for\nNavigator, which provides\npage routing; and\nMediaQuery, which provides\naccess to screen metrics such as orientation, dimensions, and brightness.", "As applications grow, more advanced state management approaches that reduce the\nceremony of creating and using stateful widgets become more attractive. Many\nFlutter apps use utility packages like\nprovider, which provides a wrapper around\nInheritedWidget. Flutter\u2019s layered architecture also enables alternative\napproaches to implement the transformation of state into UI, such as the\nflutter_hooks package.", "This section describes the rendering pipeline, which is the series of steps that\nFlutter takes to convert a hierarchy of widgets into the actual pixels painted\nonto a screen.", "You may be wondering: if Flutter is a cross-platform framework, then how can it\noffer comparable performance to single-platform frameworks?", "It\u2019s useful to start by thinking about how traditional\nAndroid apps work. When drawing,\nyou first call the Java code of the Android framework.\nThe Android system libraries provide the components\nresponsible for drawing themselves to a Canvas object,\nwhich Android can then render with Skia,\na graphics engine written in C/C++ that calls the\nCPU or GPU to complete the drawing on the device.", "Cross-platform frameworks typically work by creating\nan abstraction layer over the underlying native\nAndroid and iOS UI libraries, attempting to smooth out the\ninconsistencies of each platform representation.\nApp code is often written in an interpreted language like JavaScript,\nwhich must in turn interact with the Java-based\nAndroid or Objective-C-based iOS system libraries to display UI.\nAll this adds overhead that can be significant,\nparticularly where there is a lot of\ninteraction between the UI and the app logic.", "By contrast, Flutter minimizes those abstractions,\nbypassing the system UI widget libraries in favor\nof its own widget set. The Dart code that paints\nFlutter\u2019s visuals is compiled into native code,\nwhich uses Skia (or, in future, Impeller) for rendering.\nFlutter also embeds its own copy of Skia as part of the engine,\nallowing the developer to upgrade their app to stay\nupdated with the latest performance improvements\neven if the phone hasn\u2019t been updated with a new Android version.\nThe same is true for Flutter on other native platforms,\nsuch as Windows or macOS.", "info Note:\n  Flutter 3.10 set Impeller as the default\n  rendering engine on iOS. It\u2019s in preview\n  for Android behind a flag.", "The overriding principle that Flutter applies to its rendering pipeline is that\nsimple is fast. Flutter has a straightforward pipeline for how data flows to\nthe system, as shown in the following sequencing diagram:", "Let\u2019s take a look at some of these phases in greater detail.", "Consider this code fragment that demonstrates a widget hierarchy:", "When Flutter needs to render this fragment, it calls the build() method, which\nreturns a subtree of widgets that renders UI based on the current app state.\nDuring this process, the build() method can introduce new widgets, as\nnecessary, based on its state. As an example, in the preceding code\nfragment, Container has color and child properties. From looking at the\nsource\ncode\nfor Container, you can see that if the color is not null, it inserts a\nColoredBox representing the color:", "Correspondingly, the Image and Text widgets might insert child widgets such\nas RawImage and RichText during the build process. The eventual widget\nhierarchy may therefore be deeper than what the code represents, as in this\ncase2:", "This explains why, when you examine the tree through a debug tool such as the\nFlutter inspector, part of the\nDart DevTools, you might see a structure that is considerably deeper than what\nis in your original code.", "During the build phase, Flutter translates the widgets expressed in code into a\ncorresponding element tree, with one element for every widget. Each element\nrepresents a specific instance of a widget in a given location of the tree\nhierarchy. There are two basic types of elements:", "RenderObjectElements are an intermediary between their widget analog and the\nunderlying RenderObject, which we\u2019ll come to later.", "The element for any widget can be referenced through its BuildContext, which\nis a handle to the location of a widget in the tree. This is the context in a\nfunction call such as Theme.of(context), and is supplied to the build()\nmethod as a parameter.", "Because widgets are immutable, including the parent/child relationship between\nnodes, any change to the widget tree (such as changing Text('A') to\nText('B') in the preceding example) causes a new set of widget objects to be\nreturned. But that doesn\u2019t mean the underlying representation must be rebuilt.\nThe element tree is persistent from frame to frame, and therefore plays a\ncritical performance role, allowing Flutter to act as if the widget hierarchy is\nfully disposable while caching its underlying representation. By only walking\nthrough the widgets that changed, Flutter can rebuild just the parts of the\nelement tree that require reconfiguration.", "It would be a rare application that drew only a single widget. An important part\nof any UI framework is therefore the ability to efficiently lay out a hierarchy\nof widgets, determining the size and position of each element before they are\nrendered on the screen.", "The base class for every node in the render tree is\nRenderObject, which\ndefines an abstract model for layout and painting. This is extremely general: it\ndoes not commit to a fixed number of dimensions or even a Cartesian coordinate\nsystem (demonstrated by this example of a polar coordinate\nsystem). Each\nRenderObject knows its parent, but knows little about its children other than\nhow to visit them and their constraints. This provides RenderObject with\nsufficient abstraction to be able to handle a variety of use cases.", "During the build phase, Flutter creates or updates an object that inherits from\nRenderObject for each RenderObjectElement in the element tree.\nRenderObjects are primitives:\nRenderParagraph\nrenders text,\nRenderImage renders\nan image, and\nRenderTransform\napplies a transformation before painting its child.", "Most Flutter widgets are rendered by an object that inherits from the\nRenderBox subclass, which represents a RenderObject of fixed size in a 2D\nCartesian space. RenderBox provides the basis of a box constraint model,\nestablishing a minimum and maximum width and height for each widget to be\nrendered.", "To perform layout, Flutter walks the render tree in a depth-first traversal and\npasses down size constraints from parent to child. In determining its size,\nthe child must respect the constraints given to it by its parent. Children\nrespond by passing up a size to their parent object within the constraints\nthe parent established.", "At the end of this single walk through the tree, every object has a defined size\nwithin its parent\u2019s constraints and is ready to be painted by calling the\npaint()\nmethod.", "The box constraint model is very powerful as a way to layout objects in O(n)\ntime:", "This model works even when a child object needs to know how much space it has\navailable to decide how it will render its content. By using a\nLayoutBuilder widget,\nthe child object can examine the passed-down constraints and use those to\ndetermine how it will use them, for example:", "More information about the constraint and layout system, along with worked\nexamples, can be found in the Understanding\nconstraints topic.", "The root of all RenderObjects is the RenderView, which represents the total\noutput of the render tree. When the platform demands a new frame to be rendered\n(for example, because of a\nvsync or because\na texture decompression/upload is complete), a call is made to the\ncompositeFrame() method, which is part of the RenderView object at the root\nof the render tree. This creates a SceneBuilder to trigger an update of the\nscene. When the scene is complete, the RenderView object passes the composited\nscene to the Window.render() method in dart:ui, which passes control to the\nGPU to render it.", "Further details of the composition and rasterization stages of the pipeline are\nbeyond the scope of this high-level article, but more information can be found\nin this talk on the Flutter rendering\npipeline.", "As we\u2019ve seen, rather than being translated into the equivalent OS widgets,\nFlutter user interfaces are built, laid out, composited, and painted by Flutter\nitself. The mechanism for obtaining the texture and participating in the app\nlifecycle of the underlying operating system inevitably varies depending on the\nunique concerns of that platform. The engine is platform-agnostic, presenting a\nstable ABI (Application Binary\nInterface)\nthat provides a platform embedder with a way to set up and use Flutter.", "The platform embedder is the native OS application that hosts all Flutter\ncontent, and acts as the glue between the host operating system and Flutter.\nWhen you start a Flutter app, the embedder provides the entrypoint, initializes\nthe Flutter engine, obtains threads for UI and rastering, and creates a texture\nthat Flutter can write to. The embedder is also responsible for the app\nlifecycle, including input gestures (such as mouse, keyboard, touch), window\nsizing, thread management, and platform messages. Flutter includes platform\nembedders for Android, iOS, Windows, macOS, and Linux; you can also create a\ncustom platform embedder, as in this worked\nexample that supports remoting\nFlutter sessions through a VNC-style framebuffer or this worked example for\nRaspberry Pi.", "Each platform has its own set of APIs and constraints. Some brief\nplatform-specific notes:", "Flutter provides a variety of interoperability mechanisms, whether you\u2019re\naccessing code or APIs written in a language like Kotlin or Swift, calling a\nnative C-based API, embedding native controls in a Flutter app, or embedding\nFlutter in an existing application.", "For mobile and desktop apps, Flutter allows you to call into custom code through\na platform channel, which is a mechanism for communicating between your\nDart code and the platform-specific code of your host app. By creating a common\nchannel (encapsulating a name and a codec), you can send and receive messages\nbetween Dart and a platform component written in a language like Kotlin or\nSwift. Data is serialized from a Dart type like Map into a standard format,\nand then deserialized into an equivalent representation in Kotlin (such as\nHashMap) or Swift (such as Dictionary).", "The following is a short platform channel example of a Dart call to a receiving\nevent handler in Kotlin (Android) or Swift (iOS):", "Further examples of using platform channels, including examples for macOS, can\nbe found in the flutter/plugins\nrepository3. There are also thousands of plugins\nalready available for Flutter that cover many common\nscenarios, ranging from Firebase to ads to device hardware like camera and\nBluetooth.", "For C-based APIs, including those that can be generated for code written in\nmodern languages like Rust or Go, Dart provides a direct mechanism for binding\nto native code using the dart:ffi library. The foreign function interface\n(FFI) model can be considerably faster than platform channels, because no\nserialization is required to pass data. Instead, the Dart runtime provides the\nability to allocate memory on the heap that is backed by a Dart object and make\ncalls to statically or dynamically linked libraries. FFI is available for all\nplatforms other than web, where the js package\nserves an equivalent purpose.", "To use FFI, you create a typedef for each of the Dart and unmanaged method\nsignatures, and instruct the Dart VM to map between them. As an example,\nhere\u2019s a fragment of code to call the traditional Win32 MessageBox() API:", "Because Flutter content is drawn to a texture and its widget tree is entirely\ninternal, there\u2019s no place for something like an Android view to exist within\nFlutter\u2019s internal model or render interleaved within Flutter widgets. That\u2019s a\nproblem for developers that would like to include existing platform components\nin their Flutter apps, such as a browser control.", "Flutter solves this by introducing platform view widgets\n(AndroidView\nand UiKitView)\nthat let you embed this kind of content on each platform. Platform views can be\nintegrated with other Flutter content4. Each of\nthese widgets acts as an intermediary to the underlying operating system. For\nexample, on Android, AndroidView serves three primary functions:", "Inevitably, there is a certain amount of overhead associated with this\nsynchronization. In general, therefore, this approach is best suited for complex\ncontrols like Google Maps where reimplementing in Flutter isn\u2019t practical.", "Typically, a Flutter app instantiates these widgets in a build() method based\non a platform test. As an example, from the\ngoogle_maps_flutter plugin:", "Communicating with the native code underlying the AndroidView or UiKitView\ntypically occurs using the platform channels mechanism, as previously described.", "At present, platform views aren\u2019t available for desktop platforms, but this is\nnot an architectural limitation; support might be added in the future.", "The converse of the preceding scenario is embedding a Flutter widget in an\nexisting Android or iOS app. As described in an earlier section, a newly created\nFlutter app running on a mobile device is hosted in an Android activity or iOS\nUIViewController. Flutter content can be embedded into an existing Android or\niOS app using the same embedding API.", "The Flutter module template is designed for easy embedding; you can either embed\nit as a source dependency into an existing Gradle or Xcode build definition, or\nyou can compile it into an Android Archive or iOS Framework binary for use\nwithout requiring every developer to have Flutter installed.", "The Flutter engine takes a short while to initialize, because it needs to load\nFlutter shared libraries, initialize the Dart runtime, create and run a Dart\nisolate, and attach a rendering surface to the UI. To minimize any UI delays\nwhen presenting Flutter content, it\u2019s best to initialize the Flutter engine\nduring the overall app initialization sequence, or at least ahead of the first\nFlutter screen, so that users don\u2019t experience a sudden pause while the first\nFlutter code is loaded. In addition, separating the Flutter engine allows it to\nbe reused across multiple Flutter screens and share the memory overhead involved\nwith loading the necessary libraries.", "More information about how Flutter is loaded into an existing Android or iOS app\ncan be found at the Load sequence, performance and memory\ntopic.", "While the general architectural concepts apply to all platforms that Flutter\nsupports, there are some unique characteristics of Flutter\u2019s web support that\nare worthy of comment.", "Dart has been compiling to JavaScript for as long as the language has existed,\nwith a toolchain optimized for both development and production purposes. Many\nimportant apps compile from Dart to JavaScript and run in production today,\nincluding the advertiser tooling for Google Ads.\nBecause the Flutter framework is written in Dart, compiling it to JavaScript was\nrelatively straightforward.", "However, the Flutter engine, written in C++,\nis designed to interface with the\nunderlying operating system rather than a web browser.\nA different approach is therefore required.\nOn the web, Flutter provides a reimplementation of the\nengine on top of standard browser APIs.\nWe currently have two options for\nrendering Flutter content on the web: HTML and WebGL.\nIn HTML mode, Flutter uses HTML, CSS, Canvas, and SVG.\nTo render to WebGL, Flutter uses a version of Skia\ncompiled to WebAssembly called\nCanvasKit.\nWhile HTML mode offers the best code size characteristics,\nCanvasKit provides the fastest path to the\nbrowser\u2019s graphics stack,\nand offers somewhat higher graphical fidelity with the\nnative mobile targets5.", "The web version of the architectural layer diagram is as follows:", "Perhaps the most notable difference compared to other platforms on which Flutter\nruns is that there is no need for Flutter to provide a Dart runtime. Instead,\nthe Flutter framework (along with any code you write) is compiled to JavaScript.\nIt\u2019s also worthy to note that Dart has very few language semantic differences\nacross all its modes (JIT versus AOT, native versus web compilation), and most\ndevelopers will never write a line of code that runs into such a difference.", "During development time, Flutter web uses\ndartdevc, a compiler that supports\nincremental compilation and therefore allows hot restart (although not currently\nhot reload) for apps. Conversely, when you are ready to create a production app\nfor the web, dart2js, Dart\u2019s\nhighly-optimized production JavaScript compiler is used, packaging the Flutter\ncore and framework along with your application into a minified source file that\ncan be deployed to any web server. Code can be offered in a single file or split\ninto multiple files through deferred imports.", "For those interested in more information about the internals of Flutter, the\nInside Flutter whitepaper\nprovides a useful guide to the framework\u2019s design philosophy.", "1 While the build function returns a fresh tree,\nyou only need to return something different if there\u2019s some new\nconfiguration to incorporate. If the configuration is in fact the same, you can\njust return the same widget.", "2 This is a slight simplification for ease of\nreading. In practice, the tree might be more complex.", "3 While work is underway on Linux and Windows,\nexamples for those platforms can be found in the Flutter desktop embedding\nrepository.\nAs development on those platforms reaches maturity, this content will be\ngradually migrated into the main Flutter repository.", "4 There are some limitations with this approach, for\nexample, transparency doesn\u2019t composite the same way for a platform view as it\nwould for other Flutter widgets.", "5 One example is shadows, which have to be\napproximated with DOM-equivalent primitives at the cost of some fidelity.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/architectural-overview", "base_url": "https://docs.flutter.dev/"}, {"title": "Find widgets | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "To locate widgets in a test environment, use the Finder\nclasses. While it\u2019s possible to write your own Finder classes,\nit\u2019s generally more convenient to locate widgets using the tools\nprovided by the flutter_test package.", "During a flutter run session on a widget test, you can also\ninteractively tap parts of the screen for the Flutter tool to\nprint the suggested Finder.", "This recipe looks at the find constant provided by\nthe flutter_test package, and demonstrates how\nto work with some of the Finders it provides.\nFor a full list of available finders,\nsee the CommonFinders documentation.", "If you\u2019re unfamiliar with widget testing and the role of\nFinder classes,\nreview the Introduction to widget testing recipe.", "This recipe uses the following steps:", "In testing, you often need to find widgets that contain specific text.\nThis is exactly what the find.text() method is for. It creates a\nFinder that searches for widgets that display a specific String of text.", "In some cases, you might want to find a widget based on the Key that has been\nprovided to it. This can be handy if displaying multiple instances of the\nsame widget. For example, a ListView might display several\nText widgets that contain the same text.", "In this case, provide a Key to each widget in the list. This allows\nan app to uniquely identify a specific widget, making it easier to find\nthe widget in the test environment.", "Finally, you might be interested in locating a specific instance of a widget.\nFor example, this can be useful when creating widgets that take a child\nproperty and you want to ensure you\u2019re rendering the child widget.", "The find constant provided by the flutter_test package provides\nseveral ways to locate widgets in the test environment. This recipe\ndemonstrated three of these methods, and several more methods exist\nfor different purposes.", "If the above examples do not work for a particular use-case,\nsee the CommonFinders documentation\nto review all available methods.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/widget/finders", "base_url": "https://docs.flutter.dev/"}, {"title": "Shader compilation jank | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  To learn how to use the Performance View\n  (part of Flutter DevTools)\n  for debugging performance issues,\n  see Using the Performance view.", "If the animations on your mobile app appear to be janky,\nbut only on the first run,\nthis is likely due to shader compilation.\nFlutter\u2019s long term solution to\nshader compilation jank is Impeller,\nwhich is in the stable release for iOS\nand in preview behind a flag on Android.", "While we work on making Impeller fully production ready,\nyou can mitigate shader compilation jank by bundling\nprecompiled shaders with an iOS app.\nUnfortunately, this approach doesn\u2019t work well on Android\ndue to precompiled shaders being device or GPU-specific.\nThe Android hardware ecosystem is large enough that the\nGPU-specific precompiled shaders bundled with an application\nwill work on only a small subset of devices,\nand will likely make jank worse on the other devices,\nor even create rendering errors.", "Also, note that we aren\u2019t planning to make\nimprovements to the developer experience for creating\nprecompiled shaders described below. Instead,\nwe are focusing our energies on the more robust\nsolution to this problem that Impeller offers.", "A shader is a piece of code that runs on a\nGPU (graphics processing unit).\nWhen the Skia graphics backend that Flutter uses for rendering\nsees a new sequence of draw commands for the first time,\nit sometimes generates and compiles a\ncustom GPU shader for that sequence of commands.\nThis allows that sequence and potentially similar sequences\nto render as fast as possible.", "Unfortunately, Skia\u2019s shader generation and compilation\nhappens in sequence with the frame workload.\nThe compilation could cost up to a few hundred milliseconds\nwhereas a smooth frame needs to be drawn within 16 milliseconds\nfor a 60 fps (frame-per-second) display.\nTherefore, a compilation could cause tens of frames\nto be missed, and drop the fps from 60 to 6.\nThis is compilation jank.\nAfter the compilation is complete,\nthe animation should be smooth.", "On the other hand, Impeller generates and compiles all\nnecessary shaders when we build the Flutter Engine.\nTherefore apps running on Impeller already have\nall the shaders they need, and the shaders can be used\nwithout introducing jank into animations.", "Definitive evidence for the presence of shader compilation jank\nis to set GrGLProgramBuilder::finalize in the tracing\nwith --trace-skia enabled.\nThe following screenshot shows an example timeline tracing.", "On iOS, \u201cfirst run\u201d means that the user might see\njank when an animation first occurs every time\nthe user opens the app from scratch.", "Flutter provides command line tools\nfor app developers to collect shaders that might be needed\nfor end-users in the SkSL (Skia Shader Language) format.\nThe SkSL shaders can then be packaged into the app,\nand get warmed up (pre-compiled) when an end-user first\nopens the app, thereby reducing the compilation\njank in later animations.\nUse the following instructions to collect\nand package the SkSL shaders:", "Run the app with --cache-sksl turned on\n    to capture shaders in SkSL:", "If the same app has been previously run\nwithout --cache-sksl, then the\n--purge-persistent-cache flag might be needed:", "This flag removes older non-SkSL shader caches that\ncould interfere with SkSL shader capturing.\nIt also purges the SkSL shaders so use it only on the first\n--cache-sksl run.", "Play with the app to trigger as many animations\n    as needed; particularly those with compilation jank.", "Press M at the command line of flutter run to\n    write the captured SkSL shaders into a file named something like\n   flutter_01.sksl.json.\n   For best results,\n   capture SkSL shaders on an actual iOS device.\n   A shader captured on a simulator isn\u2019t likely to work correctly\n   on actual hardware.", "Build the app with SkSL warm-up using the following,\n    as appropriate:", "If it\u2019s built for a driver test like test_driver/app.dart,\nmake sure to also specify --target=test_driver/app.dart\n(for example, flutter build ios --bundle-sksl-path\nflutter_01.sksl.json --target=test_driver/app.dart).", "Test the newly built app.", "Alternatively, you can write some integration tests to\nautomate the first three steps using a single command.\nFor example:", "With such integration tests,\nyou can easily and reliably get the\nnew SkSLs when the app code changes,\nor when Flutter upgrades.\nSuch tests can also be used to verify the performance change\nbefore and after the SkSL warm-up.\nEven better, you can put those tests into a\nCI (continuous integration) system so the\nSkSLs are generated and tested automatically over the lifetime of an app.", "info Note:\n  The integration_test package is now the recommended way\n  to write integration tests. Refer to the\n  Integration testing\n  page for details.", "Take the original version of Flutter Gallery as an example.\nThe CI system is set up to generate SkSLs for every Flutter commit,\nand verifies the performance, in the transitions_perf_test.dart test.\nFor more details,\ncheck out the flutter_gallery_sksl_warmup__transition_perf and\nflutter_gallery_sksl_warmup__transition_perf_e2e_ios32 tasks.", "The worst frame rasterization time is a useful metric from\nsuch integration tests to indicate the severity of shader\ncompilation jank.\nFor instance,\nthe steps above reduce Flutter gallery\u2019s shader compilation\njank and speeds up its worst frame rasterization time on a\nMoto G4 from ~90 ms to ~40 ms. On iPhone 4s,\nit\u2019s reduced from ~300 ms to ~80 ms. That leads to the visual\ndifference as illustrated in the beginning of this article.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/shader", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter concurrency for Swift developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Both Dart and Swift support concurrent programming. \nThis guide should help you understand how\nconcurrency works in Dart and how it compares to Swift.\nWith this understanding, you can create\nhigh-performing iOS apps.", "When developing in the Apple ecosystem, \nsome tasks might take a long time to complete. \nThese tasks include fetching or processing large amounts of data.\niOS developers typically use Grand Central Dispatch (GCD)\nto schedule tasks using a shared thread pool.\nWith GCD, developers add tasks to dispatch queues\nand GCD decides on which thread to execute them.", "But, GCD spins up threads to \nhandle remaining work items.\nThis means you can end up with a large number of threads \nand the system can become over committed.\nWith Swift, the structured concurrency model reduced the number \nof threads and context switches. \nNow, each core has only one thread.", "Dart has a single-threaded execution model, \nwith support for Isolates, an event loop, and asynchronous code. \nAn Isolate is Dart\u2019s implementation of a lightweight thread.\nUnless you spawn an Isolate, your Dart code runs in the \nmain UI thread driven by an event loop. \nFlutter\u2019s event loop is \nequivalent to the iOS main loop\u2014in other words, \nthe Looper attached to the main thread.", "Dart\u2019s single-threaded model doesn\u2019t mean \nyou are required to run everything \nas a blocking operation that causes the UI to freeze. \nInstead, use the asynchronous \nfeatures that the Dart language provides, \nsuch as async/await.", "An asynchronous operation allows other operations \nto execute before it completes. \nBoth Dart and Swift support asynchronous functions \nusing the async and await keywords. \nIn both cases, async marks that a function \nperforms asynchronous work, \nand await tells the system to await a result \nfrom function. This means that the Dart VM could \nsuspend the function, if necessary. \nFor more details on asynchronous programming, check out\nConcurrency in Dart.", "For Apple operating systems, the primary (also called the main) \nthread is where the application begins running. \nRendering the user interface always happens on the main thread. \nOne difference between Swift and Dart is that\nSwift might use different threads for different tasks, \nand Swift doesn\u2019t guarantee which thread is used. \nSo, when dispatching UI updates in Swift, \nyou might need to ensure that the work occurs on the main thread.", "Say you want to write a function that fetches the \nweather asynchronously and \ndisplays the results.", "In GCD, to manually dispatch a process to the main thread, \nyou might do something like the following.", "First, define the Weather enum:", "Next, define the view model and mark it as an ObservableObject \nso that it can return a value of type Weather?. \nUse GCD create to a DispatchQueue to \nsend the work to the pool of threads", "Finally, display the results:", "More recently, Swift introduced actors to support \nsynchronization for shared, mutable state. \nTo ensure that work is performed on the main thread,\ndefine a view model class that is marked as a @MainActor, \nwith a load() function that internally calls an \nasynchronous function using Task.", "Next, define the view model as a state object using @StateObject, \nwith a load() function that can be called by the view model:", "In Dart, all work runs on the main isolate by default. \nTo implement the same example in Dart, \nfirst, create the Weather enum:", "Then, define a simple view model (similar to what was created in SwiftUI), \nto fetch the weather. In Dart, a Future object represents a value to be\nprovided in the future. A Future is similar to Swift\u2019s ObservableObject. \nIn this example, a function within the view model\nreturns a Future<Weather> object:", "The load() function in this example shares \nsimilarities with the Swift code. \nThe Dart function is marked as async because\nit uses the await keyword.", "Additionally, a Dart function marked as async\nautomatically returns a Future.\nIn other words, you don\u2019t have to create a \nFuture instance manually \ninside functions marked as async.", "For the last step, display the weather value. \nIn Flutter, FutureBuilder and \nStreamBuilder\nwidgets are used to display the results of a Future in the UI. \nThe following example uses a FutureBuilder:", "For the complete example, check out the\nasync_weather file on GitHub.", "Flutter apps can run on a variety of multi-core hardware, \nincluding devices running macOS and iOS. \nTo improve the performance of these applications, \nyou must sometimes run tasks on different cores\nconcurrently. This is especially important \nto avoid blocking UI rendering with long-running operations.", "In Swift, you can leverage GCD to run tasks on global queues\nwith different quality of service class (qos) properties. \nThis indicates the task\u2019s priority.", "In Dart, you can offload computation to a worker isolate, \noften called a background worker. \nA common scenario spawns a simple worker isolate and \nreturns the results in a message when the worker exits. \nAs of Dart 2.19, you can use Isolate.run() to \nspawn an isolate and run computations:", "In Flutter, you can also use the compute function \nto spin up an isolate to run a callback function:", "In this case, the callback function is a top-level\nfunction as shown below:", "You can find more information on Dart at\nLearning Dart as a Swift developer,\nand more information on Flutter at\nFlutter for SwiftUI developers or\nFlutter for UIKit developers.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/dart-swift-concurrency", "base_url": "https://docs.flutter.dev/"}, {"title": "Create a horizontal list | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You might want to create a list that scrolls\nhorizontally rather than vertically.\nThe ListView widget supports horizontal lists.", "Use the standard ListView constructor, passing in a horizontal\nscrollDirection, which overrides the default vertical direction.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/horizontal-list", "base_url": "https://docs.flutter.dev/"}, {"title": "Creating responsive and adaptive apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "One of Flutter\u2019s primary goals is to create a framework\nthat allows you to develop apps from a single codebase\nthat look and feel great on any platform.", "This means that your app might appear on screens of\nmany different sizes, from a watch, to a foldable\nphone with two screens, to a high def monitor.", "Two terms that describe concepts for this\nscenario are adaptive and responsive. Ideally,\nyou\u2019d want your app to be both but what, \nexactly, does this mean?\nThese terms are similar, but they are not the same.", "Adaptive and responsive can be viewed as separate\ndimensions of an app: you can have an adaptive app\nthat is not responsive, or vice versa. And, of course,\nan app can be both, or neither.", "Flutter allows you to create apps that self-adapt\nto the device\u2019s screen size and orientation.", "There are two basic approaches to creating Flutter\napps with responsive design:", "Other useful widgets and classes for creating a responsive UI:", "For more information, here are a few resources,\nincluding contributions from the Flutter community:", "Learn more about creating an adaptive Flutter app with\nBuilding adaptive apps, written by the gskinner team.", "You might also check out the following episodes\nof The Boring Show:", "Adaptive layouts, part 2", "For an excellent example of an adaptive app,\ncheck out Flutter Folio, a scrapbooking app created \nin collaboration with gskinner and the Flutter team:", "The Folio source code is also available on GitHub.\nLearn more on the gskinner blog.", "You can learn more about creating platform adaptive apps\nin the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/responsive/adaptive-responsive", "base_url": "https://docs.flutter.dev/"}, {"title": "Hero animations | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You\u2019ve probably seen hero animations many times. For example, a screen displays\na list of thumbnails representing items for sale.  Selecting an item flies it to\na new screen, containing more details and a \u201cBuy\u201d button. Flying an image from\none screen to another is called a hero animation in Flutter, though the same\nmotion is sometimes referred to as a shared element transition.", "You might want to watch this one-minute video introducing the Hero widget:", "This guide demonstrates how to build standard hero animations, and hero\nanimations that transform the image from a circular shape to a square shape\nduring flight.", "Examples: This guide provides examples of each hero animation style at\n  the following links.", "New to Flutter?\n  This page assumes you know how to create a layout\n  using Flutter\u2019s widgets. For more information, see\n  Building Layouts in Flutter.", "Terminology:\n  A Route describes a page or screen in a Flutter app.", "You can create this animation in Flutter with Hero widgets.\nAs the hero animates from the source to the destination route,\nthe destination route (minus the hero) fades into view.\nTypically, heroes are small parts of the UI, like images,\nthat both routes have in common. From the user\u2019s perspective\nthe hero \u201cflies\u201d between the routes. This guide shows how\nto create the following hero animations:", "A standard hero animation flies the hero from one route to a new route,\nusually landing at a different location and with a different size.", "The following video (recorded at slow speed) shows a typical example.\nTapping the flippers in the center of the route flies them to the\nupper left corner of a new, blue route, at a smaller size.\nTapping the flippers in the blue route (or using the device\u2019s\nback-to-previous-route gesture) flies the flippers back to\nthe original route.", "In radial hero animation, as the hero flies between routes\nits shape appears to change from circular to rectangular.", "The following video (recorded at slow speed),\nshows an example of a radial hero animation. At the start, a\nrow of three circular images appears at the bottom of the route.\nTapping any of the circular images flies that image to a new route\nthat displays it with a square shape.\nTapping the square image flies the hero back to\nthe original route, displayed with a circular shape.", "Before moving to the sections specific to\nstandard\nor radial hero animations,\nread basic structure of a hero animation\nto learn how to structure hero animation code,\nand behind the scenes to understand\nhow Flutter performs a hero animation.", "Terminology:\n  If the concept of tweens or tweening is new to you,\n  see the Animations in Flutter tutorial.", "Hero animations are implemented using two Hero\nwidgets: one describing the widget in the source route,\nand another describing the widget in the destination route.\nFrom the user\u2019s point of view, the hero appears to be shared, and\nonly the programmer needs to understand this implementation detail.\nHero animation code has the following structure:", "Flutter calculates the tween that animates the Hero\u2019s bounds from\nthe starting point to the endpoint (interpolating size and position),\nand performs the animation in an overlay.", "The next section describes Flutter\u2019s process in greater detail.", "The following describes how Flutter performs the\ntransition from one route to another.", "Before transition, the source hero waits in the source\nroute\u2019s widget tree. The destination route does not yet exist,\nand the overlay is empty.", "Pushing a route to the Navigator triggers the animation.\nAt t=0.0, Flutter does the following:", "Calculates the destination hero\u2019s path, offscreen,\nusing the curved motion as described in the Material\nmotion spec. Flutter now knows where the hero ends up.", "Places the destination hero in the overlay,\nat the same location and size as the source hero.\nAdding a hero to the overlay changes its Z-order so that it\nappears on top of all routes.", "Moves the source hero offscreen.", "As the hero flies, its rectangular bounds are animated using\nTween<Rect>, specified in Hero\u2019s\ncreateRectTween property.\nBy default, Flutter uses an instance of\nMaterialRectArcTween, which animates the\nrectangle\u2019s opposing corners along a curved path.\n(See Radial hero animations for an example\nthat uses a different Tween animation.)", "When the flight completes:", "Flutter moves the hero widget from the overlay to\nthe destination route. The overlay is now empty.", "The destination hero appears in its final position\nin the destination route.", "The source hero is restored to its route.", "Popping the route performs the same process,\nanimating the hero back to its size\nand location in the source route.", "The examples in this guide use the following classes to\nimplement hero animations:", "Standard hero animation code", "Each of the following examples demonstrates flying an image from one\n  route to another. This guide describes the first example.", "Flying an image from one route to another is easy to implement\nusing Flutter\u2019s hero widget. When using MaterialPageRoute\nto specify the new route, the image flies along a curved path,\nas described by the Material Design motion spec.", "Create a new Flutter example and\nupdate it using the files from the hero_animation.", "To run the example:", "The custom PhotoHero class maintains the hero,\nand its size, image, and behavior when tapped.\nThe PhotoHero builds the following widget tree:", "The HeroAnimation class creates the source and destination\nPhotoHeroes, and sets up the transition.", "Flying a hero from one route to another as it transforms\nfrom a circular shape to a rectangular shape is a slick\neffect that you can implement using Hero widgets.\nTo accomplish this, the code animates the intersection of\ntwo clip shapes: a circle and a square.\nThroughout the animation, the circle clip (and the image)\nscales from minRadius to maxRadius, while the square\nclip maintains constant size. At the same time,\nthe image flies from its position in the source route to its\nposition in the destination route. For visual examples\nof this transition, see Radial transformation\nin the Material motion spec.", "This animation might seem complex (and it is), but you can customize the\nprovided example to your needs. The heavy lifting is done for you.", "Radial hero animation code", "Each of the following examples demonstrates a radial hero animation.\n  This guide describes the first example.", "Pro tip:\n  The radial hero animation involves intersecting a round shape with\n  a square shape. This can be hard to see, even when slowing\n  the animation with timeDilation, so you might consider enabling\n  the debugPaintSizeEnabled flag during development.", "The following diagram shows the clipped image at the beginning\n(t = 0.0), and the end (t = 1.0) of the animation.", "The blue gradient (representing the image), indicates where the clip\nshapes intersect. At the beginning of the transition,\nthe result of the intersection is a circular clip (ClipOval).\nDuring the transformation, the ClipOval scales from minRadius\nto maxRadius while the ClipRect maintains a constant size.\nAt the end of the transition the intersection of the circular and\nrectangular clips yield a rectangle that\u2019s the same size as the hero\nwidget. In other words, at the end of the transition the image is no\nlonger clipped.", "Create a new Flutter example and\nupdate it using the files from the\nradial_hero_animation GitHub directory.", "To run the example:", "The Photo class builds the widget tree that holds the image:", "The RadialExpansion widget, the core of the demo, builds the\nwidget tree that clips the image during the transition.\nThe clipped shape results from the intersection of a circular clip\n(that grows during flight),\nwith a rectangular clip (that remains a constant size throughout).", "To do this, it builds the following widget tree:", "The example defines the tweening interpolation using\nMaterialRectCenterArcTween.\nThe default flight path for a hero animation\ninterpolates the tweens using the corners of the heroes.\nThis approach affects the hero\u2019s aspect ratio during\nthe radial transformation, so the new flight path uses\nMaterialRectCenterArcTween to interpolate the tweens using the\ncenter point of each hero.", "The hero\u2019s flight path still follows an arc,\nbut the image\u2019s aspect ratio remains constant.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations/hero-animations", "base_url": "https://docs.flutter.dev/"}, {"title": "Persist data with SQLite | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  This guide uses the sqflite package.\n  This package only supports apps that run on macOS, iOS, or Android.", "If you are writing an app that needs to persist and query large amounts of data on\nthe local device, consider using a database instead of a local file or\nkey-value store. In general, databases provide faster inserts, updates,\nand queries compared to other local persistence solutions.", "Flutter apps can make use of the SQLite databases via the\nsqflite plugin available on pub.dev.\nThis recipe demonstrates the basics of using sqflite\nto insert, read, update, and remove data about various Dogs.", "If you are new to SQLite and SQL statements, review the\nSQLite Tutorial to learn the basics before\ncompleting this recipe.", "This recipe uses the following steps:", "To work with SQLite databases, import the sqflite and path packages.", "To add the packages as a dependency,\nrun flutter pub add:", "Make sure to import the packages in the file you\u2019ll be working in.", "Before creating the table to store information on Dogs, take a few moments to\ndefine the data that needs to be stored. For this example, define a Dog class\nthat contains three pieces of data:\nA unique id, the name, and the age of each dog.", "Before reading and writing data to the database, open a connection\nto the database. This involves two steps:", "info Note:\n  In order to use the keyword await, the code must be placed\n  inside an async function. You should place all the following\n  table functions inside void main() async {}.", "Next, create a table to store information about various Dogs.\nFor this example, create a table called dogs that defines the data\nthat can be stored. Each Dog contains an id, name, and age.\nTherefore, these are represented as three columns in the dogs table.", "For more information about the available Datatypes that can be stored in a\nSQLite database, see the official SQLite Datatypes documentation.", "Now that you have a database with a table suitable for storing information\nabout various dogs, it\u2019s time to read and write data.", "First, insert a Dog into the dogs table. This involves two steps:", "Now that a Dog is stored in the database, query the database\nfor a specific dog or a list of all dogs. This involves two steps:", "After inserting information into the database,\nyou might want to update that information at a later time.\nYou can do this by using the update()\nmethod from the sqflite library.", "This involves two steps:", "report_problem Warning:\n  Always use whereArgs to pass arguments to a where statement.\n  This helps safeguard against SQL injection attacks.", "Do not use string interpolation, such as where: \"id = ${dog.id}\"!", "In addition to inserting and updating information about Dogs,\nyou can also remove dogs from the database. To delete data,\nuse the delete() method from the sqflite library.", "In this section, create a function that takes an id and deletes the dog with\na matching id from the database. To make this work, you must provide a where\nclause to limit the records being deleted.", "To run the example:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/persistence/sqlite", "base_url": "https://docs.flutter.dev/"}, {"title": "Google APIs | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Google APIs package exposes dozens of Google\nservices that you can use from Dart projects.", "This page describes how to use APIs that interact with end-user data by using\nGoogle authentication.", "Examples of user-data APIs include\nCalendar,\nGmail, and\nYouTube.", "info \n  Note: The only APIs you should use directly from your Flutter\n  project are those that access user data via Google authentication.", "APIs that require\n  service accounts should\n  not be used directly from a Flutter application. Doing so requires shipping\n  service credentials as part of your application, which is not secure. To use\n  these APIs, we recommend creating an intermediate service.", "To use Google APIs, follow these steps.", "The documentation for package:googleapis lists\neach API as a separate Dart library \u2013\u00a0in a name_version format. Let\u2019s look at\nyoutube_v3\nas an example.", "Each library may provide many types, but there is one root class that ends in\nApi. For YouTube, it\u2019s\nYouTubeApi.", "Not only is the Api class the one you need to instantiate \u2013\u00a0see step 3 \u2013\u00a0but\nit also exposes the scopes that represent the permissions needed to use the API.\nLook under the\nConstants section\nof the YouTubeApi class and you\u2019ll see the available scopes. To request access\nto simply read (but not write) an end-users YouTube data, use the\nyoutubeReadonlyScope\nwhen authenticating the user.", "To use Google APIs you must have a Google account and a Google project. You also\nneed to enable your desired API.", "In this example, you\u2019d enable\nYouTube Data API v3.", "For details, see the\ngetting started instructions.", "Use the google_sign_in package to\nauthenticate users with their Google identity. You will have to configure signin\nfor each platform you want to support.", "When you instantiate the\nGoogleSignIn\nclass, you provide the desired scopes as discussed in the previous section.", "Follow the instructions provided by\npackage:google_sign_in to allow a user to\nauthenticate.", "Once authenticated, you must obtain an authenticated HTTP client.", "The\nextension_google_sign_in_as_googleapis_auth\npackage provides an\nextension method on\nGoogleSignIn:\nauthenticatedClient.", "You can listen to\nonCurrentUserChanged.\nWhen event value is not null, you can create an authenticated client.", "This Client instance\nincludes the necessary credentials when invoking Google API classes.", "Use the API to create the desired API type and call methods, for instance:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/google-apis", "base_url": "https://docs.flutter.dev/"}, {"title": "Custom drawing and graphics | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/design/graphics", "base_url": "https://docs.flutter.dev/"}, {"title": "Configuring the URL strategy on the web | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter web apps support two ways of configuring\nURL-based navigation on the web:", "To configure Flutter to use the path instead, use the\nusePathUrlStrategy function provided by the flutter_web_plugins library\nin the SDK:", "PathUrlStrategy uses the History API, which requires additional\nconfiguration for web servers.", "To configure your web server to support PathUrlStrategy, check your web server\u2019s\ndocumentation to rewrite requests to index.html.Check your web server\u2019s\ndocumentation for details on how to configure single-page apps.", "If you are using Firebase Hosting, choose the \u201cConfigure as a single-page app\u201d\noption when initializing your project. For more information see Firebase\u2019s\nConfigure rewrites documentation.", "The local dev server created by running flutter run -d chrome is configured to\nhandle any path gracefully and fallback to your app\u2019s index.html file.", "Update the <base href=\"/\"> tag in web/index.html\nto the path where your app is hosted.\nFor example, to host your Flutter app at\nmy_app.dev/flutter_app, change\nthis tag to <base href=\"/flutter_app/\">.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/navigation/url-strategies", "base_url": "https://docs.flutter.dev/"}, {"title": "Mock dependencies using Mockito | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Sometimes, unit tests might depend on classes that fetch data from live\nweb services or databases. This is inconvenient for a few reasons:", "Therefore, rather than relying on a live web service or database,\nyou can \u201cmock\u201d these dependencies. Mocks allow emulating a live\nweb service or database and return specific results depending\non the situation.", "Generally speaking, you can mock dependencies by creating an alternative\nimplementation of a class. Write these alternative implementations by\nhand or make use of the Mockito package as a shortcut.", "This recipe demonstrates the basics of mocking with the\nMockito package using the following steps:", "For more information, see the Mockito package documentation.", "To use the mockito package, add it to the\npubspec.yaml file along with the flutter_test dependency in the\ndev_dependencies section.", "This example also uses the http package,\nso define that dependency in the dependencies section.", "mockito: 5.0.0 supports Dart\u2019s null safety thanks to code generation.\nTo run the required code generation, add the build_runner dependency\nin the dev_dependencies section.", "To add the dependencies, run flutter pub add:", "In this example, unit test the fetchAlbum function from the\nFetch data from the internet recipe.\nTo test this function, make two changes:", "The function should now look like this:", "In your app code, you can provide an http.Client to the fetchAlbum method \ndirectly with fetchAlbum(http.Client()). http.Client() creates a default\nhttp.Client.", "Next, create a test file.", "Following the advice in the Introduction to unit testing recipe,\ncreate a file called fetch_album_test.dart in the root test folder.", "Add the annotation @GenerateMocks([http.Client]) to the main\nfunction to generate a MockClient class with mockito.", "The generated MockClient class implements the http.Client class.\nThis allows you to pass the MockClient to the fetchAlbum function,\nand return different http responses in each test.", "The generated mocks will be located in fetch_album_test.mocks.dart.\nImport this file to use them.", "Next, generate the mocks running the following command:", "The fetchAlbum() function does one of two things:", "Therefore, you want to test these two conditions.\nUse the MockClient class to return an \u201cOk\u201d response\nfor the success test, and an error response for the unsuccessful test.\nTest these conditions using the when() function provided by\nMockito:", "Now that you have a fetchAlbum() function with tests in place,\nrun the tests.", "You can also run tests inside your favorite editor by following the\ninstructions in the Introduction to unit testing recipe.", "In this example, you\u2019ve learned how to use Mockito to test functions or classes\nthat depend on web services or databases. This is only a short introduction to\nthe Mockito library and the concept of mocking. For more information,\nsee the documentation provided by the Mockito package.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/unit/mocking", "base_url": "https://docs.flutter.dev/"}, {"title": "Read and write files | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In some cases, you need to read and write files to disk.\nFor example, you might need to persist data across app launches,\nor download data from the internet and save it for later offline use.", "To save files to disk on mobile or desktop apps,\ncombine the path_provider plugin with the dart:io library.", "This recipe uses the following steps:", "To learn more, watch this Package of the Week video\non the path_provider package:", "info Note:\n  This recipe doesn\u2019t work with web apps at this time.\n  To follow the discussion on this issue,\n  check out flutter/flutter issue #45296.", "This example displays a counter. When the counter changes,\nwrite data on disk so you can read it again when the app loads.\nWhere should you store this data?", "The path_provider package\nprovides a platform-agnostic way to access commonly used locations on the\ndevice\u2019s file system. The plugin currently supports access to\ntwo file system locations:", "This example stores information in the documents directory.\nYou can find the path to the documents directory as follows:", "Once you know where to store the file, create a reference to the\nfile\u2019s full location. You can use the File\nclass from the dart:io library to achieve this.", "Now that you have a File to work with,\nuse it to read and write data.\nFirst, write some data to the file.\nThe counter is an integer, but is written to the\nfile as a string using the '$counter' syntax.", "Now that you have some data on disk, you can read it.\nOnce again, use the File class.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/persistence/reading-writing-files", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter widget index | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This is an alphabetical list of nearly every widget that is bundled with\nFlutter. You can also browse widgets by category.", "You might also want to check out our Widget of the Week video series\non the Flutter YouTube channel. Each short\nepisode features a different Flutter widget. For more video series, see\nour videos page.", "Widget of the Week playlist", "A widget that absorbs pointers during hit testing. When absorbing is true, this widget prevents its subtree from receiving pointer events by terminating hit testing...", "Alerts are urgent interruptions requiring acknowledgement that inform the user about a situation. The AlertDialog widget implements this component.", "A widget that aligns its child within itself and optionally sizes itself based on the child's size.", "Animated transition that moves the child's position over a given duration whenever the given alignment changes.", "A general-purpose widget for building animations. AnimatedBuilder is useful for more complex widgets that wish to include animation as part of a larger build function....", "A container that gradually changes its values over a period of time.", "A widget that cross-fades between two given children and animates itself between their sizes.", "Animated version of DefaultTextStyle which automatically transitions the default text style (the text style to apply to descendant Text widgets without explicit style) over a...", "A scrolling container that animates items when they are inserted or removed.", "The state for a scrolling container that animates items when they are inserted or removed.", "A widget that prevents the user from interacting with widgets behind itself.", "Animated version of Opacity which automatically transitions the child's opacity over a given duration whenever the given opacity changes.", "Animated version of PhysicalModel.", "Animated version of Positioned which automatically transitions the child's position over a given duration whenever the given position changes.", "Animated widget that automatically transitions its size over a given duration whenever the given child's size changes.", "A widget that rebuilds when the given Listenable changes value.", "Container that displays content and actions at the top of a screen.", "A toolbar that might contain other widgets such as a `TabBar` and a `FlexibleSpaceBar`.", "A widget that attempts to size the child to a specific aspect ratio.", "Asset bundles contain resources, such as images and strings, that can be used by an application. Access to these resources is asynchronous so that they...", "A widget for helping the user make a selection by entering some text and choosing from among a list of options.", "A widget that applies a filter to the existing painted content and then paints a child. This effect is relatively expensive, especially if the filter...", "Icon-like block that conveys dynamic content such as counts or status. It can include labels or numbers.", "Container that positions its child according to the child's baseline.", "Container that displays navigation and key actions at the bottom of a screen.", "Containers that anchor supplementary content to the bottom of the screen.", "Container that includes tools to explore and switch between top-level views in a single tap.", "Bottom sheets slide up from the bottom of the screen to reveal more content. You can call showBottomSheet() to implement a persistent bottom sheet or...", "A Material Design card. A card has slightly rounded corners and a shadow.", "Container for short, related pieces of content displayed in a box with rounded corners and a drop shadow.", "Alignment block that centers its child within itself.", "Checkboxes allow the user to select multiple options from a set. The Checkbox widget implements this component.", "Form control that app users can select or clear to select one or more options from a set. Select the option to enable it or...", "Small blocks that represent complex entities such as a contact.", "Small blocks that simplify entering information, making selections, filtering content, or triggering actions.", "Circular progress indicator that spins to indicate a busy application.", "A widget that clips its child using an oval.", "A widget that clips its child using a path.", "A widget that clips its child using a rectangle.", "Layout a list of child widgets in the vertical direction.", "Clickable blocks that start an action, such as sending an email, sharing a document, or liking a comment.", "A widget that imposes additional constraints on its child.", "A convenience widget that combines common painting, positioning, and sizing widgets.", "An iOS-style modal bottom action sheet to choose an option among many.", "An iOS-style activity indicator. Displays a circular 'spinner'.", "An iOS-style alert dialog.", "An iOS-style full-screen modal route that opens when the child is long-pressed. Used to display relevant actions for your content.", "An iOS-style date or date and time picker.", "A button typically used in a CupertinoAlertDialog.", "An iOS-style transition used for summoning fullscreen dialogs.", "Container that uses the iOS style to display a scrollable view.", "A block that uses the iOS style to create a row in a list.", "Container at the top of a screen that uses the iOS style. Many developers use this with `CupertinoPageScaffold`.", "Basic iOS style page layout structure. Positions a navigation bar and content on a background.", "Provides an iOS-style page transition animation.", "An iOS-style picker control. Used to select an item in a short list.", "Rounded rectangle surface that looks like an iOS popup surface, such as an alert dialog or action sheet.", "An iOS-style scrollbar that indicates which portion of a scrollable widget is currently visible.", "An iOS-style search field.", "An iOS-style segmented control. Used to select mutually exclusive options in a horizontal list.", "Used to select from a range of values.", "An iOS-13-style segmented control. Used to select mutually exclusive options in a horizontal list.", "An iOS-styled navigation bar with iOS-11-style large titles using slivers.", "An iOS-style switch. Used to toggle the on/off state of a single setting.", "An iOS-style bottom tab bar. Typically used with CupertinoTabScaffold.", "Tabbed iOS app structure. Positions a tab bar on top of tabs of content.", "Root content of a tab that supports parallel navigation between tabs. Typically used with CupertinoTabScaffold.", "An iOS-style text field.", "An iOS-style countdown timer picker.", "A widget that uses a delegate to size and position multiple children.", "A widget that provides a canvas on which to draw during the paint phase.", "A ScrollView that creates custom scroll effects using slivers.", "A widget that defers the layout of its single child to a delegate.", "Data tables display sets of raw data. They usually appear in desktop enterprise products. The DataTable widget implements this component.", "Date pickers use a dialog window to select a single date on mobile. Time pickers use a dialog to select a single time (in the...", "Calendar interface used to select a date or a range of dates.", "A widget that paints a Decoration either before or after its child paints.", "Animated version of a DecoratedBox that animates the different properties of its Decoration.", "The text style to apply to descendant Text widgets without explicit style.", "Hovering containers that prompt app users to provide more data or make a decision.", "A widget that can be dismissed by dragging in the indicated direction. Dragging or flinging this widget in the DismissDirection causes the child to slide...", "A one logical pixel thick horizontal line, with padding on either side.", "Thin line that groups content in lists and containers.", "A widget that receives data when a Draggable widget is dropped. When a draggable is dragged on top of a drag target, the drag target...", "A widget that can be dragged from to a DragTarget. When a draggable widget recognizes the start of a drag gesture, it displays a feedback...", "A container for a Scrollable that responds to drag gestures by resizing the scrollable until a limit is reached, and then scrolling.", "A Material Design panel that slides in horizontally from the edge of a Scaffold to show navigation links in an application.", "Shows the currently selected item and an arrow that opens a menu for selecting another item.", "A Material Design elevated button. A filled button whose material elevates when pressed.", "A widget that drops all the semantics of its descendants. This can be used to hide subwidgets that would otherwise be reported but that would...", "A widget that expands a child of a Row, Column, or Flex.", "Expansion panels contain creation flows and allow lightweight editing of an element. The ExpansionPanel widget implements this component.", "Clickable block that triggers an action. These wider blocks can fit a text label and provide a larger target area.", "Clickable block that triggers a key action. This block contains an icon and floats in the app interface to keep the key action within reach....", "Animates the opacity of a widget.", "Scales and positions its child within itself according to fit.", "A floating action button is a circular icon button that hovers over content to promote a primary action in the application. Floating action buttons are...", "A widget that implements the flow layout algorithm.", "The Flutter logo, in widget form. This widget respects the IconTheme.", "An optional container for grouping together multiple form field widgets (e.g. TextField widgets).", "A single form field. This widget maintains the current state of the form field, so that updates and validation errors are visually reflected in the...", "A widget that applies a translation expressed as a fraction of the box's size before painting its child.", "A widget that sizes its child to a fraction of the total available space. For more details about the layout algorithm, see RenderFractionallySizedOverflowBox.", "Widget that builds itself based on the latest snapshot of interaction with a Future.", "A widget that detects gestures. Attempts to recognize gestures that correspond to its non-null callbacks. If this widget has a child, it defers to that...", "A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout. The GridView widget implements this component.", "A widget that marks its child as being a candidate for hero animations.", "A Material Design icon.", "Clickable icons to prompt app users to take supplementary actions.", "An icon button is a picture printed on a Material widget that reacts to touches by filling with color (ink).", "A widget that is invisible during hit testing. When ignoring is true, this widget (and its subtree) is invisible to hit testing. It still consumes...", "A widget that displays an image.", "An abstract class for building widgets that animate changes to their properties.", "A Stack that shows a single child from a list of children.", "A widget that enables pan and zoom interactions with its child.", "A widget that sizes its child to the child's intrinsic height.", "A widget that sizes its child to the child's intrinsic width.", "Builds a widget tree that can depend on the parent widget's size.", "A box that limits its size only when it's unconstrained.", "A material design linear progress indicator, also known as a progress bar.", "Continuous, vertical indexes that display text or images.", "A widget that arranges its children sequentially along a given axis, forcing them to the dimension of the parent in the other axis.", "A single fixed-height row that typically contains some text as well as a leading or trailing icon.", "A scrollable, linear list of widgets. ListView is the most commonly used scrolling widget. It displays its children one after another in the scroll direction....", "Makes its child draggable starting from long press.", "A convenience widget that wraps a number of widgets that are commonly required for applications implementing Material Design.", "Establishes a subtree in which media queries resolve to the given data.", "Container that displays a list of choices on a temporary surface.", "A widget that merges the semantics of its descendants.", "Persistent container that enables switching between primary destinations in an app.", "Container that slides from the leading edge of the app to navigate to other sections in an app. The leading edge falls on the left...", "Persistent container on the leading edge of tablet and desktop screens to navigate to parts of an app. The leading edge falls on the left...", "A widget that manages a set of child widgets with a stack discipline. Many apps have a navigator near the top of their widget hierarchy...", "A scrolling view inside of which can be nested other scrolling views, with their scroll positions being intrinsically linked.", "A widget that listens for Notifications bubbling up the tree.", "A widget that lays the child out as if it was in the tree, but without painting anything, without making the child available for hit...", "A widget that makes its child partially transparent.", "A Material Design outlined button, essentially a TextButton with an outlined border.", "A widget that imposes different constraints on its child than it gets from its parent, possibly allowing the child to overflow the parent.", "A widget that insets its child by the given padding.", "A scrollable list that works page by page.", "A widget that draws a box that represents where other widgets will one day be added.", "Displays a menu when pressed and calls onSelected when the menu is dismissed because an item was selected.", "Animated version of Positioned which takes a specific Animation to transition the child's position from a start position to and end position over the lifetime...", "Vertical line that changes color as an ongoing process, such as loading an app or submitting a form, completes.", "Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs...", "Form control that app users can select or clear to select only one option from a set. Select the option to enable it or clear...", "A widget that displays a dart:ui.Image directly.", "A widget that calls a callback whenever the user presses or releases a key on a keyboard.", "A Material Design pull-to-refresh wrapper for scrollables.", "A list whose items the user can interactively reorder by dragging.", "The RichText widget displays text that uses multiple different styles. The text to display is described using a tree of TextSpan objects, each of which...", "A widget that rotates its child by a integral number of quarter turns.", "Animates the rotation of a widget.", "Layout a list of child widgets in the horizontal direction.", "Implements the basic Material Design visual layout structure. This class provides APIs for showing drawers, snack bars, and bottom sheets.", "Animates the scale of transformed widget.", "Controls how Scrollable widgets behave in a subtree.", "Scrollable implements the interaction model for a scrollable widget, including gesture recognition, but does not have an opinion about how the viewport, which actually displays...", "A Material Design scrollbar. A scrollbar indicates which portion of a Scrollable widget is actually visible.", "Single or multiple selected clickable blocks to help people select options, switch views, or sort elements.", "A widget that annotates the widget tree with a description of the meaning of the widgets. Used by accessibility tools, search engines, and other semantic...", "Simple dialogs can provide additional details or actions about a list item. For example they can display avatars icons clarifying subtext or orthogonal actions (such...", "A box in which a single widget can be scrolled. This widget is useful when you have a single box that will normally be entirely...", "Animates its own size and clips and aligns the child.", "A box with a specified size. If given a child, this widget forces its child to have a specific width and/or height (assuming values are...", "A widget that is a specific size but passes its original constraints through to its child, which will probably overflow.", "Animates the position of a widget relative to its normal position.", "Sliders let users select from a range of values by moving the slider thumb. ", "Form control that enables selecting a range of values.", "A material design app bar that integrates with a CustomScrollView.", "A delegate that supplies children for slivers using a builder callback.", "A delegate that supplies children for slivers using an explicit list.", "A sliver that places multiple box children with the same main axis extent in a linear array.", "A sliver that places multiple box children in a two dimensional arrangement.", "A sliver that places multiple box children in a linear array along the main axis.", "A sliver that applies padding on each side of another sliver.", "A sliver whose size varies when the sliver is scrolled to the edge of the viewport opposite the sliver's GrowthDirection.", "A sliver that contains a single box widget.", "A lightweight message with an optional action which briefly displays at the bottom of the screen.", "Brief messages about app processes that display at the bottom of the screen.", "This class is useful if you want to overlap several children in a simple way, for example having some text and an image, overlaid with...", "A Material Design stepper widget that displays progress through a sequence of steps.", "Widget that builds itself based on the latest snapshot of interaction with a Stream.", "On/off switches toggle the state of a single settings option. The Switch widget implements this component.", "Toggle control that changes the state of a single item to on or off.", "Layered containers that organize content across different screens, data sets, and other interactions.", "A Material Design widget that displays a horizontal row of tabs.", "A page view that displays the widget which corresponds to the currently selected tab. Typically used in conjunction with a TabBar.", "Coordinates tab selection between a TabBar and a TabBarView.", "Displays a row of small circular indicators, one per tab. The selected tab's indicator is highlighted. Often used in conjunction with a TabBarView.", "Displays child widgets in rows and columns.", "A run of text with a single style.", "Box into which app users can enter text. They appear in forms and dialogs.", "A Material Design text button. A simple flat button without a border outline.", "Touching a text field places the cursor and displays the keyboard. The TextField widget implements this component.", "Applies a theme to descendant widgets. A theme describes the colors and typographic choices of an application.", "Clock interface used to select and set a specific time.", "Tooltips provide text labels that help explain the function of a button or other user interface action. Wrap the button in a Tooltip widget to...", "A widget that applies a transformation before painting its child.", "A convenience class that wraps a number of widgets that are commonly required for an application.", "A widget that displays its children in multiple horizontal or vertical runs.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//reference/widgets", "base_url": "https://docs.flutter.dev/"}, {"title": "DevTools | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "DevTools is a suite of performance and debugging tools\nfor Dart and Flutter.", "Here are some of the things you can do with DevTools:", "We expect you to use DevTools in conjunction with\nyour existing IDE or command-line based development workflow.", "See the VS Code, Android Studio/IntelliJ, or\ncommand line pages for installation instructions.", "Question: My app looks janky or stutters.\n  How do I fix it?", "Answer: Performance issues can cause UI frames\n  to be janky and/or slow down some operations.", "For more information, check out the\nPerformance page.", "Question: I see a lot of garbage collection (GC) events occurring.\n  Is this a problem?", "Answer: Frequent GC events might display on\n  the DevTools > Memory > Memory chart. In most cases,\n  it\u2019s not a problem.", "If your app has frequent background activity with some idle time,\nFlutter might use that opportunity to collect the created objects\nwithout performance impact.", "Please give DevTools a try, provide feedback, and file issues\nin the DevTools issue tracker. Thanks!", "For more information on debugging and profiling\nFlutter apps, see the Debugging page and,\nin particular, its list of other resources.", "For more information on using DevTools with Dart command-line apps, see the \nDevTools documentation on dart.dev.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools", "base_url": "https://docs.flutter.dev/"}, {"title": "Building Windows apps with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page discusses considerations unique to building\nWindows apps with Flutter, including shell integration\nand distribution of Windows apps through the\nMicrosoft Store on Windows.", "The Windows programming interface combines traditional Win32 APIs,\nCOM interfaces and more modern Windows Runtime libraries.\nAs all these provide a C-based ABI,\nyou can call into the services provided by the operating\nsystem using Dart\u2019s Foreign Function Interface library (dart:ffi).\nFFI is designed to enable Dart programs to efficiently call into\nC libraries. It provides Flutter apps with the ability to allocate\nnative memory with malloc or calloc, support for pointers,\nstructs and callbacks, and ABI types like long and size_t.", "For more information about calling C libraries from Flutter,\nsee C interop using dart:ffi.", "In practice, while it is relatively straightforward to call\nbasic Win32 APIs from Dart in this way,\nit is easier to use a wrapper library that abstracts the\nintricacies of the COM programming model.\nThe win32 package provides a library\nfor accessing thousands of common Windows APIs,\nusing metadata provided by Microsoft for consistency and correctness.\nThe package also includes examples of\na variety of common use cases,\nsuch as WMI, disk management, shell integration,\nand system dialogs.", "A number of other packages build on this foundation,\nproviding idiomatic Dart access for the Windows registry,\ngamepad support, biometric storage,\ntaskbar integration, and serial port access, to name a few.", "More generally, many other packages support Windows,\nincluding common packages such as url_launcher, shared_preferences, file_selector, and path_provider.", "While you can use any visual style or theme you choose,\nincluding Material, some app authors might wish to build\nan app that matches the conventions of Microsoft\u2019s\nFluent design system. The fluent_ui package,\na Flutter Favorite, provides support for visuals\nand common controls that are commonly found in\nmodern Windows apps, including navigation views,\ncontent dialogs, flyouts, date\npickers, and tree view widgets.", "In addition, Microsoft offers fluentui_system_icons,\na package that provides easy access to thousands of\nFluent icons for use in your Flutter app.", "Lastly, the bitsdojo_window package provides support\nfor \u201cowner draw\u201d title bars, allowing you to replace\nthe standard Windows title bar with a custom one\nthat matches the rest of your app.", "When you create a Windows app, Flutter generates a\nsmall C++ application that hosts Flutter.\nThis \u201crunner app\u201d is responsible for creating and sizing a\ntraditional Win32 window, initializing the Flutter\nengine and any native plugins,\nand running the Windows message loop\n(passing relevant messages on to Flutter for further processing).", "You can, of course, make changes to this code to suit your needs,\nincluding modifying the app name and icon,\nand setting the window\u2019s initial size and location.\nThe relevant code is in main.cpp,\nwhere you will find code similar to the following:", "Replace myapp with the title you would like displayed in the\nWindows caption bar, as well as optionally adjusting the\ndimensions for size and the window coordinates.", "To change the Windows application icon, replace the\napp_icon.ico file in the windows\\runner\\resources\ndirectory with an icon of your preference.", "The generated Windows executable filename can be changed\nby editing the BINARY_NAME variable in windows/CMakeLists.txt:", "When you run flutter build windows,\nthe executable file generated in the\nbuild\\windows\\runner\\Release directory\nwill match the newly given name.", "Finally, further properties for the app executable\nitself can be found in the Runner.rc file in the\nwindows\\runner directory. Here you can change the\ncopyright information and application version that\nis embedded in the Windows app, which is displayed\nin the Windows Explorer properties dialog box.\nTo change the version number, edit the VERSION_AS_NUMBER\nand VERSION_AS_STRING properties;\nother information can be edited in the StringFileInfo block.", "For most apps, it\u2019s sufficient to allow Flutter to\nhandle the compilation process using the flutter run\nand flutter build commands. If you are making significant\nchanges to the runner app or integrating Flutter into an existing app,\nyou might want to load or compile the Flutter app in Visual Studio itself.", "Run flutter build windows to create the build\\ directory.", "Open the Visual Studio solution file for the Windows runner,\nwhich can now be found in the build\\windows directory,\nnamed according to the parent Flutter app.", "In Solution Explorer, you will see a number of projects.\nRight-click the one that has the same name as the Flutter app,\nand choose Set as Startup Project.", "To generate the necessary dependencies,\nrun Build > Build Solution", "You can also press/\nCtrl + Shift + B.", "To run the Windows app from Visual Studio, go to Debug > Start Debugging.", "You can also press F5.", "Use the toolbar to switch between Debug and Release\nconfigurations as appropriate.", "There are various approaches you can use for\ndistributing your Windows application.\nHere are some options:", "MSIX, the new Windows application package format,\nprovides a modern packaging format and installer.\nThis format can either be used to ship applications\nto the Microsoft Store on Windows, or you can\ndistribute app installers directly.", "The easiest way to create an MSIX distribution\nfor a Flutter project is to use the\nmsix pub package.\nFor an example of using the msix package\nfrom a Flutter desktop app,\nsee the Desktop Photo Search sample.", "For private deployment and testing with the help\nof the MSIX installer, you need to give your application a\ndigital signature in the form of a .pfx certificate.", "For deployment through the Windows Store,\ngenerating a .pfx certificate is not required.\nThe Windows Store handles creation and management\nof certificates for applications\ndistributed through its store.", "Distributing your application by self hosting it on a\nwebsite requires a certificate signed by a\nCertificate Authority known to Windows.", "Use the following instructions to generate a\nself-signed .pfx certificate.", "The Flutter executable, .exe, can be found in your\nproject under build\\windows\\runner\\<build mode>\\.\nIn addition to that executable, you need the following:", "Place the DLL files in the directory next to the executable\nand the other DLLs, and bundle them together in a zip file.\nThe resulting structure looks something like this:", "At this point if desired it would be relatively simple to\nadd this folder to a Windows installer such as Inno Setup, WiX, etc.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/windows/building", "base_url": "https://docs.flutter.dev/"}, {"title": "Continuous delivery with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Follow continuous delivery best practices with Flutter to make sure your\napplication is delivered to your beta testers and validated on a frequent basis\nwithout resorting to manual workflows.", "There are a number of continuous integration (CI) and continuous delivery (CD)\noptions available to help automate the delivery of your application.", "You can use fastlane with the following tooling:", "This guide shows how to set up fastlane and then integrate it with \nyour existing testing and continuous integration (CI) workflows. \nFor more information, see \u201cIntegrating fastlane with existing workflow\u201d.", "fastlane is an open-source tool suite to automate releases and deployments \nfor your app.", "It\u2019s recommended that you test the build and deployment process locally before\nmigrating to a cloud-based system. You could also choose to perform continuous\ndelivery from a local machine.", " On iOS, follow the\nfastlane iOS beta deployment guide.\nYou can specify the archive path to avoid rebuilding the project. For example:", "You\u2019re now ready to perform deployments locally or migrate the deployment\nprocess to a continuous integration (CI) system.", "First, follow the local setup section described in \u2018Local setup\u2019 to make sure\nthe process works before migrating onto a cloud system like Travis.", "The main thing to consider is that since cloud instances are ephemeral and\nuntrusted, you won\u2019t be leaving your credentials like your Play Store service\naccount JSON or your iTunes distribution certificate on the server.", "Continuous Integration (CI) systems generally support encrypted environment \nvariables to store private data. You can pass these environment variables \nusing --dart-define MY_VAR=MY_VALUE while building the app.", "Take precaution not to re-echo those variable values back onto the console in\nyour test scripts. Those variables are also not available in pull requests\nuntil they\u2019re merged to ensure that malicious actors cannot create a pull\nrequest that prints these secrets out. Be careful with interactions with these\nsecrets in pull requests that you accept and merge.", "Xcode Cloud is a continuous integration and delivery service for building,\ntesting, and distributing apps and frameworks for Apple platforms.", "Xcode Cloud recognizes custom build scripts that can be \nused to perform additional tasks at a designated time. It also includes a set\nof predefined environment variables, such as $CI_WORKSPACE, which is the\nlocation of your cloned repository.", "info Note:\n  The temporary build environment that Xcode Cloud uses includes tools that are\n  part of macOS and Xcode\u2014for example, Python\u2014and additionally Homebrew to\n  support installing third-party dependencies and tools.", "Leverage the post-clone custom build script that runs after\nXcode Cloud clones your Git repository using the following instructions:", "Create a file at ios/ci_scripts/ci_post_clone.sh and add the content below.", "This file should be added to your git repository and marked as executable.", "An Xcode Cloud workflow defines the steps performed in the CI/CD process\nwhen your workflow is triggered.", "info Note:\n  This requires that your project is already initialized with Git\n  and linked to a remote repository.", "To create a new workflow in Xcode, use the following instructions:", "Choose Product > Xcode Cloud > Create Workflow to open the\nCreate Workflow sheet.", "Select the product (app) that the workflow should be attached to, then click\nthe Next button.", "The next sheet displays an overview of the default workflow provided by Xcode,\n and can be customized by clicking the Edit Workflow button.", "By default Xcode suggests the Branch Changes condition that starts a new build\nfor every change to your Git repository\u2019s default branch.", "For your app\u2019s iOS variant, it\u2019s reasonable that you would want Xcode Cloud to\ntrigger your workflow after you\u2019ve made changes to your flutter packages, or\nmodified either the Dart or iOS source files within the lib\\ and ios\\\ndirectories.", "This can be achieved by using the following Files and Folders conditions:", "Xcode Cloud defaults the build number for new workflows to 1 and increments\nit per successful build. If you\u2019re using an existing app with a higher build\nnumber, you\u2019ll need to configure Xcode Cloud to use the correct build number\nfor it\u2019s builds by simply specifying the Next Build Number in your iteration.", "Check out Setting the next build number for Xcode Cloud builds for more\ninformation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/cd", "base_url": "https://docs.flutter.dev/"}, {"title": "Performance FAQ | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page collects some frequently asked questions\nabout evaluating and debugging Flutter\u2019s performance.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/faq", "base_url": "https://docs.flutter.dev/"}, {"title": "FAQ | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page collects some common questions asked about\nFlutter. You might also check out the following\nspecialized FAQs:", "Flutter is Google\u2019s portable UI toolkit for crafting beautiful,\nnatively compiled applications for mobile, web,\nand desktop from a single codebase.\nFlutter works with existing code,\nis used by developers and organizations around\nthe world, and is free and open source.", "For users, Flutter makes beautiful apps come to life.", "For developers, Flutter lowers the bar to entry for building apps.\nIt speeds app development and reduces the cost and complexity\nof app production across platforms.", "For designers, Flutter provides a canvas for\nhigh-end user experiences. Fast Company described\nFlutter as one of the top design ideas of the decade for\nits ability to turn concepts into production code\nwithout the compromises imposed by typical frameworks.\nIt also acts as a productive prototyping tool\nwith drag-and-drop tools like FlutterFlow\nand web-based IDEs like Zapp!.", "For engineering managers and businesses,\nFlutter allows the unification of app\ndevelopers into a single mobile, web,\nand desktop app team, building branded\napps for multiple platforms out of a single codebase.\nFlutter speeds feature development and synchronizes\nrelease schedules across the entire customer base.", "Flutter is approachable to programmers familiar with\nobject-oriented concepts (classes, methods, variables,\netc) and imperative programming concepts (loops,\nconditionals, etc).", "We have seen people with very little programming\nexperience learn and use Flutter for prototyping\nand app development.", "Flutter is designed to support mobile apps that run\non both Android and iOS, as well as interactive apps\nthat you want to run on your web pages or on the desktop.", "Apps that need to deliver highly branded designs\nare particularly well suited for Flutter.\nHowever, you can also create pixel-perfect experiences\nthat match the Android and iOS design languages with Flutter.", "Flutter\u2019s package ecosystem supports a wide\nvariety of hardware (such as camera, GPS, network,\nand storage) and services (such as payments, cloud\nstorage, authentication, and ads).", "Flutter is an open source project,\nwith contributions from Google and other\ncompanies and individuals.", "Developers inside and outside of Google use\nFlutter to build beautiful natively-compiled\napps for iOS and Android. To learn about some\nof these apps, visit the showcase.", "Flutter is different than most other options\nfor building mobile apps because it doesn\u2019t rely\non web browser technology nor the set of widgets\nthat ship with each device. Instead, Flutter uses\nits own high-performance rendering engine to draw widgets.", "In addition, Flutter is different because it only\nhas a thin layer of C/C++ code. Flutter implements\nmost of its system (compositing, gestures, animation,\nframework, widgets, etc) in Dart (a modern,\nconcise, object-oriented language) that developers\ncan easily approach read, change, replace, or remove.\nThis gives developers tremendous control over the system,\nas well as significantly lowers the bar to approachability\nfor the majority of the system.", "Flutter 1 was launched on Dec 4th, 2018,\nFlutter 2 on March 3rd, 2021, and\nFlutter 3 on May 10th, 2023.\nAs of May 2023, over one million apps have shipped using\nFlutter to many hundreds of millions of devices.\nCheck out some sample apps in the showcase.", "Flutter ships updates on a roughly-quarterly\ncadence that improve stability and performance\nand address commonly-requested user features.", "We provide plugins for VS Code,\nAndroid Studio, and IntelliJ IDEA.\nSee editor configuration for setup details,\nand VS Code and Android Studio/IntelliJ\nfor tips on how to use the plugins.", "Alternatively, you can use the flutter command\nfrom a terminal, along with one\nof the many editors that support editing Dart.", "Yes! Flutter ships with a modern react-style framework.\nFlutter\u2019s framework is designed to be layered and\ncustomizable (and optional). Developers can choose to\nuse only parts of the framework, or even replace\nupper layers of the framework entirely.", "Yes! Flutter ships with a set of\nhigh-quality Material Design and Cupertino\n(iOS-style) widgets, layouts, and themes.\nOf course, these widgets are only a starting point.\nFlutter is designed to make it easy to create your own\nwidgets, or customize the existing widgets.", "Yes! The Flutter and Material teams collaborate closely,\nand Material is fully supported. For more information,\ncheck out the Material 2 and Material 3 widgets\nin the widget catalog.", "Yes, Flutter provides APIs for writing unit and\nintegration tests. Learn more about testing with Flutter.", "We use our own testing capabilities to test our SDK,\nand we measure our test coverage on every commit.", "Yes, Flutter comes with Flutter DevTools (also\ncalled Dart DevTools). For more information, see\nDebugging with Flutter and the Flutter DevTools docs.", "We don\u2019t ship with an opinionated solution,\nbut there are a variety of packages that offer\ndependency injection and service location,\nsuch as injectable, get_it, kiwi, and riverpod.", "Flutter is built with C, C++, Dart,\nSkia (a 2D rendering engine),\nand Impeller (the default rendering engine on iOS).\nSee this architecture diagram\nfor a better picture of the main components.\nFor a more detailed description of the layered architecture\nof Flutter, read the architectural overview.", "The engine\u2019s C and C++ code are compiled with Android\u2019s NDK.\nThe Dart code (both the SDK\u2019s and yours)\nare ahead-of-time (AOT) compiled into native, ARM, and x86\nlibraries. Those libraries are included in a \u201crunner\u201d\nAndroid project, and the whole thing is built into an .apk.\nWhen launched, the app loads the Flutter library.\nAny rendering, input, or event handling, and so on,\nis delegated to the compiled Flutter and app code.\nThis is similar to the way many game engines work.", "During debug mode, Flutter uses a virtual machine (VM)\nto run its code in order to enable stateful hot reload,\na feature that lets you make changes to your running code\nwithout recompilation. You\u2019ll see a \u201cdebug\u201d banner in\nthe top right-hand corner of your app when running in this mode,\nto remind you that performance is not characteristic of\nthe finished release app.", "The engine\u2019s C and C++ code are compiled with LLVM.\nThe Dart code (both the SDK\u2019s and yours)\nare ahead-of-time (AOT) compiled into a native, ARM library.\nThat library is included in a \u201crunner\u201d iOS project,\nand the whole thing is built into an .ipa.\nWhen launched, the app loads the Flutter library.\nAny rendering, input or event handling, and so on,\nare delegated to the compiled Flutter and app code.\nThis is similar to the way many game engines work.", "During debug mode, Flutter uses a virtual machine (VM)\nto run its code in order to enable stateful hot reload,\na feature that lets you make changes to your\nrunning code without recompilation. You\u2019ll see\na \u201cdebug\u201d banner in the top right-hand corner of\nyour app when running in this mode, to remind you that\nperformance is not characteristic of the finished release app.", "No. Instead, Flutter provides a set of widgets\n(including Material Design and Cupertino (iOS-styled) widgets),\nmanaged and rendered by Flutter\u2019s framework and engine.\nYou can browse a catalog of Flutter\u2019s widgets.", "We believe that the end result is higher quality apps.\nIf we reused the built-in platform widgets,\nthe quality and performance of Flutter apps would be limited\nby the flexibility and quality of those widgets.", "In Android, for example, there\u2019s a hard-coded set\nof gestures and fixed rules for disambiguating them.\nIn Flutter, you can write your own gesture recognizer\nthat is a first class participant in the gesture system.\nMoreover, two widgets authored by different people can\ncoordinate to disambiguate gestures.", "Modern app design trends point towards designers and\nusers wanting more motion-rich UIs and brand-first designs.\nIn order to achieve that level of customized, beautiful design,\nFlutter is architectured to drive pixels instead\nof the built-in widgets.", "By using the same renderer, framework, and set of widgets,\nit\u2019s easier to publish for multiple platforms from the same\ncodebase, without having to do careful and costly planning\nto align different feature sets and API characteristics.", "By using a single language, a single framework,\nand a single set of libraries for all of your code\n(regardless if your UI is different for each platform or not),\nwe also aim to help lower app development and maintenance costs.", "The Flutter team watches the adoption and demand for new mobile\nwidgets from iOS and Android, and aims to work with the community\nto build support for new widgets. This work might come in the form\nof lower-level framework features, new composable widgets,\nor new widget implementations.", "Flutter\u2019s layered architecture is designed to support numerous\nwidget libraries, and we encourage and support the community in\nbuilding and maintaining widget libraries.", "Flutter\u2019s interop and plugin system is designed to allow\ndevelopers to access new mobile OS features and capabilities\nimmediately. Developers don\u2019t have to wait for the Flutter team\nto expose the new mobile OS capability.", "Flutter supports development using Linux, macOS, ChromeOS,\nand Windows.", "Dart, a fast-growing modern language optimized\nfor client apps. The underlying graphics framework\nand the Dart virtual machine are implemented in C/C++.", "During the initial development phase,\nthe Flutter team looked at a lot of\nlanguages and runtimes, and ultimately\nadopted Dart for the framework and widgets.\nFlutter used four primary dimensions for evaluation,\nand considered the needs of framework authors,\ndevelopers, and end users. We found many languages\nmet some requirements, but Dart scored highly on\nall of our evaluation dimensions and met all our\nrequirements and criteria.", "Dart runtimes and compilers support the combination of\ntwo critical features for Flutter: a JIT-based fast\ndevelopment cycle that allows for shape changing and\nstateful hot reloads in a language with types,\nplus an Ahead-of-Time compiler that emits efficient\nARM code for fast startup and predictable performance of\nproduction deployments.", "In addition, we have the opportunity to work closely\nwith the Dart community, which is actively investing\nresources in improving Dart for use in Flutter. For\nexample, when we adopted Dart,\nthe language didn\u2019t have an ahead-of-time\ntoolchain for producing native binaries,\nwhich is instrumental in achieving predictable,\nhigh performance, but now the language does because the Dart team\nbuilt it for Flutter. Similarly, the Dart VM has\npreviously been optimized for throughput but the\nteam is now optimizing the VM for latency, which is more\nimportant for Flutter\u2019s workload.", "Dart scores highly for us on the following primary criteria:", "Flutter can run Dart code that doesn\u2019t directly or\ntransitively import dart:mirrors or dart:html.", "In March 2021, we measured the download size of a\nminimal Flutter app (no Material Components,\njust a single Center widget, built with flutter build\napk --split-per-abi), bundled and compressed as a release APK,\nto be approximately 4.3 MB for ARM32, and 4.8 MB for ARM64.", "On ARM32, the core engine is approximately 3.4 MB\n(compressed), the framework + app code is approximately\n765 KB (compressed), the LICENSE file is 58 KB\n(compressed), and necessary Java code (classes.dex)\nis 120 KB (compressed).", "In ARM64, the core engine is approximately 4.0 MB \n(compressed), the framework + app code is approximately\n659 KB (compressed), the LICENSE file is 58 KB\n(compressed), and necessary Java code (classes.dex)\nis 120 KB (compressed).", "These numbers were measured using apkanalyzer,\nwhich is also built into Android Studio.", "On iOS, a release IPA of the same app has a download\nsize of 10.9 MB on an iPhone X, as reported by Apple\u2019s\nApp Store Connect. The IPA is larger than the APK mainly\nbecause Apple encrypts binaries within the IPA, making the\ncompression less efficient (see the\niOS App Store Specific Considerations\nsection of Apple\u2019s QA1795).", "info Note:\n  The release engine binary used to include LLVM IR (bitcode).\n  However, Apple deprecated bitcode in Xcode 14 and removed support,\n  so it has been removed from the Flutter 3.7 release.", "Of course, we recommend that you measure your own app.\nTo do that, see Measuring your app\u2019s size.", "Flutter uses logical pixels,\nand often refers to them merely as \u201cpixels\u201d.\nFlutter\u2019s devicePixelRatio expresses the ratio\nbetween physical pixels and logical CSS pixels.", "You can expect excellent performance. Flutter is\ndesigned to help developers easily achieve a constant 60fps.\nFlutter apps run using natively compiled code\u2014no\ninterpreters are involved.\nThis means that Flutter apps start quickly.", "Flutter implements a hot reload developer cycle. You can expect\nsub-second reload times, on a device or an emulator/simulator.", "Flutter\u2019s hot reload is stateful so the app state\nis retained after a reload. This means you can quickly iterate\non a screen deeply nested in your app, without starting\nfrom the home screen after every reload.", "Hot reload works by injecting updated source code files\ninto the running Dart VM (Virtual Machine). This doesn\u2019t\nonly add new classes, but also adds methods and fields\nto existing classes, and changes existing functions.\nHot restart resets the state to the app\u2019s initial state.", "For more information, see Hot reload.", "You can compile and deploy your Flutter app to iOS, Android,\nweb, and desktop.", "We support and test running Flutter on a variety\nof low-end to high-end platforms.  For a detailed list\nof the platforms on which we test, see \nthe list of supported platforms.", "Flutter supports building ahead-of-time (AOT) compiled libraries\nfor x86_64, armeabi-v7a, and arm64-v8a.", "Apps built for ARMv7 or ARM64 run fine (using ARM emulation)\non many x86 Android devices.", "We support developing Flutter apps on a range of platforms.\nSee the system requirements listed under each\ndevelopment operating system.", "Yes, web support is available in the stable channel.\nFor more details, check out the web instructions.", "Yes, desktop support is in stable for Windows,\nmacOS, and Linux.", "Yes, learn more in the add-to-app section of our website.", "Yes. Flutter gives developers out-of-the-box access to some\nplatform-specific services and APIs from the operating system.\nHowever, we want to avoid the \u201clowest common denominator\u201d problem\nwith most cross-platform APIs, so we don\u2019t intend to build\ncross-platform APIs for all native services and APIs.", "A number of platform services and APIs have\nready-made packages available on pub.dev.\nUsing an existing package is easy.", "Finally, we encourage developers to use Flutter\u2019s\nasynchronous message passing system to create your\nown integrations with platform and third-party APIs.\nDevelopers can expose as much or as little of the\nplatform APIs as they need, and build layers of\nabstractions that are a best fit for their project.", "Absolutely. Flutter\u2019s widget system was designed\nto be easily customizable.", "Rather than having each widget provide a large number of parameters,\nFlutter embraces composition. Widgets are built out of smaller\nwidgets that you can reuse and combine in novel ways to make\ncustom widgets. For example, rather than subclassing a generic\nbutton widget, ElevatedButton combines a Material widget with a\nGestureDetector widget. The Material widget provides the visual\ndesign and the GestureDetector widget provides the\ninteraction design.", "To create a button with a custom visual design, you can combine\nwidgets that implement your visual design with a GestureDetector,\nwhich provides the interaction design. For example,\nCupertinoButton follows this approach and combines a\nGestureDetector with several other widgets that implement its\nvisual design.", "Composition gives you maximum control over the visual and\ninteraction design of your widgets while also allowing a\nlarge amount of code reuse. In the framework, we\u2019ve decomposed\ncomplex widgets to pieces that separately implement\nthe visual, interaction, and motion design. You can remix\nthese widgets however you like to make your own custom\nwidgets that have full range of expression.", "You can choose to implement different app layouts for\niOS and Android. Developers are free to check the mobile OS\nat runtime and render different layouts,\nthough we find this practice to be rare.", "More and more, we see mobile app layouts and designs evolving\nto be more brand-driven and unified across platforms.\nThis implies a strong motivation to share layout and UI\ncode across iOS and Android.", "The brand identity and customization of the app\u2019s\naesthetic design is now becoming more important than\nstrictly adhering to traditional platform aesthetics.\nFor example, app designs often require custom fonts, colors,\nshapes, motion, and more in order to clearly convey their\nbrand identity.", "We also see common layout patterns deployed across\niOS and Android. For example, the \u201cbottom nav bar\u201d\npattern can now be naturally found across iOS and Android.\nThere seems to be a convergence of design ideas\nacross mobile platforms.", "Yes, Flutter supports calling into the platform,\nincluding integrating with Java or Kotlin code on Android,\nand ObjectiveC or Swift code on iOS.\nThis is enabled by a flexible message passing style\nwhere a Flutter app might send and receive messages\nto the mobile platform using a BasicMessageChannel.", "Learn more about accessing platform and third-party services\nin Flutter with platform channels.", "Here is an example project that shows how to use a\nplatform channel to access battery state information on\niOS and Android.", "No. Dart includes dart:mirrors,\nwhich provides type reflection. But since\nFlutter apps are pre-compiled for production,\nand binary size is always a concern with mobile apps,\nthis library is unavailable for Flutter apps.", "Using static analysis we can strip out anything that isn\u2019t\nused (\u201ctree shaking\u201d). If you import a huge Dart library\nbut only use a self-contained two-line method,\nthen you only pay the cost of the two-line method,\neven if that Dart library itself imports dozens and\ndozens of other libraries. This guarantee is only secure\nif Dart can identify the code path at compile time.\nTo date, we\u2019ve found other approaches for specific needs\nthat offer a better trade-off, such as code generation.", "Learn more about i18n and l10n in the\ninternationalization tutorial.", "Learn more about a11y in the\naccessibility documentation.", "Flutter supports isolates. Isolates are separate heaps in\nFlutter\u2019s VM, and they are able to run in parallel\n(usually implemented as separate threads). Isolates\ncommunicate by sending and receiving asynchronous messages.", "Check out an example of using isolates with Flutter.", "Yes, you can run Dart code in a background process on both\niOS and Android. For more information, see the free Medium article\nExecuting Dart in the Background with Flutter Plugins and Geofencing.", "Absolutely. There are libraries on\npub.dev for JSON, XML, protobufs,\nand many other utilities and formats.", "For a detailed writeup on using JSON with Flutter,\ncheck out the JSON tutorial.", "Today we don\u2019t support 3D using OpenGL ES or similar.\nWe have long-term plans to expose an optimized 3D API,\nbut right now we\u2019re focused on 2D.", "Usually, assets including images, sound files, fonts, and so on,\nare the bulk of an APK or IPA. Various tools in the\nAndroid and iOS ecosystems can help you understand\nwhat\u2019s inside of your APK or IPA.", "Also, be sure to create a release build\nof your APK or IPA with the Flutter tools.\nA release build is usually much smaller\nthan a debug build.", "Learn more about creating a\nrelease build of your Android app,\nand creating a release build of your iOS app.\nAlso, check out Measuring your app\u2019s size.", "We have seen Flutter apps run on some Chromebooks.\nWe are tracking issues related to running Flutter on\nChromebooks.", "Flutter and Dart don\u2019t offer application binary interface (ABI)\ncompatibility. Offering ABI compatability is not a current\ngoal for Flutter or Dart.", "Putting a Widget build(BuildContext context) method on State\nrather putting a Widget build(BuildContext context, State state)\nmethod on StatefulWidget gives developers more flexibility when\nsubclassing StatefulWidget. You can read a more\ndetailed discussion on the API docs for State.build.", "Flutter UIs are built with an imperative, object-oriented\nlanguage (Dart, the same language used to build Flutter\u2019s\nframework). Flutter doesn\u2019t ship with a declarative markup.", "We found that UIs dynamically built with code allow for\nmore flexibility. For example, we have found it difficult\nfor a rigid markup system to express and produce\ncustomized widgets with bespoke behaviors.", "We have also found that our \u201ccode-first\u201d approach better allows\nfor features like hot reload and dynamic environment adaptations.", "It\u2019s possible to create a custom language that is then\nconverted to widgets on the fly. Because build methods\nare \u201cjust code\u201d, they can do anything,\nincluding interpreting markup and turning it into widgets.", "By default, the flutter run command uses the\ndebug build configuration.", "The debug configuration runs your Dart code in a VM (Virtual Machine)\nenabling a fast development cycle with hot reload\n(release builds are compiled using the standard Android\nand iOS toolchains).", "The debug configuration also checks all asserts, which helps\nyou catch errors early during development, but imposes a\nruntime cost. The \u201cDebug\u201d banner indicates that these checks\nare enabled. You can run your app without these checks by\nusing either the --profile or --release flag to flutter run.", "If your IDE uses the Flutter plugin,\nyou can launch the app in profile or release mode.\nFor VS Code, use the Run > Start debugging\nor Run > Run without debugging menu entries.\nFor IntelliJ, use the menu entries\nRun > Flutter Run in Profile Mode or Release Mode.", "Flutter is a multi-paradigm programming environment.\nMany programming techniques developed over the past few decades\nare used in Flutter. We use each one where we believe\nthe strengths of the technique make it particularly well-suited.\nIn no particular order:", "If you think you\u2019ve encountered a bug, file it in our\nissue tracker. You might also use\nStack Overflow for \u201cHOWTO\u201d type questions.\nFor discussions, join our mailing list at\nflutter-dev@googlegroups.com or seek us out on Discord.", "For more information, see our Community page.", "Flutter is open source, and we encourage you to contribute.\nYou can start by simply filing issues for feature requests\nand bugs in our issue tracker.", "We recommend that you join our mailing list at\nflutter-dev@googlegroups.com and let us know how you\u2019re\nusing Flutter and what you\u2019d like to do with it.", "If you\u2019re interested in contributing code, you can start\nby reading our Contributing guide, and check out our\nlist of easy starter issues.", "Finally, you can connect with helpful Flutter communities.\nFor more information, see the Community page.", "Yes, Flutter is open source technology.\nYou can find the project on GitHub.", "Flutter includes two components: an engine that ships as a\ndynamically linked binary, and the Dart framework as a separate\nbinary that the engine loads. The engine uses multiple software\ncomponents with many dependencies; view the complete list\nin its license file.", "The framework is entirely self-contained and requires\nonly one license.", "In addition, any Dart packages you use might have their\nown license requirements.", "There\u2019s an API to find the list of licenses you need to show:", "If your application has a Drawer, add an\nAboutListTile.", "If your application doesn\u2019t have a Drawer but does use the\nMaterial Components library, call either showAboutDialog\nor showLicensePage.", "For a more custom approach, you can get the raw licenses from the\nLicenseRegistry.", "We all do! Flutter is an open source project.\nCurrently, the bulk of the development is done\nby engineers at Google. If you\u2019re excited about Flutter,\nwe encourage you to join the community and\ncontribute to Flutter!", "We believe the following:", "We are focused on three things:", "We can\u2019t speak for Apple, but their App Store contains\nmany apps built with framework technologies such as Flutter.\nIndeed, Flutter uses the same fundamental architectural\nmodel as Unity, the engine that powers many of the\nmost popular games on the Apple store.", "Apple has frequently featured well-designed apps\nthat are built with Flutter,\nincluding Hamilton and Reflectly.", "As with any app submitted to the Apple store,\napps built with Flutter should follow Apple\u2019s\nguidelines for App Store submission.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/faq", "base_url": "https://docs.flutter.dev/"}, {"title": "Using slivers to achieve fancy scrolling | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "A sliver is a portion of a scrollable area that you\ncan define to behave in a special way.\nYou can use slivers to achieve custom scrolling effects,\nsuch as elastic scrolling.", "For a free, instructor-led video workshop that uses DartPad,\ncheck out the following video about using slivers:", "For more information on implementing fancy scrolling effects\nin Flutter, see the following resources:", "A free article on Medium that\n    explains how to implement custom scrolling\n    using the sliver classes.", "A one-minute Widget-of-the-week\n    video that gives an overview of the\n    SliverAppBar widget.", "A one-minute Widget-of-the-week\n    video that gives an overview of the SliverList\n    and SliverGrid widgets.", "A 50-minute episode of The Boring Show\n    where Ian Hickson, Flutter\u2019s Tech Lead, and Filip Hracek\n    discuss the power of slivers.", "Here some links to relevant API docs:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/scrolling/slivers", "base_url": "https://docs.flutter.dev/"}, {"title": "Performance profiling | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When it comes to mobile apps, performance is critical to user experience.\nUsers expect apps to have smooth scrolling and meaningful animations free of\nstuttering or skipped frames, known as \u201cjank.\u201d How to ensure that your app\nis free of jank on a wide variety of devices?", "There are two options: first, manually test the app on different devices.\nWhile that approach might work for a smaller app, it becomes more\ncumbersome as an app grows in size. Alternatively, run an integration\ntest that performs a specific task and records a performance timeline.\nThen, examine the results to determine whether a specific section of\nthe app needs to be improved.", "In this recipe, learn how to write a test that records a performance\ntimeline while performing a specific task and saves a summary of the\nresults to a local file.", "This recipe uses the following steps:", "In this recipe, record the performance of an app as it scrolls through a\nlist of items. To focus on performance profiling, this recipe builds\non the Scrolling recipe in widget tests.", "Follow the instructions in that recipe to create an app and write a test to\nverify that everything works as expected.", "Next, record the performance of the app as it scrolls through the\nlist. Perform this task using the traceAction()\nmethod provided by the IntegrationTestWidgetsFlutterBinding class.", "This method runs the provided function and records a Timeline\nwith detailed information about the performance of the app. This example\nprovides a function that scrolls through the list of items,\nensuring that a specific item is displayed. When the function completes,\nthe traceAction() creates a report data Map that contains the Timeline.", "Specify the reportKey when running more than one traceAction.\nBy default all Timelines are stored with the key timeline,\nin this example the reportKey is changed to scrolling_timeline.", "Now that you\u2019ve captured a performance timeline, you need a way to review it.\nThe Timeline object provides detailed information about all of the events\nthat took place, but it doesn\u2019t provide a convenient way to review the results.", "Therefore, convert the Timeline into a TimelineSummary.\nThe TimelineSummary can perform two tasks that make it easier\nto review the results:", "To capture the results, create a file named perf_driver.dart\nin the test_driver folder and add the following code:", "The integrationDriver function has a responseDataCallback \nwhich you can customize. \nBy default, it writes the results to the integration_response_data.json file,\nbut you can customize it to generate a summary like in this example.", "After configuring the test to capture a performance Timeline and save a\nsummary of the results to disk, run the test with the following command:", "The --profile option means to compile the app for the \u201cprofile mode\u201d \nrather than the \u201cdebug mode\u201d, so that the benchmark result is closer to \nwhat will be experienced by end users.", "info Note:\n  Run the command with --no-dds when running on a mobile device or emulator.\n  This option disables the Dart Development Service (DDS), which won\u2019t\n  be accessible from your computer.", "After the test completes successfully, the build directory at the root of\nthe project contains two files:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/integration/profiling", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the app size tool | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The app size tool allows you to analyze the total size of your app.\nYou can view a single snapshot of \u201csize information\u201d\nusing the Analysis tab, or compare two different\nsnapshots of \u201csize information\u201d using the Diff tab.", "\u201cSize information\u201d contains size data for Dart code,\nnative code, and non-code elements of your app,\nlike the application package, assets and fonts. A \u201csize\ninformation\u201d file contains data for the total picture\nof your application size.", "The Dart AOT compiler performs tree-shaking on your code\nwhen compiling your application (profile or release mode\nonly\u2014the AOT compiler is not used for debug builds,\nwhich are JIT compiled). This means that the compiler\nattempts to optimize your app\u2019s size by removing\npieces of code that are unused or unreachable.", "After the compiler optimizes your code as much as it can,\nthe end result can be summarized as the collection of packages,\nlibraries, classes, and functions that exist in the binary output,\nalong with their size in bytes. This is the Dart portion of\n\u201csize information\u201d we can analyze in the app size tool to further\noptimize Dart code and track down size issues.", "If DevTools is already connected to a running application,\nnavigate to the \u201cApp Size\u201d tab.", "If DevTools is not connected to a running application, you can\naccess the tool from the landing page that appears once you have launched\nDevTools (see installation instructions).", "The analysis tab allows you to inspect a single snapshot\nof size information.  You can view the hierarchical structure\nof the size data using the treemap and table,\nand you can view code attribution data\n(for example, why a piece of code is included in your compiled\napplication) using the dominator tree and call graph.", "When you open the Analysis tab, you\u2019ll see instructions\nto load an app size file. Drag and drop an app size\nfile into the dialog, and click \u201cAnalyze Size\u201d.", "See Generating size files below for information on\ngenerating size files.", "The treemap and table show the hierarchical data for your app\u2019s size.", "A treemap is a visualization for hierarchical data.\nThe space is broken up into rectangles,\nwhere each rectangle is sized and ordered by some quantitative\nvariable (in this case, size in bytes).\nThe area of each rectangle is proportional to the size\nthe node occupies in the compiled application. Inside\nof each rectangle (call one A), there are additional\nrectangles that exist one level deeper in the data\nhierarchy (children of A).", "To drill into a cell in the treemap, select the cell.\nThis re-roots the tree so that the selected cell becomes\nthe visual root of the treemap.", "To navigate back, or up a level, use the breadcrumb\nnavigator at the top of the treemap.", "This section of the page shows code size attribution data\n(for example, why a piece of code is included in your\ncompiled application). This data is visible\nin the form of a dominator tree as well as a call graph.", "A dominator tree is a tree where each node\u2019s\nchildren are those nodes it immediately dominates.\nA node a is said to \u201cdominate\u201d a node b if\nevery path to b must go through a.", "To put it in context of app size analysis,\nimagine package:a imports both package:b and package:c,\nand both package:b and package:c import package:d.", "In this example, package:a dominates package:d,\nso the dominator tree for this data would look like:", "This information is helpful for understanding why certain\npieces of code are present in your compiled application.\nFor example, if you are analyzing your app size and find\nan unexpected package included in your compiled app, you can\nuse the dominator tree to trace the package to its root source.", "A call graph provides similar information to the dominator\ntree in regards to helping you understand why code exists\nin a compiled application. However, instead of showing\nthe one-to-many dominant relationships between nodes of code\nsize data like the dominator tree, the call graph shows the many-to-many\nrelationships that existing between nodes of code size data.", "Again, using the following example:", "The call graph for this data would link package:d\nto its direct callers, package:b and package:c,\ninstead of its \u201cdominator\u201d, package:a.", "This information is useful for understanding the\nfine-grained dependencies of between pieces of your code\n(packages, libraries, classes, functions).", "Use the dominator tree if you want to understand the\nroot cause for why a piece of code is included in your\napplication. Use the call graph if you want to understand\nall the call paths to and from a piece of code.", "A dominator tree is an analysis or slice of call graph data,\nwhere nodes are connected by \u201cdominance\u201d instead of\nparent-child hierarchy. In the case where a parent node\ndominates a child, the relationship in the call graph and the\ndominator tree would be identical, but this is not always the case.", "In the scenario where the call graph is complete\n(an edge exists between every pair of nodes),\nthe dominator tree would show the that root is the\ndominator for every node in the graph.\nThis is an example where the call graph would give\nyou a better understanding around why a piece of code is\nincluded in your application.", "The diff tab allows you to compare two snapshots of\nsize information. The two size information files\nyou are comparing should be generated from two different\nversions of the same app; for example,\nthe size file generated before and after\nchanges to your code. You can visualize the\ndifference between the two data sets\nusing the treemap and table.", "When you open the Diff tab,\nyou\u2019ll see instructions to load \u201cold\u201d and \u201cnew\u201d size\nfiles. Again, these files need to be generated from\nthe same application. Drag and drop these files into\ntheir respective dialogs, and click Analyze Diff.", "See Generating size files below for information\non generating these files.", "In the diff view, the treemap and tree table show\nonly data that differs between the two imported size files.", "For questions about using the treemap, see Using the treemap above.", "To use the app size tool, you\u2019ll need to generate a\nFlutter size analysis file. This file contains size\ninformation for your entire application (native code,\nDart code, assets, fonts, etc.), and you can generate it using the\n--analyze-size flag:", "This builds your application, prints a size summary\nto the command line, and prints a line\ntelling you where to find the size analysis file.", "In this example, import the build/apk-code-size-analysis_01.json\nfile into the app size tool to analyze further.\nFor more information, see App Size Documentation.", "To learn how to perform a step-by-step size analysis of\nthe Wonderous App using DevTools, check out the\nApp Size Tool tutorial. Various strategies\nto reduce an app\u2019s size are also discussed.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/app-size", "base_url": "https://docs.flutter.dev/"}, {"title": "Web support for Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter\u2019s web support delivers the same experiences on the web as on mobile.\nBuilding on the portability of Dart, the power of the web platform and the\nflexibility of the Flutter framework, you can now build apps for iOS, Android,\nand the browser from the same codebase. You can compile existing Flutter code\nwritten in Dart into a web experience because it is exactly the same Flutter\nframework and web is just another device target for your app.", "Adding web support to Flutter involved implementing Flutter\u2019s\ncore drawing layer on top of standard browser APIs, in addition\nto compiling Dart to JavaScript, instead of the ARM machine code that\nis used for mobile applications. Using a combination of DOM, Canvas, \nand WebAssembly, Flutter can provide a portable, high-quality,\nand performant user experience across modern browsers.\nWe implemented the core drawing layer completely in Dart\nand used Dart\u2019s optimized JavaScript compiler to compile the\nFlutter core and framework along with your application\ninto a single, minified source file that can be deployed to\nany web server.", "While you can do a lot on the web,\nFlutter\u2019s web support is most valuable in the\nfollowing scenarios:", "Not every HTML scenario is ideally suited for Flutter at this time. \nFor example, text-rich, flow-based, static content such as blog articles\nbenefit from the document-centric model that the web is built around,\nrather than the app-centric services that a UI framework like Flutter\ncan deliver. However, you can use Flutter to embed interactive\nexperiences into these websites.", "For a glimpse into how to migrate your mobile app to web, see\nthe following video:", "The following resources can help you get started:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web", "base_url": "https://docs.flutter.dev/"}, {"title": "Simple app state management | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Now that you know about declarative UI programming\nand the difference between ephemeral and app state,\nyou are ready to learn about simple app state management.", "On this page, we are going to be using the provider package.\nIf you are new to Flutter and you don\u2019t have a strong reason to choose\nanother approach (Redux, Rx, hooks, etc.), this is probably the approach\nyou should start with. The provider package is easy to understand\nand it doesn\u2019t use much code.\nIt also uses concepts that are applicable in every other approach.", "That said, if you have a strong background in\nstate management from other reactive frameworks,\nyou can find packages and tutorials listed on the options page.", "For illustration, consider the following simple app.", "The app has two separate screens: a catalog,\nand a cart (represented by the MyCatalog,\nand MyCart widgets, respectively). It could be a shopping app,\nbut you can imagine the same structure in a simple social networking\napp (replace catalog for \u201cwall\u201d and cart for \u201cfavorites\u201d).", "The catalog screen includes a custom app bar (MyAppBar)\nand a scrolling view of many list items (MyListItems).", "Here\u2019s the app visualized as a widget tree.", "So we have at least 5 subclasses of Widget. Many of them need\naccess to state that \u201cbelongs\u201d elsewhere. For example, each\nMyListItem needs to be able to add itself to the cart.\nIt might also want to see whether the currently displayed item\nis already in the cart.", "This takes us to our first question: where should we put the current\nstate of the cart?", "In Flutter,\nit makes sense to keep the state above the widgets that use it.", "Why? In declarative frameworks like Flutter, if you want to change the UI,\nyou have to rebuild it. There is no easy way to have\nMyCart.updateWith(somethingNew). In other words, it\u2019s hard to\nimperatively change a widget from outside, by calling a method on it.\nAnd even if you could make this work, you would be fighting the\nframework instead of letting it help you.", "Even if you get the above code to work,\nyou would then have to deal\nwith the following in the MyCart widget:", "You would need to take into consideration the current state of the UI\nand apply the new data to it. It\u2019s hard to avoid bugs this way.", "In Flutter, you construct a new widget every time its contents change.\nInstead of MyCart.updateWith(somethingNew) (a method call)\nyou use MyCart(contents) (a constructor). Because you can only\nconstruct new widgets in the build methods of their parents,\nif you want to change contents, it needs to live in MyCart\u2019s\nparent or above.", "Now MyCart has only one code path for building any version of the UI.", "In our example, contents needs to live in MyApp. Whenever it changes,\nit rebuilds MyCart from above (more on that later). Because of this,\nMyCart doesn\u2019t need to worry about lifecycle\u2014it just declares\nwhat to show for any given contents. When that changes, the old\nMyCart widget disappears and is completely replaced by the new one.", "This is what we mean when we say that widgets are immutable.\nThey don\u2019t change\u2014they get replaced.", "Now that we know where to put the state of the cart, let\u2019s see how\nto access it.", "When a user clicks on one of the items in the catalog,\nit\u2019s added to the cart. But since the cart lives above MyListItem,\nhow do we do that?", "A simple option is to provide a callback that MyListItem can call\nwhen it is clicked. Dart\u2019s functions are first class objects,\nso you can pass them around any way you want. So, inside\nMyCatalog you can define the following:", "This works okay, but for an app state that you need to modify from\nmany different places, you\u2019d have to pass around a lot of\ncallbacks\u2014which gets old pretty quickly.", "Fortunately, Flutter has mechanisms for widgets to provide data and\nservices to their descendants (in other words, not just their children,\nbut any widgets below them). As you would expect from Flutter,\nwhere Everything is a Widget\u2122, these mechanisms are just special\nkinds of widgets\u2014InheritedWidget, InheritedNotifier,\nInheritedModel, and more. We won\u2019t be covering those here,\nbecause they are a bit low-level for what we\u2019re trying to do.", "Instead, we are going to use a package that works with the low-level\nwidgets but is simple to use. It\u2019s called provider.", "Before working with provider,\ndon\u2019t forget to add the dependency on it to your pubspec.yaml.", "To add the provider package as a dependency, run flutter pub add:", "Now you can import 'package:provider/provider.dart';\nand start building.", "With provider, you don\u2019t need to worry about callbacks or\nInheritedWidgets. But you do need to understand 3 concepts:", "ChangeNotifier is a simple class included in the Flutter SDK which provides\nchange notification to its listeners. In other words, if something is\na ChangeNotifier, you can subscribe to its changes. (It is a form of\nObservable, for those familiar with the term.)", "In provider, ChangeNotifier is one way to encapsulate your application\nstate. For very simple apps, you get by with a single ChangeNotifier.\nIn complex ones, you\u2019ll have several models, and therefore several\nChangeNotifiers. (You don\u2019t need to use ChangeNotifier with provider\nat all, but it\u2019s an easy class to work with.)", "In our shopping app example, we want to manage the state of the cart in a\nChangeNotifier. We create a new class that extends it, like so:", "The only code that is specific to ChangeNotifier is the call\nto notifyListeners(). Call this method any time the model changes in a way\nthat might change your app\u2019s UI. Everything else in CartModel is the\nmodel itself and its business logic.", "ChangeNotifier is part of flutter:foundation and doesn\u2019t depend on\nany higher-level classes in Flutter. It\u2019s easily testable (you don\u2019t even need\nto use widget testing for it). For example,\nhere\u2019s a simple unit test of CartModel:", "ChangeNotifierProvider is the widget that provides an instance of\na ChangeNotifier to its descendants. It comes from the provider package.", "We already know where to put ChangeNotifierProvider: above the widgets that\nneed to access it. In the case of CartModel, that means somewhere\nabove both MyCart and MyCatalog.", "You don\u2019t want to place ChangeNotifierProvider higher than necessary\n(because you don\u2019t want to pollute the scope). But in our case,\nthe only widget that is on top of both MyCart and MyCatalog is MyApp.", "Note that we\u2019re defining a builder that creates a new instance\nof CartModel. ChangeNotifierProvider is smart enough not to rebuild\nCartModel unless absolutely necessary. It also automatically calls\ndispose() on CartModel when the instance is no longer needed.", "If you want to provide more than one class, you can use MultiProvider:", "Now that CartModel is provided to widgets in our app through the\nChangeNotifierProvider declaration at the top, we can start using it.", "This is done through the Consumer widget.", "We must specify the type of the model that we want to access.\nIn this case, we want CartModel, so we write\nConsumer<CartModel>. If you don\u2019t specify the generic (<CartModel>),\nthe provider package won\u2019t be able to help you. provider is based on types,\nand without the type, it doesn\u2019t know what you want.", "The only required argument of the Consumer widget\nis the builder. Builder is a function that is called whenever the\nChangeNotifier changes. (In other words, when you call notifyListeners()\nin your model, all the builder methods of all the corresponding\nConsumer widgets are called.)", "The builder is called with three arguments. The first one is context,\nwhich you also get in every build method.", "The second argument of the builder function is the instance of\nthe ChangeNotifier. It\u2019s what we were asking for in the first place.\nYou can use the data in the model to define what the UI should look like\nat any given point.", "The third argument is child, which is there for optimization.\nIf you have a large widget subtree under your Consumer\nthat doesn\u2019t change when the model changes, you can construct it\nonce and get it through the builder.", "It is best practice to put your Consumer widgets as deep in the tree\nas possible. You don\u2019t want to rebuild large portions of the UI\njust because some detail somewhere changed.", "Sometimes, you don\u2019t really need the data in the model to change the\nUI but you still need to access it. For example, a ClearCart\nbutton wants to allow the user to remove everything from the cart.\nIt doesn\u2019t need to display the contents of the cart,\nit just needs to call the clear() method.", "We could use Consumer<CartModel> for this,\nbut that would be wasteful. We\u2019d be asking the framework to\nrebuild a widget that doesn\u2019t need to be rebuilt.", "For this use case, we can use Provider.of,\nwith the listen parameter set to false.", "Using the above line in a build method won\u2019t cause this widget to\nrebuild when notifyListeners is called.", "You can check out the example covered in this article.\nIf you want something simpler,\nsee what the simple Counter app looks like when\nbuilt with provider.", "By following along with these articles, you\u2019ve greatly \nimproved your ability to create state-based applications. \nTry building an application with provider yourself to \nmaster these skills.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt/simple", "base_url": "https://docs.flutter.dev/"}, {"title": "Install and run DevTools from Android Studio | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Install the Flutter plugin if you don\u2019t already have it installed.\nThis can be done using the normal Plugins page in the IntelliJ\nand Android Studio settings. Once that page is open,\nyou can search the marketplace for the Flutter plugin.", "To open DevTools, you first need to run a Flutter app.\nThis can be accomplished by opening a Flutter project,\nensuring that you have a device connected,\nand clicking the Run or Debug toolbar buttons.", "Once an app is running,\nyou can start DevTools using one of the following:", "You can also open DevTools from an IntelliJ action.\nOpen the Find Action\u2026 dialog\n(on macOS, press Cmd + Shift + A,\nand search for the Open DevTools action.\nWhen you select that action,\nDevTools is installed (if it isn\u2019t already), the DevTools server\nlaunches, and a browser instance opens pointing to the DevTools app.", "When opened with an IntelliJ action, DevTools is not connected\nto a Flutter app. You\u2019ll need to provide a service protocol port\nfor a currently running app. You can do this using the inline\nConnect to a running app dialog.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/android-studio", "base_url": "https://docs.flutter.dev/"}, {"title": "Retrieve the value of a text field | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In this recipe,\nlearn how to retrieve the text a user has entered into a text field\nusing the following steps:", "To retrieve the text a user has entered into a text field,\ncreate a TextEditingController\nand supply it to a TextField or TextFormField.", "Important: Call dispose of the TextEditingController when\n  you\u2019ve finished using it. This ensures that you discard any resources\n  used by the object.", "Now that you have a TextEditingController, wire it up\nto a text field using the controller property:", "After supplying the TextEditingController to the text field,\nbegin reading values. Use the text()\nmethod provided by the TextEditingController to retrieve the\nString that the user has entered into the text field.", "The following code displays an alert dialog with the current\nvalue of the text field when the user taps a floating action button.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/forms/retrieve-input", "base_url": "https://docs.flutter.dev/"}, {"title": "Who is Dash? | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Dash is the mascot for the Dart language and the Flutter framework.", "info Note:\n  You can now make your own digital Dash using\n  Dashatar, a Flutter app for web and mobile!", "As soon as Shams Zakhour started working as a\nDart writer at Google in December 2013,\nshe started advocating for a Dart mascot.\nAfter documenting Java for 14 years, she\nhad observed how beloved the Java mascot,\nDuke, had become,\nand she wanted something similar for Dart.", "But the idea didn\u2019t gain momentum until 2017,\nwhen one of the Flutter engineers, Nina Chen,\nsuggested it on an internal mailing list.\nThe Flutter VP at the time, Joshy Joseph,\napproved the idea and asked the\norganizer for the 2018 Dart Conference,\nLinda Rasmussen, to make it happen.", "Once Shams heard about these plans,\nshe rushed to Linda and asked to own and drive\nthe project to produce the plushies for the conference.\nLinda had already elicited some design sketches,\nwhich she handed off.\nStarting with the sketches, Shams located a vendor\nwho could work within an aggressive deadline\n(competing with Lunar New Year),\nand started the process of creating\nthe specs for the plushy.", "That\u2019s right, Dash was originally a\nDart mascot, not a Flutter mascot.", "Here are some early mockups and one of the first prototypes:", "\nThe first prototype had uneven eyes", "Early on, a hummingbird image was created for the Dart team\nto use for presentations and the web.\nThe hummingbird represents that Dart is a speedy language.", "However, hummingbirds are pointed and angular\nand we wanted a cuddly plushy, so we chose a round\nhummingbird.", "Shams specified which color would go where,\nthe tail shape, the tuft of hair, the eyes\u2026all the\nlittle details. The vendor sent the specs to two\nmanufacturers who returned the prototypes some weeks later.", "Introducing Dash at the January 2018 Dart Conference:", "While the manufacturing process was proceeding,\nShams chose a name for the plushy: Dash,\nbecause it was an early code name for the\nDart project, it was gender neutral,\nand it seemed appropriate for a hummingbird.", "Many boxes of Dash plushies arrived in\nsouthern California just in time for the conference.\nThey were eagerly adopted by Dart and Flutter enthusiasts.", "The people have spoken,\nso Dash is now the mascot for Flutter and Dart.", "Since the creation of Dash 1.0, we\u2019ve made two more versions.\nMarketing slightly changed the Dart and Flutter color scheme after\nDash 1.0 was created, so Dash 2.0 reflects the updated scheme\n(which removed the green color).\nDash 2.1 is a smaller size and has a few more color\ntweaks. The smaller size is easier to ship,\nand fits better in a claw machine!", "\nDash 2.0 and 2.1", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//dash", "base_url": "https://docs.flutter.dev/"}, {"title": "Report errors to a service | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "While one always tries to create apps that are free of bugs,\nthey\u2019re sure to crop up from time to time.\nSince buggy apps lead to unhappy users and customers,\nit\u2019s important to understand how often your users\nexperience bugs and where those bugs occur.\nThat way, you can prioritize the bugs with the\nhighest impact and work to fix them.", "How can you determine how often your users experiences bugs?\nWhenever an error occurs, create a report containing the\nerror that occurred and the associated stacktrace.\nYou can then send the report to an error tracking\nservice, such as Bugsnag, Datadog, Fabric, \nFirebase Crashlytics, Rollbar, or Sentry.", "The error tracking service aggregates all of the crashes your users\nexperience and groups them together. This allows you to know how often your\napp fails and where the users run into trouble.", "In this recipe, learn how to report errors to the\nSentry crash reporting service using\nthe following steps:", "Before reporting errors to Sentry, you need a \u201cDSN\u201d to uniquely identify\nyour app with the Sentry.io service.", "To get a DSN, use the following steps:", "Import the sentry_flutter package into the app.\nThe sentry package makes it easier to send\nerror reports to the Sentry error tracking service.", "To add the sentry_flutter package as a dependency,\nrun flutter pub add:", "Initialize the SDK to capture different unhandled errors automatically:", "Alternatively, you can pass the DSN to Flutter using the dart-define tag:", "This is all you need for Sentry to capture unhandled errors in Dart and native layers.\nThis includes Swift, Objective-C, C, and C++ on iOS, and Java, Kotlin, C, and C++ on Android.", "Besides the automatic error reporting that Sentry generates by\nimporting and initializing the SDK,\nyou can use the API to report errors to Sentry:", "For more information, see the Sentry API docs on pub.dev.", "Extensive documentation about using the Sentry SDK can be found on Sentry\u2019s site.", "To view a working example,\nsee the Sentry flutter example app.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/maintenance/error-reporting", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter SDK archive | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Stable channel contains the\nmost stable Flutter builds.\nTo learn more, check out Flutter\u2019s channels.", "error Important:\n  If you\u2019re in China, read Using Flutter in China.", "To learn what\u2019s new in the major Flutter releases,\ncheck out the release notes page.", "A note on provenance: provenance\n  describes how software artifacts are built, including\n  what the download contains and who created it.\n  To view provenance in a more readable format\n  and where nothing is downloaded, run the following\n  command using the provenance file URL from a release (you might need to \n  download jq to easily parse the JSON).", "Select from the following scrollable list:", "Select from the following scrollable list:", "Select from the following scrollable list:", "Select from the following scrollable list:", "Select from the following scrollable list:", "Select from the following scrollable list:", "Installation bundles are not available for master.\nHowever, you can get the SDK directly from\nGitHub repo by cloning the master channel,\nand then triggering a download of the SDK dependencies:", "For additional details on how our installation bundles are structured,\nsee Installation bundles.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/archive", "base_url": "https://docs.flutter.dev/"}, {"title": "Understanding constraints | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  If you are experiencing specific layout errors,\n  you might check out Common Flutter errors.", "When someone learning Flutter asks you why some widget\nwith width: 100 isn\u2019t 100 pixels wide,\nthe default answer is to tell them to put that widget\ninside of a Center, right?", "If you do, they\u2019ll come back again and again,\nasking why some FittedBox isn\u2019t working,\nwhy that Column is overflowing, or what\nIntrinsicWidth is supposed to be doing.", "Instead, first tell them that Flutter layout is very different\nfrom HTML layout (which is probably where they\u2019re coming from),\nand then make them memorize the following rule:", "Flutter layout can\u2019t really be understood without knowing\nthis rule, so Flutter developers should learn it early on.", "For example, if a composed widget contains a column\nwith some padding, and wants to lay out its two children\nas follows:", "The negotiation goes something like this:", "Widget: \u201cHey parent, what are my constraints?\u201d", "Parent: \u201cYou must be from 80 to 300 pixels wide,\n   and 30 to 85 tall.\u201d", "Widget: \u201cHmmm, since I want to have 5 pixels of padding,\n   then my children can have at most 290 pixels of width\n   and 75 pixels of height.\u201d", "Widget: \u201cHey first child, You must be from 0 to 290\n   pixels wide, and 0 to 75 tall.\u201d", "First child: \u201cOK, then I wish to be 290 pixels wide,\n   and 20 pixels tall.\u201d", "Widget: \u201cHmmm, since I want to put my second child below the\n   first one, this leaves only 55 pixels of height for\n   my second child.\u201d", "Widget: \u201cHey second child, You must be from 0 to 290 wide,\n   and 0 to 55 tall.\u201d", "Second child: \u201cOK, I wish to be 140 pixels wide,\n   and 30 pixels tall.\u201d", "Widget: \u201cVery well. My first child has position x: 5 and y: 5,\n   and my second child has x: 80 and y: 25.\u201d", "Widget: \u201cHey parent, I\u2019ve decided that my size is going to be 300\n   pixels wide, and 60 pixels tall.\u201d", "Flutter\u2019s layout engine is designed to be a one-pass process.\nThis means that Flutter lays out its widgets very efficiently,\nbut does result in a few limitations:", "A widget can decide its own size only within the\nconstraints given to it by its parent.\nThis means a widget usually\ncan\u2019t have any size it wants.", "A widget can\u2019t know and doesn\u2019t decide its own position\nin the screen, since it\u2019s the widget\u2019s parent who decides\nthe position of the widget.", "Since the parent\u2019s size and position, in its turn,\nalso depends on its own parent, it\u2019s impossible to\nprecisely define the size and position of any widget\nwithout taking into consideration the tree as a whole.", "If a child wants a different size from its parent and \nthe parent doesn\u2019t have enough information to align it,\nthen the child\u2019s size might be ignored.\nBe specific when defining alignment.", "In Flutter, widgets are rendered by their underlying\nRenderBox objects. Many boxes in Flutter,\nespecially those that just take a single child,\npass their constraint on to their children.", "Generally, there are three kinds of boxes,\nin terms of how they handle their constraints:", "Some widgets, for example Container,\nvary from type to type based on their constructor arguments.\nThe Container constructor defaults\nto trying to be as big as possible, but if you give it a width,\nfor instance, it tries to honor that and be that particular size.", "Others, for example Row and Column (flex boxes)\nvary based on the constraints they are given,\nas described in the Flex section.", "For an interactive experience, use the following DartPad.\nUse the numbered horizontal scrolling bar to switch between\n29 different examples.", "If you prefer, you can grab the code from\nthis GitHub repo.", "The examples are explained in the following sections.", "The screen is the parent of the Container, and it\nforces the Container to be exactly the same size as the screen.", "So the Container fills the screen and paints it red.", "The red Container wants to be 100 \u00d7 100,\nbut it can\u2019t, because the screen forces it to be\nexactly the same size as the screen.", "So the Container fills the screen.", "The screen forces the Center to be exactly the same size\nas the screen, so the Center fills the screen.", "The Center tells the Container that it can be any size it\nwants, but not bigger than the screen. Now the Container\ncan indeed be 100 \u00d7 100.", "This is different from the previous example in that it uses\nAlign instead of Center.", "Align also tells the Container that it can be any size it\nwants, but if there is empty space it won\u2019t center the Container.\nInstead, it aligns the container to the bottom-right of the\navailable space.", "The screen forces the Center to be exactly the\nsame size as the screen, so the Center fills the screen.", "The Center tells the Container that it can be any size it wants,\nbut not bigger than the screen. The Container wants to be\nof infinite size, but since it can\u2019t be bigger than the screen,\nit just fills the screen.", "The screen forces the Center to be exactly the\nsame size as the screen, so the Center fills the screen.", "The Center tells the Container that it can be any\nsize it wants, but not bigger than the screen.\nSince the Container has no child and no fixed size,\nit decides it wants to be as big as possible,\nso it fills the whole screen.", "But why does the Container decide that?\nSimply because that\u2019s a design decision by those who\ncreated the Container widget. It could have been\ncreated differently, and you have to read the\nContainer API documentation to understand\nhow it behaves, depending on the circumstances.", "The screen forces the Center to be exactly the same\nsize as the screen, so the Center fills the screen.", "The Center tells the red Container that it can be any size\nit wants, but not bigger than the screen. Since the red\nContainer has no size but has a child,\nit decides it wants to be the same size as its child.", "The red Container tells its child that it can be any size\nit wants, but not bigger than the screen.", "The child is a green Container that wants to\nbe 30 \u00d7 30. Given that the red Container sizes itself to\nthe size of its child, it is also 30 \u00d7 30.\nThe red color isn\u2019t visible because the green Container\nentirely covers the red Container.", "The red Container sizes itself to its children\u2019s size,\nbut it takes its own padding into consideration.\nSo it is also 30 \u00d7 30 plus padding.\nThe red color is visible because of the padding,\nand the green Container has the same size as\nin the previous example.", "You might guess that the Container has to be\nbetween 70 and 150 pixels, but you would be wrong.\nThe ConstrainedBox only imposes additional constraints\nfrom those it receives from its parent.", "Here, the screen forces the ConstrainedBox to be exactly\nthe same size as the screen, so it tells its child Container\nto also assume the size of the screen, thus ignoring its\nconstraints parameter.", "Now, Center allows ConstrainedBox to be any size up to\nthe screen size. The ConstrainedBox imposes additional\nconstraints from its constraints parameter onto its child.", "The Container must be between 70 and 150 pixels.\nIt wants to have 10 pixels,\nso it ends up having 70 (the minimum).", "Center allows ConstrainedBox to be any size up to the\nscreen size. The ConstrainedBox imposes additional\nconstraints from its constraints parameter onto its child.", "The Container must be between 70 and 150 pixels.\nIt wants to have 1000 pixels,\nso it ends up having 150 (the maximum).", "Center allows ConstrainedBox to be any size up to the\nscreen size. The ConstrainedBox imposes additional\nconstraints from its constraints parameter onto its child.", "The Container must be between 70 and 150 pixels.\nIt wants to have 100 pixels, and that\u2019s the size it has,\nsince that\u2019s between 70 and 150.", "The screen forces the UnconstrainedBox to be exactly\nthe same size as the screen. However, the UnconstrainedBox\nlets its child Container be any size it wants.", "The screen forces the UnconstrainedBox to be exactly\nthe same size as the screen, and UnconstrainedBox\nlets its child Container be any size it wants.", "Unfortunately, in this case the Container is\n4000 pixels wide and is too big to fit in\nthe UnconstrainedBox, so the UnconstrainedBox displays\nthe much dreaded \u201coverflow warning\u201d.", "The screen forces the OverflowBox to be exactly the same\nsize as the screen, and OverflowBox lets its child Container\nbe any size it wants.", "OverflowBox is similar to UnconstrainedBox;\nthe difference is that it won\u2019t display any warnings\nif the child doesn\u2019t fit the space.", "In this case, the Container has 4000 pixels of width,\nand is too big to fit in the OverflowBox,\nbut the OverflowBox simply shows as much as it can,\nwith no warnings given.", "This won\u2019t render anything, and you\u2019ll see an error in the console.", "The UnconstrainedBox lets its child be any size it wants,\nhowever its child is a Container with infinite size.", "Flutter can\u2019t render infinite sizes, so it throws an error with\nthe following message: BoxConstraints forces an infinite width.", "Here you won\u2019t get an error anymore,\nbecause when the LimitedBox is given an\ninfinite size by the UnconstrainedBox;\nit passes a maximum width of 100 down to its child.", "If you swap the UnconstrainedBox for a Center widget,\nthe LimitedBox won\u2019t apply its limit anymore\n(since its limit is only applied when it gets infinite\nconstraints), and the width of the Container\nis allowed to grow past 100.", "This explains the difference between a LimitedBox\nand a ConstrainedBox.", "The screen forces the FittedBox to be exactly the same\nsize as the screen. The Text has some natural width\n(also called its intrinsic width) that depends on the\namount of text, its font size, and so on.", "The FittedBox lets the Text be any size it wants,\nbut after the Text tells its size to the FittedBox,\nthe FittedBox scales the Text until it fills all of\nthe available width.", "But what happens if you put the FittedBox inside of a\nCenter widget? The Center lets the FittedBox\nbe any size it wants, up to the screen size.", "The FittedBox then sizes itself to the Text,\nand lets the Text be any size it wants.\nSince both FittedBox and the Text have the same size,\nno scaling happens.", "However, what happens if FittedBox is inside of a Center\nwidget, but the Text is too large to fit the screen?", "FittedBox tries to size itself to the Text,\nbut it can\u2019t be bigger than the screen.\nIt then assumes the screen size,\nand resizes Text so that it fits the screen, too.", "If, however, you remove the FittedBox, the Text\ngets its maximum width from the screen,\nand breaks the line so that it fits the screen.", "FittedBox can only scale a widget that is bounded\n(has non-infinite width and height). Otherwise,\nit won\u2019t render anything,\nand you\u2019ll see an error in the console.", "The screen forces the Row to be exactly the same size\nas the screen.", "Just like an UnconstrainedBox, the Row won\u2019t\nimpose any constraints onto its children,\nand instead lets them be any size they want.\nThe Row then puts them side-by-side,\nand any extra space remains empty.", "Since Row won\u2019t impose any constraints onto its children,\nit\u2019s quite possible that the children might be too big to fit\nthe available width of the Row. In this case, just like an\nUnconstrainedBox, the Row displays the \u201coverflow warning\u201d.", "When a Row\u2019s child is wrapped in an Expanded widget,\nthe Row won\u2019t let this child define its own width anymore.", "Instead, it defines the Expanded width according to the\nother children, and only then the Expanded widget forces\nthe original child to have the Expanded\u2019s width.", "In other words, once you use Expanded,\nthe original child\u2019s width becomes irrelevant, and is ignored.", "If all of Row\u2019s children are wrapped in Expanded widgets,\neach Expanded has a size proportional to its flex parameter,\nand only then each Expanded widget forces its child to have\nthe Expanded\u2019s width.", "In other words, Expanded ignores the preferred width of\nits children.", "The only difference if you use Flexible instead of Expanded,\nis that Flexible lets its child have the same or smaller\nwidth than the Flexible itself, while Expanded forces\nits child to have the exact same width of the Expanded.\nBut both Expanded and Flexible ignore their children\u2019s width\nwhen sizing themselves.", "info Note:\n  This means that it\u2019s impossible to expand Row children\n  proportionally to their sizes. The Row either uses\n  the exact child\u2019s width, or ignores it completely\n  when you use Expanded or Flexible.", "The screen forces the Scaffold to be exactly the same size\nas the screen, so the Scaffold fills the screen.\nThe Scaffold tells the Container that it can be any size it wants,\nbut not bigger than the screen.", "info Note:\n  When a widget tells its child that it can be smaller than a\n  certain size, we say the widget supplies loose constraints\n  to its child. More on that later.", "If you want the Scaffold\u2019s child to be exactly the same size\nas the Scaffold itself, you can wrap its child with\nSizedBox.expand.", "It\u2019s very common to hear that some constraint is\n\u201ctight\u201d or \u201cloose\u201d, so what does that mean?", "A tight constraint offers a single possibility,\nan exact size. In other words, a tight constraint\nhas its maximum width equal to its minimum width;\nand has its maximum height equal to its minimum height.", "An example of this is the App widget,\nwhich is contained by the RenderView class:\nthe box used by the child returned by the\napplication\u2019s build function is given a constraint\nthat forces it to exactly fill the application\u2019s content area\n(typically, the entire screen).", "Another example: if you nest a bunch of boxes inside\neach other at the root of your application\u2019s render tree,\nthey\u2019ll all exactly fit in each other,\nforced by the box\u2019s tight constraints.", "If you go to Flutter\u2019s box.dart file and search for\nthe BoxConstraints constructors,\nyou\u2019ll find the following:", "If you revisit Example 2,\nthe screen forces the red Container to be\nexactly the same size as the screen.\nThe screen achieves that, of course, by passing tight\nconstraints to the Container.", "A loose constraint is one that has a minimum\nof zero and a maximum non-zero.", "Some boxes loosen the incoming constraints,\nmeaning the maximum is maintained but the\nminimum is removed, so the widget can have\na minimum width and height both equal to zero.", "Ultimately, Center\u2019s purpose is to transform\nthe tight constraints it received from its parent\n(the screen) to loose constraints for its child\n(the Container).", "If you revisit Example 3, \nthe Center allows the red Container to be smaller,\nbut not bigger than the screen.", "info Note:\n  You might be directed here if the framework\n  detects a problem involving box constraints.\n  The Flex section below might also apply.", "In certain situations,\na box\u2019s constraint is unbounded, or infinite.\nThis means that either the maximum width or\nthe maximum height is set to double.infinity.", "A box that tries to be as big as possible won\u2019t\nfunction usefully when given an unbounded constraint and,\nin debug mode, throws an exception.", "The most common case where a render box ends up\nwith an unbounded constraint is within a flex box\n(Row or Column),\nand within a scrollable region\n(such as ListView and other ScrollView subclasses).", "ListView, for example,\ntries to expand to fit the space available\nin its cross-direction\n(perhaps it\u2019s a vertically-scrolling block and\ntries to be as wide as its parent).\nIf you nest a vertically scrolling ListView\ninside a horizontally scrolling ListView,\nthe inner list tries to be as wide as possible,\nwhich is infinitely wide,\nsince the outer one is scrollable in that direction.", "The next section describes the error you might\nencounter with unbounded constraints in a Flex widget.", "A flex box (Row and Column) behaves\ndifferently depending on whether its\nconstraint is bounded or unbounded in\nits primary direction.", "A flex box with a bounded constraint in its\nprimary direction tries to be as big as possible.", "A flex box with an unbounded constraint\nin its primary direction tries to fit its children\nin that space. Each child\u2019s flex value must be\nset to zero, meaning that you can\u2019t use\nExpanded when the flex box is inside\nanother flex box or a scrollable;\notherwise it throws an exception.", "The cross direction\n(width for Column or height for Row),\nmust never be unbounded,\nor it can\u2019t reasonably align its children.", "Knowing the general layout rule is necessary, but it\u2019s not enough.", "Each widget has a lot of freedom when applying the general rule,\nso there is no way of knowing how it behaves by just reading\nthe widget\u2019s name.", "If you try to guess, you\u2019ll probably guess wrong.\nYou can\u2019t know exactly how a widget behaves unless\nyou\u2019ve read its documentation, or studied its source-code.", "The layout source-code is usually complex,\nso it\u2019s probably better to just read the documentation.\nHowever, if you decide to study the layout source-code,\nyou can easily find it by using the navigating capabilities\nof your IDE.", "Find a Column in your code and navigate to its\nsource code. To do this, use command+B (macOS)\nor control+B (Windows/Linux) in Android Studio or IntelliJ.\nYou\u2019ll be taken to the basic.dart file.\nSince Column extends Flex, navigate to the Flex\nsource code (also in basic.dart).", "Scroll down until you find a method called\ncreateRenderObject(). As you can see,\nthis method returns a RenderFlex.\nThis is the render-object for the Column.\nNow navigate to the source-code of RenderFlex,\nwhich takes you to the flex.dart file.", "Scroll down until you find a method called\nperformLayout(). This is the method that does\nthe layout for the Column.", "Original article by Marcelo Glasberg", "Marcelo originally published this content as\nFlutter: The Advanced Layout Rule Even Beginners Must Know\non Medium. We loved it and asked that he allow us to publish\nin on docs.flutter.dev, to which he graciously agreed. Thanks, Marcelo!\nYou can find Marcelo on GitHub and pub.dev.", "Also, thanks to Simon Lightfoot for creating the\nheader image at the top of the article.", "info Note:\n  To better understand how Flutter implements layout\n  constraints, check out the following 5-minute video:", "Decoding Flutter: Unbounded height and width", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/constraints", "base_url": "https://docs.flutter.dev/"}, {"title": "Networking | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The http package provides the simplest way to issue http requests. This\npackage is supported on Android, iOS, macOS, Windows, Linux and the web.", "Some platforms require additional steps, as detailed below.", "Android apps must declare their use of the internet in the Android\nmanifest (AndroidManifest.xml ):", "macOS apps must allow network access in the relevant .entitlements files.", "Learn more about setting up entitlements.", "For a practical sample of various networking tasks (incl. fetching data,\nWebSockets, and parsing data in the background) see the \nnetworking cookbook.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/networking", "base_url": "https://docs.flutter.dev/"}, {"title": "iOS | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios", "base_url": "https://docs.flutter.dev/"}, {"title": "Internationalizing Flutter apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "If your app might be deployed to users who speak another\nlanguage then you\u2019ll need to internationalize it.\nThat means you need to write the app in a way that makes\nit possible to localize values like text and layouts\nfor each language or locale that the app supports.\nFlutter provides widgets and classes that help with\ninternationalization and the Flutter libraries\nthemselves are internationalized.", "This page covers concepts and workflows necessary to\nlocalize a Flutter application using the\nMaterialApp and CupertinoApp classes,\nas most apps are written that way.\nHowever, applications written using the lower level\nWidgetsApp class can also be internationalized\nusing the same classes and logic.", "This section provides a tutorial on how to create and\ninternationalize a new Flutter application,\nalong with any additional setup\nthat a target platform might require.", "You can find the source code for this example in\ngen_l10n_example.", "By default, Flutter only provides US English localizations.\nTo add support for other languages,\nan application must specify additional\nMaterialApp (or CupertinoApp) properties,\nand include a package called flutter_localizations.\nAs of June 2023, this package supports 113 languages\nand language variants.", "To begin, start by creating a new Flutter application\nin a directory of your choice with the flutter create command.", "To use flutter_localizations,\nadd the package as a dependency to your pubspec.yaml file, \nas well as the intl package:", "This creates a pubspec.yml file with the following entries:", "Then import the flutter_localizations library and specify\nlocalizationsDelegates and supportedLocales for\nyour MaterialApp or CupertinoApp:", "After introducing the flutter_localizations package\nand adding the previous code,\nthe Material and Cupertino\npackages should now be correctly localized in\none of the 113 supported locales.\nWidgets should be adapted to the localized messages,\nalong with correct left-to-right or right-to-left layout.", "Try switching the target platform\u2019s locale to\nSpanish (es) and the messages should be localized.", "Apps based on WidgetsApp are similar except that the\nGlobalMaterialLocalizations.delegate isn\u2019t needed.", "The full Locale.fromSubtags constructor is preferred\nas it supports scriptCode, though the Locale default\nconstructor is still fully valid.", "The elements of the localizationsDelegates list are\nfactories that produce collections of localized values.\nGlobalMaterialLocalizations.delegate provides localized\nstrings and other values for the Material Components\nlibrary. GlobalWidgetsLocalizations.delegate\ndefines the default text direction,\neither left-to-right or right-to-left, for the widgets library.", "More information about these app properties, the types they\ndepend on, and how internationalized Flutter apps are typically\nstructured, is covered in this page.", "Localizations.override is a factory constructor\nfor the Localizations widget that allows for\n(the typically rare) situation where a section of your application\nneeds to be localized to a different locale than the locale\nconfigured for your device.", "To observe this behavior, add a call to Localizations.override\nand a simple CalendarDatePicker:", "Hot reload the app and the CalendarDatePicker\nwidget should re-render in Spanish.", "After adding the flutter_localizations package,\nyou can configure localization.\nTo add localized text to your application,\ncomplete the following instructions:", "Add the intl package as a dependency, pulling\nin the version pinned by flutter_localizations:", "Open the pubspec.yaml file and enable the generate flag. \nThis flag is found in the flutter section in the pubspec file.", "Add a new yaml file to the root directory of the Flutter project.\nName this file l10n.yaml and include following content:", "This file configures the localization tool.\nIn this example, you\u2019ve done the following:", "In ${FLUTTER_PROJECT}/lib/l10n,\nadd the app_en.arb template file. For example:", "Add another bundle file called app_es.arb in the same directory.\nIn this file, add the Spanish translation of the same message.", "Now, run flutter run and codegen takes place automatically.\nYou should find generated files in\n${FLUTTER_PROJECT}/.dart_tool/flutter_gen/gen_l10n.\nAlternatively, you can also run flutter gen-l10n to\ngenerate the same files without running the app.", "Add the import statement on app_localizations.dart and\nAppLocalizations.delegate\nin your call to the constructor for MaterialApp:", "The AppLocalizations class also provides auto-generated\nlocalizationsDelegates and supportedLocales lists.\nYou can use these instead of providing them manually.", "Now you can use AppLocalizations anywhere in your app:", "This code generates a Text widget that displays \u201cHello World!\u201d\nif the target device\u2019s locale is set to English,\nand \u201c\u00a1Hola Mundo!\u201d if the target device\u2019s locale is set\nto Spanish. In the arb files,\nthe key of each entry is used as the method name of the getter,\nwhile the value of that entry contains the localized message.", "The gen_l10n_example uses this tool.", "To localize your device app description,\npass the localized string to\nMaterialApp.onGenerateTitle:", "tips_and_updates Tip:\n  When using VS Code, add the arb-editor extension.\n  This extension adds syntax highlighting, snippets, \n  diagnostics, and quick fixes to help edit .arb template files.", "You can also include application values in a message with\nspecial syntax that uses a placeholder to generate a method\ninstead of a getter.\nA placeholder, which must be a valid Dart identifier name,\nbecomes a positional parameter in the generated method in the\nAppLocalizations code. Define a placeholder name by wrapping\nit in curly braces as follows:", "Define each placeholder in the placeholders object\nin the app\u2019s .arb file. For example,\nto define a hello message with a userName parameter,\nadd the following to lib/l10n/app_en.arb:", "This code snippet adds a hello method call to\nthe AppLocalizations.of(context) object,\nand the method accepts a parameter of type String;\nthe hello method returns a string.\nRegenerate the AppLocalizations file.", "Replace the code passed into Builder with the following:", "You can also use numerical placeholders to specify multiple values.\nDifferent languages have different ways to pluralize words.\nThe syntax also supports specifying how a word should be pluralized.\nA pluralized message must include a num parameter indicating\nhow to pluralize the word in different situations.\nEnglish, for example, pluralizes \u201cperson\u201d to \u201cpeople\u201d,\nbut that doesn\u2019t go far enough.\nThe message0 plural might be \u201cno people\u201d or \u201czero people\u201d.\nThe messageFew plural might be\n\u201cseveral people\u201d, \u201csome people\u201d, or \u201ca few people\u201d. \nThe messageMany plural might\nbe  \u201cmost people\u201d or \u201cmany people\u201d, or \u201ca crowd\u201d. \nOnly the more general messageOther field is required.\nThe following example shows what options are available:", "The previous expression is replaced by the message variation\n(message0, message1, \u2026) corresponding to the value\nof the countPlaceholder.\nOnly the messageOther field is required.", "The following example defines a message that pluralizes\nthe word, \u201cwombat\u201d:", "Use a plural method by passing in the count parameter:", "Similar to plurals,\nyou can also choose a value based on a String placeholder.\nThis is most often used to support gendered languages.\nThe syntax is as follows:", "The next example defines a message that\nselects a pronoun based on gender:", "Use this feature by\npassing the gender string as a parameter:", "Keep in mind that when using select statements,\ncomparison between the parameter and the actual\nvalue is case-sensitive.\nThat is, AppLocalizations.of(context)!.pronoun(\"Male\")\ndefaults to the \u201cother\u201d case, and returns \u201cthey\u201d.", "Sometimes, you have to use tokens,\nsuch as { and }, as normal characters.\nTo ignore such tokens from being parsed,\nenable the use-escaping flag by adding the\nfollowing to l10n.yaml:", "The parser ignores any string of characters\nwrapped with a pair of single quotes.\nTo use a normal single quote character,\nuse a pair of consecutive single quotes.\nFor example, the follow text is converted\nto a Dart String:", "The resulting string is as follows:", "Numbers, including those that represent currency values,\nare displayed very differently in different locales. \nThe localizations generation tool in\nflutter_localizations uses the\nNumberFormat\nclass in the intl package to format\nnumbers based on the locale and the desired format.", "The int, double, and number types can use any of the\nfollowing NumberFormat constructors:", "The starred NumberFormat constructors in the table\noffer optional, named parameters.\nThose parameters can be specified as the value\nof the placeholder\u2019s optionalParameters object.\nFor example, to specify the optional decimalDigits\nparameter for compactCurrency,\nmake the following changes to the lib/l10n/app_en.arg file:", "Dates strings are formatted in many different ways\ndepending both the locale and the app\u2019s needs.", "Placeholder values with type DateTime are formatted with\nDateFormat in the intl package.", "There are 41 format variations,\nidentified by the names of their DateFormat factory constructors.\nIn the following example, the DateTime value\nthat appears in the helloWorldOn message is\nformatted with DateFormat.yMd:", "In an app where the locale is US English,\nthe following expression would produce  \u201c7/9/1959\u201d.\nIn a Russian locale, it would produce \u201c9.07.1959\u201d.", "Typically, iOS applications define key application metadata,\nincluding supported locales, in an Info.plist file\nthat is built into the application bundle.\nTo configure the locales supported by your app,\nuse the following instructions:", "Open your project\u2019s ios/Runner.xcworkspace Xcode file.", "In the Project Navigator, open the Info.plist file\nunder the Runner project\u2019s Runner folder.", "Select the Information Property List item.\nThen select Add Item from the Editor menu,\nand select Localizations from the pop-up menu.", "Select and expand the newly-created Localizations item.\nFor each locale your application supports,\nadd a new item and select the locale you wish to add\nfrom the pop-up menu in the Value field.\nThis list should be consistent with the languages listed\nin the supportedLocales parameter.", "Once all supported locales have been added, save the file.", "This section covers additional ways to customize a\nlocalized Flutter application.", "Some languages with multiple variants require more than just a\nlanguage code to properly differentiate.", "For example, fully differentiating all variants of\nChinese requires specifying the language code, script code,\nand country code. This is due to the existence\nof simplified and traditional script, as well as regional\ndifferences in the way characters are written within the same script type.", "In order to fully express every variant of Chinese for the\ncountry codes CN, TW, and HK, the list of supported\nlocales should include:", "This explicit full definition ensures that your app can\ndistinguish between and provide the fully nuanced localized\ncontent to all combinations of these country codes.\nIf a user\u2019s preferred locale isn\u2019t specified,\nFlutter selects the closest match,\nwhich likely contains differences to what the user expects.\nFlutter only resolves to locales defined in supportedLocales\nand provides scriptCode-differentiated localized\ncontent for commonly used languages.\nSee Localizations for information on how the supported\nlocales and the preferred locales are resolved.", "Although Chinese is a primary example,\nother languages like French (fr_FR, fr_CA)\nshould also be fully differentiated for more nuanced localization.", "The Locale class identifies the user\u2019s language.\nMobile devices support setting the locale for all applications,\nusually using a system settings menu.\nInternationalized apps respond by displaying values that are\nlocale-specific. For example, if the user switches the device\u2019s locale\nfrom English to French, then a Text widget that originally\ndisplayed \u201cHello World\u201d would be rebuilt with \u201cBonjour le monde\u201d.", "The Localizations widget defines the locale\nfor its child and the localized resources that the child depends on.\nThe WidgetsApp widget creates a Localizations widget\nand rebuilds it if the system\u2019s locale changes.", "You can always look up an app\u2019s current locale with\nLocalizations.localeOf():", "Although the flutter_localizations library currently supports\n113 languages and language variants, only English language translations\nare available by default. It\u2019s up to the developer to decide exactly\nwhich languages to support.", "The MaterialApp supportedLocales\nparameter limits locale changes. When the user changes the locale\nsetting on their device, the app\u2019s Localizations widget only\nfollows suit if the new locale is a member of this list.\nIf an exact match for the device locale isn\u2019t found,\nthen the first supported locale with a matching languageCode\nis used. If that fails, then the first element of the\nsupportedLocales list is used.", "An app that wants to use a different \u201clocale resolution\u201d\nmethod can provide a localeResolutionCallback.\nFor example, to have your app unconditionally accept\nwhatever locale the user selects:", "The l10n.yaml file allows you to configure the gen-l10n tool\nto specify the following:", "For a full list of options, either run flutter gen-l10n --help\nat the command line or refer to the following table:", "This section covers the technical details of how localizations work\nin Flutter. If you\u2019re planning on supporting your own set of localized\nmessages, the following content would be helpful.\nOtherwise, you can skip this section.", "The Localizations widget is used to load and\nlook up objects that contain collections of localized values.\nApps refer to these objects with Localizations.of(context,type).\nIf the device\u2019s locale changes,\nthe Localizations widget automatically loads values for\nthe new locale and then rebuilds widgets that used it.\nThis happens because Localizations works like an\nInheritedWidget.\nWhen a build function refers to an inherited widget,\nan implicit dependency on the inherited widget is created.\nWhen an inherited widget changes\n(when the Localizations widget\u2019s locale changes),\nits dependent contexts are rebuilt.", "Localized values are loaded by the Localizations widget\u2019s\nlist of LocalizationsDelegates.\nEach delegate must define an asynchronous load()\nmethod that produces an object that encapsulates a\ncollection of localized values.\nTypically these objects define one method per localized value.", "In a large app, different modules or packages might be bundled with\ntheir own localizations. That\u2019s why the Localizations widget\nmanages a table of objects, one per LocalizationsDelegate.\nTo retrieve the object produced by one of the LocalizationsDelegate\u2019s\nload methods, specify a BuildContext and the object\u2019s type.", "For example,\nthe localized strings for the Material Components widgets\nare defined by the MaterialLocalizations class.\nInstances of this class are created by a LocalizationDelegate\nprovided by the MaterialApp class.\nThey can be retrieved with Localizations.of():", "This particular Localizations.of() expression is used frequently,\nso the MaterialLocalizations class provides a convenient shorthand:", "Putting together an internationalized Flutter app usually\nstarts with the class that encapsulates the app\u2019s localized values.\nThe example that follows is typical of such classes.", "Complete source code for the intl_example for this app.", "This example is based on the APIs and tools provided by the\nintl package. The An alternative class for the app\u2019s\nlocalized resources section\ndescribes an example that doesn\u2019t depend on the intl package.", "The DemoLocalizations class\n(defined in the following code snippet)\ncontains the app\u2019s strings (just one for the example)\ntranslated into the locales that the app supports.\nIt uses the initializeMessages() function\ngenerated by Dart\u2019s intl package,\nIntl.message(), to look them up.", "A class based on the intl package imports a generated\nmessage catalog that provides the initializeMessages()\nfunction and the per-locale backing store for Intl.message().\nThe message catalog is produced by an intl tool\nthat analyzes the source code for classes that contain\nIntl.message() calls.\nIn this case that would just be the DemoLocalizations class.", "An app that needs to support a language that\u2019s not included in\nGlobalMaterialLocalizations has to do some extra work:\nit must provide about 70 translations (\u201clocalizations\u201d)\nfor words or phrases and the date patterns and symbols for the\nlocale.", "See the following for an example of how to add\nsupport for the Norwegian Nynorsk language.", "A new GlobalMaterialLocalizations subclass defines the\nlocalizations that the Material library depends on.\nA new LocalizationsDelegate subclass, which serves\nas factory for the GlobalMaterialLocalizations subclass,\nmust also be defined.", "Here\u2019s the source code for the complete add_language example,\nminus the actual Nynorsk translations.", "The locale-specific GlobalMaterialLocalizations subclass\nis called NnMaterialLocalizations,\nand the LocalizationsDelegate subclass is\n_NnMaterialLocalizationsDelegate.\nThe value of NnMaterialLocalizations.delegate\nis an instance of the delegate, and is all\nthat\u2019s needed by an app that uses these localizations.", "The delegate class includes basic date and number format\nlocalizations. All of the other localizations are defined by String\nvalued property getters in NnMaterialLocalizations, like this:", "These are the English translations, of course.\nTo complete the job you need to change the return\nvalue of each getter to an appropriate Nynorsk string.", "The getters return \u201craw\u201d Dart strings that have an r prefix,\nsuch as r'About $applicationName',\nbecause sometimes the strings contain variables with a $ prefix.\nThe variables are expanded by parameterized localization methods:", "The date patterns and symbols of the locale also need to\nbe specified, which are defined in the source code as follows:", "These values need to be modified for the locale to use the correct\ndate formatting. Unfortunately, since the intl library doesn\u2019t\nshare the same flexibility for number formatting,\nthe formatting for an existing locale must be used\nas a substitute in _NnMaterialLocalizationsDelegate:", "For more information about localization strings,\ncheck out the flutter_localizations README.", "Once you\u2019ve implemented your language-specific subclasses of\nGlobalMaterialLocalizations and LocalizationsDelegate,\nyou  need to add the language and a delegate instance to your app.\nThe following code sets the app\u2019s language to Nynorsk and\nadds the NnMaterialLocalizations delegate instance to the app\u2019s\nlocalizationsDelegates list:", "This section describes different approaches to internationalize\nyour Flutter application.", "The previous example was defined in terms of the Dart intl\npackage. You can choose your own approach for managing\nlocalized values for the sake of simplicity or perhaps to integrate\nwith a different i18n framework.", "Complete source code for the minimal app.", "In the following example, the DemoLocalizations class \nincludes all of its translations directly in per language Maps:", "In the minimal app the DemoLocalizationsDelegate is slightly\ndifferent. Its load method returns a SynchronousFuture\nbecause no asynchronous loading needs to take place.", "Before building an API using the Dart intl package,\nreview the intl package\u2019s documentation.\nThe following list summarizes the process for\nlocalizing an app that depends on the intl package:", "The demo app depends on a generated source file called\nl10n/messages_all.dart, which defines all of the\nlocalizable strings used by the app.", "Rebuilding l10n/messages_all.dart requires two steps.", "With the app\u2019s root directory as the current directory,\ngenerate l10n/intl_messages.arb from lib/main.dart:", "The intl_messages.arb file is a JSON format map with one entry for\neach Intl.message() function defined in main.dart.\nThis file serves as a template for the English and Spanish translations,\nintl_en.arb and intl_es.arb.\nThese translations are created by you, the developer.", "With the app\u2019s root directory as the current directory,\ngenerate intl_messages_<locale>.dart for each\nintl_<locale>.arb file and intl_messages_all.dart,\nwhich imports all of the messages files:", "Windows doesn\u2019t support file name wildcarding.\nInstead, list the .arb files that were generated by the\nintl_translation:extract_to_arb command.", "The DemoLocalizations class uses the generated\ninitializeMessages() function\n(defined in intl_messages_all.dart)\nto load the localized messages and Intl.message()\nto look them up.", "If you learn best by reading code,\ncheck out the following examples.", "If Dart\u2019s intl package is new to you,\ncheck out Using the Dart intl tools.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/accessibility-and-localization/internationalization", "base_url": "https://docs.flutter.dev/"}, {"title": "Display images from the internet | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Displaying images is fundamental for most mobile apps.\nFlutter provides the Image widget to\ndisplay different types of images.", "To work with images from a URL, use the\nImage.network() constructor.", "One useful thing about the Image widget:\nIt supports animated gifs.", "The default Image.network constructor doesn\u2019t handle more advanced\nfunctionality, such as fading images in after loading, or caching images\nto the device after they\u2019re downloaded. To accomplish these tasks, see\nthe following recipes:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/images/network-image", "base_url": "https://docs.flutter.dev/"}, {"title": "Material Design for Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Material Design is an open-source design system built\nand supported by Google designers and developers.", "The latest version, Material 3, enables personal,\nadaptive, and expressive experiences\u2014from dynamic color\nand enhanced accessibility, to foundations for\nlarge screen layouts, and design tokens.\nFlutter is in the process of migrating to Material 3.", "info Note:\n  A few facts about Material 3 (M3),\n  the next generation of Material Design:", "Explore the updated components, typography, color system,\nand elevation support with the\ninteractive Material 3 demo:", "To learn more about Material Design and Flutter,\ncheck out:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/design/material", "base_url": "https://docs.flutter.dev/"}, {"title": "Supported deployment platforms | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "We define three tiers of support for the platforms on\nwhich apps built with Flutter might be deployed:", "As of the current stable release,\nsupport for deploying Flutter apps is shown in the\nfollowing table:", "info Note:\n  A plus sign (+) in the table indicates \u201cand higher releases\u201d.\n  A minus (-) sign directly following a version (with no spaces)\n  indicates \u201cand lower releases\u201d.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//reference/supported-platforms", "base_url": "https://docs.flutter.dev/"}, {"title": "Handle scrolling | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Many apps feature lists of content,\nfrom email clients to music apps and beyond.\nTo verify that lists contain the expected content\nusing widget tests,\nyou need a way to scroll through lists to search for particular items.", "To scroll through lists via integration tests,\nuse the methods provided by the WidgetTester class,\nwhich is included in the flutter_test package:", "In this recipe, learn how to scroll through a list of items to\nverify a specific widget is being displayed, and discuss the pros on cons of\ndifferent approaches.", "This recipe uses the following steps:", "This recipe builds an app that shows a long list of items.\nTo keep this recipe focused on testing, use the app created in the\nWork with long lists recipe.\nIf you\u2019re unsure of how to work with long lists,\nsee that recipe for an introduction.", "Add keys to the widgets you want to interact with\ninside the integration tests.", "Now, you can write a test. In this example, scroll through the list of items and\nverify that a particular item exists in the list. The WidgetTester class\nprovides the scrollUntilVisible() method, which scrolls through a list\nuntil a specific widget is visible. This is useful because the height of the\nitems in the list can change depending on the device.", "Rather than assuming that you know the height of all the items\nin a list, or that a particular widget is rendered on all devices,\nthe scrollUntilVisible() method repeatedly scrolls through\na list of items until it finds what it\u2019s looking for.", "The following code shows how to use the scrollUntilVisible() method\nto look through the list for a particular item. This code lives in a\nfile called test/widget_test.dart.", "Run the test using the following command from the root of the project:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/widget/scrolling", "base_url": "https://docs.flutter.dev/"}, {"title": "Deferred components | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter has the capability to build apps that can\ndownload additional Dart code and assets at runtime.\nThis allows apps to reduce install apk size and download\nfeatures and assets when needed by the user.", "We refer to each uniquely downloadable bundle of Dart\nlibraries and assets as a \u201cdeferred component\u201d.\nThis is achieved by using Dart\u2019s deferred imports,\nwhich can be compiled into split AOT shared libraries.", "info Note:\n  This feature is currently only available on Android,\n  taking advantage of Android and Google Play Stores\u2019\n  dynamic feature modules to deliver the\n  deferred components packaged as Android modules.\n  Deferred code does not impact other platforms,\n  which continue to build as normal with all deferred\n  components and assets included at initial install time.", "Also, note that this is an advanced feature.", "Though modules can be defer loaded,\nthe entire application must be completely built and\nuploaded as a single Android App Bundle.\nDispatching partial updates without re-uploading\nnew Android App Bundles for the entire application\nis not supported.", "Deferred loading is only performed when the app\nis compiled to release or profile mode.\nIn debug mode, all deferred components are treated\nas regular imports, so they are present\nat launch and load immediately. Therefore,\ndebug builds can still hot reload.", "For a deeper dive into the technical details of\nhow this feature works, see Deferred Components\non the Flutter wiki.", "The following instructions explain how to set up your\nAndroid app for deferred loading.", "Add Play Core to the Android app\u2019s\n    build.gradle dependencies.\n    In android/app/build.gradle add the following:", "If using the Google Play Store as the\n    distribution model for dynamic features,\n    the app must support SplitCompat and provide an instance\n    of a PlayStoreDeferredComponentManager.\n    Both of these tasks can be accomplished by setting\n    the android:name property on the application in\n    android/app/src/main/AndroidManifest.xml to\n    io.flutter.embedding.android.FlutterPlayStoreSplitApplication:", "io.flutter.app.FlutterPlayStoreSplitApplication handles\nboth of these tasks for you. If you use\nFlutterPlayStoreSplitApplication,\nyou can skip to step 1.3.", "If your Android application\nis large or complex, you might want to separately support\nSplitCompat and provide the\nPlayStoreDynamicFeatureManager manually.", "To support SplitCompat, there are three methods\n(as detailed in the Android docs), any of which are valid:", "Make your application class extend\n    SplitCompatApplication:", "Call SplitCompat.install(this);\n    in the attachBaseContext() method:", "Declare SplitCompatApplication as the application\n    subclass and add the Flutter compatibility code from\n  FlutterApplication to your application class:", "The embedder relies on an injected\nDeferredComponentManager instance to handle\ninstall requests for deferred components.\nProvide a PlayStoreDeferredComponentManager into\nthe Flutter embedder by adding the following code\nto your app initialization:", "Opt into deferred components by adding\n    the deferred-components entry to the app\u2019s pubspec.yaml\n    under the flutter entry:", "The flutter tool looks for the deferred-components\n  entry in the pubspec.yaml to determine whether the\n  app should be built as deferred or not.\n  This can be left empty for now unless you already\n  know the components desired and the Dart deferred libraries\n  that go into each. You will fill in this section later\n  in step 3.3 once gen_snapshot produces the loading units.", "Next, implement deferred loaded Dart libraries in your\napp\u2019s Dart code. The implementation does not need\nto be feature complete yet. The example in the\nrest of this page adds a new simple deferred widget\nas a placeholder. You can also convert existing code\nto be deferred by modifying the imports and\nguarding usages of deferred code behind loadLibrary()\nFutures.", "Create a new Dart library.\n    For example, create a new DeferredBox widget that\n    can be downloaded at runtime.\n    This widget can be of any complexity but,\n    for the purposes of this guide,\n    create a simple box as a stand-in.\n    To create a simple blue box widget,\n    create box.dart with the following contents:", "Import the new Dart library\n    with the deferred keyword in your app and\n    call loadLibrary() (see lazily loading a library).\n    The following example uses FutureBuilder\n    to wait for the loadLibrary Future (created in\n    initState) to complete and display a\n    CircularProgressIndicator as a placeholder.\n    When the Future completes, it returns the DeferredBox widget.\n    SomeWidget can then be used in the app as normal and\n    won\u2019t ever attempt to access the deferred Dart code until\n    it has successfully loaded.", "The loadLibrary() function returns a Future<void>\nthat completes successfully when the code in the library\nis available for use and completes with an error otherwise.\nAll usage of symbols from the deferred library should be\nguarded behind a completed loadLibrary() call. All imports\nof the library must be marked as deferred for it to be\ncompiled appropriately to be used in a deferred component.\nIf a component has already been loaded, additional calls\nto loadLibrary() complete quickly (but not synchronously).\nThe loadLibrary() function can also be called early to\ntrigger a pre-load to help mask the loading time.", "You can find another example of deferred import loading in\nFlutter Gallery\u2019s lib/deferred_widget.dart.", "Use the following flutter command to build a deferred\ncomponents app:", "This command assists you by validating that your project\nis properly set up to build deferred components apps.\nBy default, the build fails if the validator detects\nany issues and guides you through suggested changes to fix them.", "info Note:\n  You can opt out of building deferred components\n  with the --no-deferred-components flag.\n  This flag causes all assets defined under\n  deferred components to be treated as if they were\n  defined under the assets section of pubspec.yaml.\n  All Dart code is compiled into a single shared library\n  and loadLibrary() calls complete in the next event\n  loop boundary (as soon as possible while being asynchronous).\n  This flag is also equivalent to omitting the deferred-components:\n  entry in pubspec.yaml.", "The\n    flutter build appbundle command\n    runs the validator and attempts to build the app with\n    gen_snapshot instructed to produce split AOT shared libraries\n    as separate .so files. On the first run, the validator will\n    likely fail as it detects issues; the tool makes\n    recommendations for how to set up the project and fix these issues.", "The validator is split into two sections: prebuild\nand post-gen_snapshot validation. This is because any\nvalidation referencing loading units cannot be performed\nuntil gen_snapshot completes and produces a final set\nof loading units.", "info Note:\n  You can opt to have the tool attempt to build your\n  app without the validator by passing the\n  --no-validate-deferred-components flag.\n  This can result in unexpected and confusing\n  instructions to resolve failures.\n  This flag is meant to be used in\n  custom implementations that do not rely on the default\n  Play-store-based implementation that the validator checks for.", "The validator detects any new, changed, or removed\nloading units generated by gen_snapshot.\nThe current generated loading units are tracked in your\n<projectDirectory>/deferred_components_loading_units.yaml file.\nThis file should be checked into source control to ensure that\nchanges to the loading units by other developers can be caught.", "The validator also checks for the following in the\nandroid directory:", "<projectDir>/android/app/src/main/res/values/strings.xml\n    An entry for every deferred component mapping the key\n    ${componentName}Name to ${componentName}.\n    This string resource is used by the AndroidManifest.xml\n    of each feature module to define the dist:title property.\n    For example:", "<projectDir>/android/<componentName>\n    An Android dynamic feature module for\n    each deferred component exists and contains a build.gradle\n    and src/main/AndroidManifest.xml file.\n    This only checks for existence and does not validate\n    the contents of these files. If a file does not exist,\n    it generates a default recommended one.", "<projectDir>/android/app/src/main/res/values/AndroidManifest.xml\n    Contains a meta-data entry that encodes\n    the mapping between loading units and component name the\n    loading unit is associated with. This mapping is used by the\n    embedder to convert Dart\u2019s internal loading unit id\n    to the name of a deferred component to install. For example:", "The gen_snapshot validator won\u2019t run until the prebuild\nvalidator passes.", "For each of these checks,\n    the tool produces the modified or new files\n    needed to pass the check.\n    These files are placed in the\n    <projectDir>/build/android_deferred_components_setup_files directory.\n    It is recommended that the changes be applied by\n    copying and overwriting the same files in the\n    project\u2019s android directory. Before overwriting,\n    the current project state should be committed to\n    source control and the recommended changes should be\n    reviewed to be appropriate. The tool won\u2019t make any\n    changes to your android/ directory automatically.", "Once the available\n    loading units are generated and logged in\n    <projectDirectory>/deferred_components_loading_units.yaml,\n    it is possible to fully configure the pubspec\u2019s\n    deferred-components section so that the loading units\n    are assigned to deferred components as desired.\n    To continue with the box example, the generated\n    deferred_components_loading_units.yaml file would contain:", "The loading unit id (\u20182\u2019 in this case) is used\ninternally by Dart, and can be ignored.\nThe base loading unit (id \u20181\u2019) is not listed\nand contains everything not explicitly contained\nin another loading unit.", "You can now add the following to pubspec.yaml:", "To assign a loading unit to a deferred component,\nadd any Dart lib in the loading unit into the\nlibraries section of the feature module.\nKeep the following guidelines in mind:", "Loading units should not be included\n    in more than one component.", "Including one Dart library from a\n    loading unit indicates that the entire loading\n    unit is assigned to the deferred component.", "All loading units not assigned to\n    a deferred component are included in the base component,\n    which always exists implicitly.", "Loading units assigned to the same\n    deferred component are downloaded, installed,\n    and shipped together.", "The base component is implicit and\n    need not be defined in the pubspec.", "Assets can also be included by adding\n    an assets section in the deferred component configuration:", "An asset can be included in multiple deferred components,\nbut installing both components results in a replicated asset.\nAssets-only components can also be defined by omitting the\nlibraries section. These assets-only components must be\ninstalled with the DeferredComponent utility class in\nservices rather than loadLibrary().\nSince Dart libs are packaged together with assets,\nif a Dart library is loaded with loadLibrary(),\nany assets in the component are loaded as well.\nHowever, installing by component name and the services utility\nwon\u2019t load any dart libraries in the component.", "You are free to include assets in any component,\nas long as they are installed and loaded when they\nare first referenced, though typically,\nassets and the Dart code that uses those assets\nare best packed in the same component.", "Manually add all deferred components\n    that you defined in pubspec.yaml into the\n    android/settings.gradle file as includes.\n    For example, if there are three deferred components\n    defined in the pubspec named, boxComponent, circleComponent,\n    and assetComponent, ensure that android/settings.gradle\n    contains the following:", "Repeat steps 3.1 through 3.6 (this step)\n    until all validator recommendations are handled and the tool\n    runs without further recommendations.", "When successful, this command outputs an app-release.aab\nfile in build/app/outputs/bundle/release.", "A successful build does not always mean the app was\nbuilt as intended. It is up to you to ensure that all loading\nunits and Dart libraries are included in the way you intended.\nFor example, a common mistake is accidentally importing a\nDart library without the deferred keyword,\nresulting in a deferred library being compiled as part of\nthe base loading unit. In this case, the Dart lib would\nload properly because it is always present in the base,\nand the lib would not be split off. This can be checked\nby examining the deferred_components_loading_units.yaml\nfile to verify that the generated loading units are described\nas intended.", "When adjusting the deferred components configurations,\nor making Dart changes that add, modify, or remove loading units,\nyou should expect the validator to fail.\nFollow steps 3.1 through 3.6 (this step) to apply any\nrecommended changes to continue the build.", "Once your app has successfully built an .aab file,\nuse Android\u2019s bundletool to perform\nlocal testing with the --local-testing flag.", "To run the .aab file on a test device,\ndownload the bundletool jar executable from\ngithub.com/google/bundletool/releases and run:", "Where <your_app_project_dir> is the path to your app\u2019s\nproject directory and <your_temp_dir> is any temporary\ndirectory used to store the outputs of bundletool.\nThis unpacks your .aab file into an .apks file and\ninstalls it on the device. All available Android dynamic\nfeatures are loaded onto the device locally and\ninstallation of deferred components is emulated.", "Before running build-apks again,\nremove the existing app .apks file:", "Changes to the Dart codebase require either incrementing\nthe Android build ID or uninstalling and reinstalling\nthe app, as Android won\u2019t update the feature modules\nunless it detects a new version number.", "The built .aab file can be uploaded directly to\nthe Play store as normal. When loadLibrary() is called,\nthe needed Android module containing the Dart AOT lib and\nassets is downloaded by the Flutter engine using the\nPlay store\u2019s delivery feature.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/deferred-components", "base_url": "https://docs.flutter.dev/"}, {"title": "Multiple Flutter screens or views | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "If you\u2019re integrating Flutter into an existing app,\nor gradually migrating an existing app to use Flutter,\nyou might find yourself wanting to add multiple\nFlutter instances to the same project.\nIn particular, this can be useful in the\nfollowing scenarios:", "The advantage of using multiple Flutter instances is that each\ninstance is independent and maintains its own internal navigation\nstack, UI, and application states. This simplifies the overall application code\u2019s\nresponsibility for state keeping and improves modularity. More details on the\nscenarios motivating the usage of multiple Flutters can be found at\nflutter.dev/go/multiple-flutters.", "Flutter 2 and above are optimized for this scenario, with a low incremental\nmemory cost (~180kB) for adding additional Flutter instances. This fixed cost\nreduction allows the multiple Flutter instance pattern to be used more liberally\nin your add-to-app integration.", "The primary API for adding multiple Flutter instances on both Android and iOS\nis based on a new FlutterEngineGroup class (Android API, iOS API)\nto construct FlutterEngines, rather than the FlutterEngine\nconstructors used previously.", "Whereas the FlutterEngine API was direct and easier to consume, the\nFlutterEngine spawned from the same FlutterEngineGroup have the performance\nadvantage of sharing many of the common, reusable resources such as the GPU\ncontext, font metrics, and isolate group snapshot, leading to a faster initial\nrendering latency and lower memory footprint.", "FlutterEngines spawned from FlutterEngineGroup can be used to\n connect to UI classes like FlutterActivity or FlutterViewController\n in the same way as normally constructed cached FlutterEngines.", "The first FlutterEngine spawned from the FlutterEngineGroup doesn\u2019t need\nto continue surviving in order for subsequent FlutterEngines to share\nresources as long as there\u2019s at least 1 living FlutterEngine at all\ntimes.", "Creating the very first FlutterEngine from a FlutterEngineGroup has\nthe same performance characteristics as constructing a\nFlutterEngine using the constructors did previously.", "When all FlutterEngines from a FlutterEngineGroup are destroyed, the next\nFlutterEngine created has the same performance characteristics as the very\nfirst engine.", "The FlutterEngineGroup itself doesn\u2019t need to live beyond all of the spawned\nengines. Destroying the FlutterEngineGroup doesn\u2019t affect existing spawned\nFlutterEngines but does remove the ability to spawn additional\nFlutterEngines that share resources with existing spawned engines.", "Communication between Flutter instances is handled using platform channels\n(or Pigeon) through the host platform. To see our roadmap on communication,\nor other planned work on enhancing multiple Flutter instances, check out\nIssue 72009.", "You can find a sample demonstrating how to use FlutterEngineGroup\non both Android and iOS on GitHub.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/multiple-flutters", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Logging view | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  The logging view works with all Flutter and Dart applications.", "The logging view displays events from the Dart runtime,\napplication frameworks (like Flutter), and application-level\nlogging events.", "By default, the logging view shows:", "To implement logging in your code,\nsee the Logging section in the\nDebugging Flutter apps programmatically\npage.", "To clear the log entries in the logging view,\nclick the Clear logs button.", "To learn about different methods of logging\nand how to effectively use DevTools to\nanalyze and debug Flutter apps faster,\ncheck out a guided Logging View tutorial.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/logging", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for Android developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This document is meant for Android developers looking to apply their\nexisting Android knowledge to build mobile apps with Flutter.\nIf you understand the fundamentals of the Android framework then you\ncan use this document as a jump start to Flutter development.", "info Note:\n  To integrate Flutter code into your Android app, see\n  Add Flutter to existing app.", "Your Android knowledge and skill set are highly valuable when building with\nFlutter, because Flutter relies on the mobile operating system for numerous\ncapabilities and configurations. Flutter is a new way to build UIs for mobile,\nbut it has a plugin system to communicate with Android (and iOS) for non-UI\ntasks. If you\u2019re an expert with Android, you don\u2019t have to relearn everything\nto use Flutter.", "This document can be used as a cookbook by jumping around and\nfinding questions that are most relevant to your needs.", "How is react-style, or declarative, programming different than the\n  traditional imperative style?\n  For a comparison, see Introduction to declarative UI.", "In Android, the View is the foundation of everything that shows up on the\nscreen. Buttons, toolbars, and inputs, everything is a View.\nIn Flutter, the rough equivalent to a View is a Widget.\nWidgets don\u2019t map exactly to Android views, but while you\u2019re getting\nacquainted with how Flutter works you can think of them as\n\u201cthe way you declare and construct UI\u201d.", "However, these have a few differences to a View. To start, widgets have a\ndifferent lifespan: they are immutable and only exist until they need to be\nchanged. Whenever widgets or their state change, Flutter\u2019s framework creates\na new tree of widget instances. In comparison, an Android view is drawn once\nand does not redraw until invalidate is called.", "Flutter\u2019s widgets are lightweight, in part due to their immutability.\nBecause they aren\u2019t views themselves, and aren\u2019t directly drawing anything,\nbut rather are a description of the UI and its semantics that get \u201cinflated\u201d\ninto actual view objects under the hood.", "Flutter includes the Material Components library.\nThese are widgets that implement the\nMaterial Design guidelines. Material Design is a\nflexible design system optimized for all platforms,\nincluding iOS.", "But Flutter is flexible and expressive enough to implement any design language.\nFor example, on iOS, you can use the Cupertino widgets\nto produce an interface that looks like Apple\u2019s iOS design language.", "In Android, you update your views by directly mutating them. However,\nin Flutter, Widgets are immutable and are not updated directly,\ninstead you have to work with the widget\u2019s state.", "This is where the concept of Stateful and Stateless widgets comes from.\nA StatelessWidget is just what it sounds like\u2014a\nwidget with no state information.", "StatelessWidgets are useful when the part of the user interface\nyou are describing does not depend on anything other than the configuration\ninformation in the object.", "For example, in Android, this is similar to placing an ImageView\nwith your logo. The logo is not going to change during runtime,\nso use a StatelessWidget in Flutter.", "If you want to dynamically change the UI based on data received\nafter making an HTTP call or user interaction then you have to work\nwith StatefulWidget and tell the Flutter framework that the widget\u2019s\nState has been updated so it can update that widget.", "The important thing to note here is at the core both stateless and stateful\nwidgets behave the same. They rebuild every frame, the difference is the\nStatefulWidget has a State object that stores state data across frames\nand restores it.", "If you are in doubt, then always remember this rule: if a widget changes\n(because of user interactions, for example) it\u2019s stateful.\nHowever, if a widget reacts to change, the containing parent widget can\nstill be stateless if it doesn\u2019t itself react to change.", "The following example shows how to use a StatelessWidget. A common\nStatelessWidget is the Text widget. If you look at the implementation of\nthe Text widget you\u2019ll find that it subclasses StatelessWidget.", "As you can see, the Text Widget has no state information associated with it,\nit renders what is passed in its constructors and nothing more.", "But, what if you want to make \u201cI Like Flutter\u201d change dynamically, for\nexample when clicking a FloatingActionButton?", "To achieve this, wrap the Text widget in a StatefulWidget and\nupdate it when the user clicks the button.", "In Android, you write layouts in XML, but in Flutter you write your layouts\nwith a widget tree.", "The following example shows how to display a simple widget with padding:", "You can view some of the layouts that Flutter has to offer in the\nwidget catalog.", "In Android, you call addChild() or removeChild()\non a parent to dynamically add or remove child views.\nIn Flutter, because widgets are immutable there is\nno direct equivalent to addChild().  Instead,\nyou can pass a function to the parent that returns a widget,\nand control that child\u2019s creation with a boolean flag.", "For example, here is how you can toggle between two\nwidgets when you click on a FloatingActionButton:", "In Android, you either create animations using XML, or call the animate()\nmethod on a view. In Flutter, animate widgets using the animation\nlibrary by wrapping widgets inside an animated widget.", "In Flutter, use an AnimationController which is an Animation<double>\nthat can pause, seek, stop and reverse the animation. It requires a Ticker\nthat signals when vsync happens, and produces a linear interpolation between\n0 and 1 on each frame while it\u2019s running. You then create one or more\nAnimations and attach them to the controller.", "For example, you might use CurvedAnimation to implement an animation\nalong an interpolated curve. In this sense, the controller\nis the \u201cmaster\u201d source of the animation progress and the CurvedAnimation\ncomputes the curve that replaces the controller\u2019s default linear motion.\nLike widgets, animations in Flutter work with composition.", "When building the widget tree you assign the Animation to an animated\nproperty of a widget, such as the opacity of a FadeTransition, and tell the\ncontroller to start the animation.", "The following example shows how to write a FadeTransition that fades the\nwidget into a logo when you press the FloatingActionButton:", "For more information, see\nAnimation & Motion widgets,\nthe Animations tutorial,\nand the Animations overview.", "In Android, you would use the Canvas and Drawable\nto draw images and shapes to the screen.\nFlutter has a similar Canvas API as well,\nsince it\u2019s based on the same low-level rendering engine, Skia.\nAs a result, painting to a canvas in Flutter\nis a very familiar task for Android developers.", "Flutter has two classes that help you draw to the canvas: CustomPaint\nand CustomPainter,\nthe latter of which implements your algorithm to draw to the canvas.", "To learn how to implement a signature painter in Flutter,\nsee Collin\u2019s answer on Custom Paint.", "In Android, you typically subclass View, or use a pre-existing view,\nto override and implement methods that achieve the desired behavior.", "In Flutter, build a custom widget by composing\nsmaller widgets (instead of extending them).\nIt is somewhat similar to implementing a custom ViewGroup\nin Android, where all the building blocks are already existing,\nbut you provide a different behavior\u2014for example,\ncustom layout logic.", "For example, how do you build a CustomButton that takes a label in\nthe constructor? Create a CustomButton that composes a ElevatedButton with\na label, rather than by extending ElevatedButton:", "Then use CustomButton, just as you\u2019d use any other Flutter widget:", "In Android, there are two main use cases for Intents: navigating between\nActivities, and communicating with components. Flutter, on the other hand,\ndoes not have the concept of intents, although you can still start intents\nthrough native integrations (using a plugin).", "Flutter doesn\u2019t really have a direct equivalent to activities and fragments;\nrather, in Flutter you navigate between screens, using a Navigator and\nRoutes, all within the same Activity.", "A Route is an abstraction for a \u201cscreen\u201d or \u201cpage\u201d of an app, and a\nNavigator is a widget that manages routes. A route roughly maps to an\nActivity, but it does not carry the same meaning. A navigator can push\nand pop routes to move from screen to screen. Navigators work like a stack\non which you can push() new routes you want to navigate to, and from\nwhich you can pop() routes when you want to \u201cgo back\u201d.", "In Android, you declare your activities inside the app\u2019s AndroidManifest.xml.", "In Flutter, you have a couple options to navigate between pages:", "The following example builds a Map.", "Navigate to a route by pushing its name to the Navigator.", "The other popular use-case for Intents is to call external components such\nas a Camera or File picker. For this, you would need to create a native platform\nintegration (or use an existing plugin).", "To learn how to build a native platform integration,\nsee developing packages and plugins.", "Flutter can handle incoming intents from Android by directly talking to the\nAndroid layer and requesting the data that was shared.", "The following example registers a text share intent filter on the native\nactivity that runs our Flutter code, so other apps can share text with\nour Flutter app.", "The basic flow implies that we first handle the shared text data on the\nAndroid native side (in our Activity), and then wait until Flutter requests\nfor the data to provide it using a MethodChannel.", "First, register the intent filter for all intents in AndroidManifest.xml:", "Then in MainActivity, handle the intent, extract the text that was\nshared from the intent, and hold onto it. When Flutter is ready to process,\nit requests the data using a platform channel, and it\u2019s sent\nacross from the native side:", "Finally, request the data from the Flutter side\nwhen the widget is rendered:", "The Navigator class handles routing in Flutter and is used to get\na result back from a route that you have pushed on the stack.\nThis is done by awaiting on the Future returned by push().", "For example, to start a location route that lets the user select\ntheir location, you could do the following:", "And then, inside your location route, once the user has selected their location\nyou can pop the stack with the result:", "Dart has a single-threaded execution model, with support for Isolates\n(a way to run Dart code on another thread), an event loop, and\nasynchronous programming. Unless you spawn an Isolate, your Dart code\nruns in the main UI thread and is driven by an event loop. Flutter\u2019s event\nloop is equivalent to Android\u2019s main Looper\u2014that is, the Looper that\nis attached to the main thread.", "Dart\u2019s single-threaded model doesn\u2019t mean you need to run everything as a\nblocking operation that causes the UI to freeze. Unlike Android, which\nrequires you to keep the main thread free at all times, in Flutter,\nuse the asynchronous facilities that the Dart language provides, such as\nasync/await, to perform asynchronous work. You might be familiar with\nthe async/await paradigm if you\u2019ve used it in C#, Javascript, or if you\nhave used Kotlin\u2019s coroutines.", "For example, you can run network code without causing the UI to hang by\nusing async/await and letting Dart do the heavy lifting:", "Once the awaited network call is done, update the UI by calling setState(),\nwhich triggers a rebuild of the widget sub-tree and updates the data.", "The following example loads data asynchronously and displays it in a ListView:", "Refer to the next section for more information on doing work in the\nbackground, and how Flutter differs from Android.", "In Android, when you want to access a network resource you would typically\nmove to a background thread and do the work, as to not block the main thread,\nand avoid ANRs. For example, you might be using an AsyncTask, a LiveData,\nan IntentService, a JobScheduler job, or an RxJava pipeline with a\nscheduler that works on background threads.", "Since Flutter is single threaded and runs an event loop (like Node.js), you\ndon\u2019t have to worry about thread management or spawning background threads. If\nyou\u2019re doing I/O-bound work, such as disk access or a network call, then\nyou can safely use async/await and you\u2019re all set. If, on the other\nhand, you need to do computationally intensive work that keeps the CPU busy,\nyou want to move it to an Isolate to avoid blocking the event loop, like\nyou would keep any sort of work out of the main thread in Android.", "For I/O-bound work, declare the function as an async function,\nand await on long-running tasks inside the function:", "This is how you would typically do network or database calls, which are both\nI/O operations.", "On Android, when you extend AsyncTask, you typically override 3 methods,\nonPreExecute(), doInBackground() and onPostExecute(). There is no\nequivalent in Flutter, since you await on a long running function, and\nDart\u2019s event loop takes care of the rest.", "However, there are times when you might be processing a large amount of data and\nyour UI hangs. In Flutter, use Isolates to take advantage of\nmultiple CPU cores to do long-running or computationally intensive tasks.", "Isolates are separate execution threads that do not share any memory\nwith the main execution memory heap. This means you can\u2019t access variables from\nthe main thread, or update your UI by calling setState().\nUnlike Android threads,\nIsolates are true to their name, and cannot share memory\n(in the form of static fields, for example).", "The following example shows, in a simple isolate, how to share data back to\nthe main thread to update the UI.", "Here, dataLoader() is the Isolate that runs in its own separate\nexecution thread.  In the isolate you can perform more CPU intensive\nprocessing (parsing a big JSON, for example),\nor perform computationally intensive math,\nsuch as encryption or signal processing.", "You can run the full example below:", "Making a network call in Flutter is easy when you use the\npopular http package.", "While the http package doesn\u2019t have every feature found in OkHttp,\nit abstracts away much of the networking that you would normally implement\nyourself, making it a simple way to make network calls.", "To add the http package as a dependency, run flutter pub add:", "To make a network call, call await on the async function http.get():", "In Android you would typically show a ProgressBar view in your UI while\nexecuting a long running task on a background thread.", "In Flutter, use a ProgressIndicator widget.\nShow the progress programmatically by controlling when it\u2019s rendered\nthrough a boolean flag. Tell Flutter to update its state before your\nlong-running task starts, and hide it after it ends.", "In the following example, the build function is separated into three different\nfunctions. If showLoadingDialog is true (when widgets.isEmpty),\nthen render the ProgressIndicator. Otherwise, render the\nListView with the data returned from a network call.", "While Android treats resources and assets as distinct items,\nFlutter apps have only assets. All resources that would live\nin the res/drawable-* folders on Android,\nare placed in an assets folder for Flutter.", "Flutter follows a simple density-based format like iOS.\nAssets might be 1.0x, 2.0x, 3.0x, or any other multiplier.\nFlutter doesn\u2019t have dps but there are logical pixels,\nwhich are basically the same as device-independent pixels.\nFlutter\u2019s devicePixelRatio expresses the ratio\nof physical pixels in a single logical pixel.", "The equivalent to Android\u2019s density buckets are:", "Assets are located in any arbitrary folder\u2014Flutter\nhas no predefined folder structure.\nYou declare the assets (with location) in\nthe pubspec.yaml file, and Flutter picks them up.", "Assets stored in the native asset folder are\naccessed on the native side using Android\u2019s AssetManager:", "Flutter can\u2019t access native resources or assets.", "To add a new image asset called my_icon.png to our Flutter project,\nfor example, and deciding that it should live in a folder we\narbitrarily called images, you would put the base image (1.0x)\nin the images folder, and all the other variants in sub-folders\ncalled with the appropriate ratio multiplier:", "Next, you\u2019ll need to declare these images in your pubspec.yaml file:", "You can then access your images using AssetImage:", "or directly in an Image widget:", "Flutter currently doesn\u2019t have a dedicated resources-like system for strings.\nAt the moment, the best practice is to hold your copy text in a class as\nstatic fields and accessing them from there. For example:", "Then in your code, you can access your strings as such:", "Flutter has basic support for accessibility on Android,\nthough this feature is a work in progress.", "Flutter developers are encouraged to use the\nintl package for internationalization and localization.", "In Android, you add dependencies by adding to your Gradle build script.\nFlutter uses Dart\u2019s own build system, and the Pub package manager.\nThe tools delegate the building of the native Android and iOS\nwrapper apps to the respective build systems.", "While there are Gradle files under the android folder in your\nFlutter project, only use these if you are adding native\ndependencies needed for per-platform integration.\nIn general, use pubspec.yaml to declare\nexternal dependencies to use in Flutter.\nA good place to find Flutter packages is pub.dev.", "In Android, an Activity represents a single focused thing the user can do.\nA Fragment represents a behavior or a portion of user interface.\nFragments are a way to modularize your code, compose sophisticated\nuser interfaces for larger screens, and help scale your application UI.\nIn Flutter, both of these concepts fall under the umbrella of Widgets.", "To learn more about the UI for building Activities and Fragements,\nsee the community-contributed Medium article,\nFlutter for Android Developers: How to design Activity UI in Flutter.", "As mentioned in the Intents section,\nscreens in Flutter are represented by Widgets since everything is\na widget in Flutter. Use a Navigator to move between different\nRoutes that represent different screens or pages,\nor perhaps different states or renderings of the same data.", "In Android, you can override methods from the Activity to capture lifecycle\nmethods for the activity itself, or register ActivityLifecycleCallbacks on\nthe Application. In Flutter, you have neither concept, but you can instead\nlisten to lifecycle events by hooking into the WidgetsBinding observer and\nlistening to the didChangeAppLifecycleState() change event.", "The observable lifecycle events are:", "For more details on the meaning of these states, see the\nAppLifecycleStatus documentation.", "As you might have noticed, only a small minority of the Activity\nlifecycle events are available; while FlutterActivity does\ncapture almost all the activity lifecycle events internally and\nsend them over to the Flutter engine, they\u2019re mostly shielded\naway from you. Flutter takes care of starting and stopping the\nengine for you, and there is little reason for needing to\nobserve the activity lifecycle on the Flutter side in most cases.\nIf you need to observe the lifecycle to acquire or release any\nnative resources, you should likely be doing it from the native side,\nat any rate.", "Here\u2019s an example of how to observe the lifecycle status of the\ncontaining activity:", "In Android, a LinearLayout is used to lay your widgets out\nlinearly\u2014either horizontally or vertically.\nIn Flutter, use the Row or Column\nwidgets to achieve the same result.", "If you notice the two code samples are identical with the exception of the\n\u201cRow\u201d and \u201cColumn\u201d widget. The children are the same and this feature can be\nexploited to develop rich layouts that can change overtime with the same\nchildren.", "To learn more about building linear layouts,\nsee the community-contributed Medium article\nFlutter for Android Developers: How to design LinearLayout in Flutter.", "A RelativeLayout lays your widgets out relative to each other. In\nFlutter, there are a few ways to achieve the same result.", "You can achieve the result of a RelativeLayout by using a combination of\nColumn, Row, and Stack widgets. You can specify rules for the widgets\nconstructors on how the children are laid out relative to the parent.", "For a good example of building a RelativeLayout in Flutter,\nsee Collin\u2019s answer on StackOverflow.", "In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s\ndevice has a smaller screen than your content, it scrolls.", "In Flutter, the easiest way to do this is using the ListView widget.\nThis might seem like overkill coming from Android,\nbut in Flutter a ListView widget is\nboth a ScrollView and an Android ListView.", "FlutterView handles the config change if AndroidManifest.xml contains:", "In Android, you can attach onClick to views such as button by calling\nthe method \u2018setOnClickListener\u2019.", "In Flutter there are two ways of adding touch listeners:", "Using the GestureDetector, you can listen to a wide range of Gestures such as:", "The following example shows a GestureDetector\nthat rotates the Flutter logo on a double tap:", "The equivalent to a ListView in Flutter is \u2026 a ListView!", "In an Android ListView, you create an adapter and pass it into the\nListView, which renders each row with what your adapter returns. However, you\nhave to make sure you recycle your rows, otherwise, you get all sorts of crazy\nvisual glitches and memory issues.", "Due to Flutter\u2019s immutable widget pattern, you pass a list of\nwidgets to your ListView, and Flutter takes care of making sure\nthat scrolling is fast and smooth.", "In Android, the ListView has a method to find out which item was clicked,\n\u2018onItemClickListener\u2019.\nIn Flutter, use the touch handling provided by the passed-in widgets.", "On Android, you update the adapter and call notifyDataSetChanged.", "In Flutter, if you were to update the list of widgets inside a setState(),\nyou would quickly see that your data did not change visually.\nThis is because when setState() is called, the Flutter rendering engine\nlooks at the widget tree to see if anything has changed. When it gets to your\nListView, it performs a == check, and determines that the two\nListViews are the same. Nothing has changed, so no update is required.", "For a simple way to update your ListView, create a new List inside of\nsetState(), and copy the data from the old list to the new list.\nWhile this approach is simple, it is not recommended for large data sets,\nas shown in the next example.", "The recommended, efficient, and effective way to build a list uses a\nListView.Builder. This method is great when you have a dynamic\nList or a List with very large amounts of data. This is essentially\nthe equivalent of RecyclerView on Android, which automatically\nrecycles list elements for you:", "Instead of creating a \u201cListView\u201d, create a\nListView.builder that takes two key parameters: the\ninitial length of the list, and an ItemBuilder function.", "The ItemBuilder function is similar to the getView\nfunction in an Android adapter; it takes a position,\nand returns the row you want rendered at that position.", "Finally, but most importantly, notice that the onTap() function\ndoesn\u2019t recreate the list anymore, but instead .adds to it.", "In Android SDK (as of Android O), you create a Font resource file and\npass it into the FontFamily param for your TextView.", "In Flutter, place the font file in a folder and reference it in the\npubspec.yaml file, similar to how you import images.", "Then assign the font to your Text widget:", "Along with fonts, you can customize other styling elements on a Text widget.\nThe style parameter of a Text widget takes a TextStyle object, where you can\ncustomize many parameters, such as:", "For more information on using Forms,\nsee Retrieve the value of a text field,\nfrom the Flutter cookbook.", "In Flutter, you can easily show a \u201chint\u201d or a placeholder text for your input by\nadding an InputDecoration object to the decoration constructor parameter for\nthe Text Widget.", "Just as you would with a \u201chint\u201d, pass an InputDecoration object\nto the decoration constructor for the Text widget.", "However, you don\u2019t want to start off by showing an error.\nInstead, when the user has entered invalid data,\nupdate the state, and pass a new InputDecoration object.", "Use the geolocator community plugin.", "The image_picker plugin is popular\nfor accessing the camera.", "To Log in with Facebook, use the\nflutter_facebook_login community plugin.", "Most Firebase functions are covered by\nfirst party plugins.\nThese plugins are first-party integrations,\nmaintained by the Flutter team:", "You can also find some third-party Firebase plugins on\npub.dev that cover areas not directly covered by the\nfirst-party plugins.", "If there is platform-specific functionality that Flutter\nor its community Plugins are missing,\nyou can build your own following the\ndeveloping packages and plugins page.", "Flutter\u2019s plugin architecture, in a nutshell, is much like using an Event bus in\nAndroid: you fire off a message and let the receiver process and emit a result\nback to you. In this case, the receiver is code running on the native side\non Android or iOS.", "If you use the NDK in your current Android application and want your Flutter\napplication to take advantage of your native libraries then it\u2019s possible by\nbuilding a custom plugin.", "Your custom plugin first talks to your Android app, where you call your\nnative functions over JNI. Once a response is ready,\nsend a message back to Flutter and render the result.", "Calling native code directly from Flutter is currently not supported.", "Out of the box, Flutter comes with a beautiful implementation of Material\nDesign, which takes care of a lot of styling and theming needs that you would\ntypically do. Unlike Android where you declare themes in XML and then assign it\nto your application using AndroidManifest.xml, in Flutter you declare themes\nin the top level widget.", "To take full advantage of Material Components in your app, you can declare a top\nlevel widget MaterialApp as the entry point to your application. MaterialApp\nis a convenience widget that wraps a number of widgets that are commonly\nrequired for applications implementing Material Design.\nIt builds upon a WidgetsApp by adding Material specific functionality.", "You can also use a WidgetsApp as your app widget, which provides some of the\nsame functionality, but is not as rich as MaterialApp.", "To customize the colors and styles of any child components, pass a\nThemeData object to the MaterialApp widget. For example, in the code below,\nthe primary swatch is set to blue and text selection color is red.", "In Android, you can store a small collection of key-value pairs using\nthe SharedPreferences API.", "In Flutter, access this functionality using the\nShared_Preferences plugin.\nThis plugin wraps the functionality of both\nShared Preferences and NSUserDefaults (the iOS equivalent).", "In Android, you use SQLite to store structured data that you can query\nusing SQL.", "In Flutter, access this functionality using the\nSQFlite plugin.", "Use the DevTools suite for debugging Flutter or Dart apps.", "DevTools includes support for profiling, examining the heap,\ninspecting the widget tree, logging diagnostics, debugging,\nobserving executed lines of code, debugging memory leaks and memory\nfragmentation. For more information, see the\nDevTools documentation.", "In Android, you use Firebase Cloud Messaging to setup push\nnotifications for your app.", "In Flutter, access this functionality using the\nFirebase Messaging plugin.\nFor more information on using the Firebase Cloud Messaging API,\nsee the firebase_messaging plugin documentation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/android-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "Text | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/design/text", "base_url": "https://docs.flutter.dev/"}, {"title": "Introduction to animations | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Well-designed animations make a UI feel more intuitive,\ncontribute to the slick look and feel of a polished app,\nand improve the user experience.\nFlutter\u2019s animation support makes it easy to implement a variety of\nanimation types. Many widgets, especially Material widgets,\ncome with the standard motion effects defined in their design spec,\nbut it\u2019s also possible to customize these effects.", "There are different approaches you can take when creating\nanimations in Flutter. Which approach is right for you?\nTo help you decide, check out the video,\nHow to choose which Flutter Animation Widget is right for you?\n(Also published as a companion article.)", "(To dive deeper into the decision process,\nwatch the Animations in Flutter done right video,\npresented at Flutter Europe.)", "As shown in the video, the following\ndecision tree helps you decide what approach\nto use when implementing a Flutter animation:", "If a pre-packaged implicit animation (the easiest animation\nto implement) suits your needs, watch\nAnimation basics with implicit animations.\n(Also published as a companion article.)", "To create a custom implicit animation, watch\nCreating your own custom implicit animations with TweenAnimationBuilder.\n(Also published as a companion article.)", "To create an explicit animation (where you control the animation,\nrather than letting the framework control it), perhaps\nyou can use one of the built-in explicit animations classes.\nFor more information, watch\nMaking your first directional animations with\nbuilt-in explicit animations.\n(Also published as a companion article.)", "If you need to build an explicit animation from scratch, watch\nCreating custom explicit animations with\nAnimatedBuilder and AnimatedWidget.\n(Also published as a companion article.)", "For a deeper understanding of just how animations work in Flutter, watch\nAnimation deep dive.\n(Also published as a companion article.)", "The following resources are a good place to start learning\nthe Flutter animation framework. Each of these documents\nshows how to write animation code.", "Implicit animations codelab\nCovers how to use implicit animations\nusing step-by-step instructions and interactive examples.", "Animations tutorial\nExplains the fundamental classes in the Flutter animation package\n(controllers, Animatable, curves, listeners, builders),\nas it guides you through a progression of tween animations using\ndifferent aspects of the animation APIs. This tutorial shows\nhow to create your own custom explicit animations.", "Zero to One with Flutter, part 1 and part 2\nMedium articles showing how to create an animated chart using tweening.", "Write your first Flutter app on the web\nCodelab demonstrating how to create a form\nthat uses animation to show the user\u2019s progress\nas they fill in the fields.", "Generally, animations are either tween- or physics-based.\nThe following sections explain what these terms mean,\nand point you to resources where you can learn more.", "Short for in-betweening. In a tween animation, the beginning\nand ending points are defined, as well as a timeline, and a curve\nthat defines the timing and speed of the transition.\nThe framework calculates how to transition from the beginning point\nto the end point.", "The documents listed above, such as the\nAnimations tutorial, are not specifically\nabout tweening, but they use tweens in their examples.", "In physics-based animation, motion is modeled to resemble real-world\nbehavior. When you toss a ball, for example, where and when it lands\ndepends on how fast it was tossed and how far it was from the ground.\nSimilarly, dropping a ball attached to a spring falls\n(and bounces) differently than dropping a ball attached to a string.", "Animate a widget using a physics simulation\nA recipe in the animations section of the Flutter cookbook.", "Flutter Gallery\nUnder Material Components, the Grid example\ndemonstrates a fling animation. Select one of the\nimages from the grid and zoom in. You can pan the\nimage with flinging or dragging gestures.", "Also see the API documentation for\nAnimationController.animateWith and\nSpringSimulation.", "If you are using Material widgets, you might check\nout the animations package available on pub.dev.\nThis package contains pre-built animations for\nthe following commonly used patterns:\nContainer transforms, shared axis transitions,\nfade through transitions, and fade transitions.", "Most UX or motion designers find that certain\nanimation patterns are used repeatedly when designing a UI.\nThis section lists some of the commonly\nused animation patterns, and tells you where to learn more.", "This pattern involves animating the addition or removal of\nelements from a list or grid.", "In this pattern, the user selects an element\u2014often an\nimage\u2014from the page, and the UI animates the selected element\nto a new page with more detail. In Flutter, you can easily implement\nshared element transitions between routes (pages)\nusing the Hero widget.", "Flutter Gallery\nYou can build the Gallery app yourself,\nor download it from the Play Store. The Shrine\ndemo includes an example of a hero animation.", "Animations that are broken into smaller motions,\nwhere some of the motion is delayed.\nThe smaller animations might be sequential,\nor might partially or completely overlap.", "Learn more about Flutter animations at the following links:", "Animation samples from the Sample app catalog.", "Animation recipes from the Flutter cookbook.", "Animation videos from the Flutter YouTube channel.", "Animations: overview\nA look at some of the major classes in the\nanimations library, and Flutter\u2019s animation architecture.", "Animation and motion widgets\nA catalog of some of the animation widgets\nprovided in the Flutter APIs.", "The animation library in the Flutter API documentation\nThe animation API for the Flutter framework. This link\ntakes you to a technical overview page for the library.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations", "base_url": "https://docs.flutter.dev/"}, {"title": "Terms of Service | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter website (the \u201cWebsite\u201d) is hosted by Google. By using and / or\nvisiting the Website, you consent to be bound by Google\u2019s general\nTerms of Service and Privacy Policy.", "The \u201cFlutter\u201d name and the Flutter logo\n\n(the \u201cFlutter Marks\u201d) are trademarks owned by Google and are not included\nwithin the assets licensed under the Creative Commons Attribution 4.0\nInternational License.  Google grants you a non-transferable,\nnon-exclusive, royalty-free limited license to use the Flutter Marks\nsubject to your compliance with the Flutter Brand Guidelines.\nExcept as set forth above, nothing herein grants or should be deemed\nto grant to you any right, title or interest in or to the Flutter Marks.", "As noted above, Google owns the Flutter trademarks, but we license them\nso they can be used by the developer community to support the Flutter\nSDK, including through training materials and other community content.", "At the same time, it\u2019s important to make sure that people don\u2019t\nuse the marks in ways that could cause confusion or otherwise misuse\nthe marks, so we have prepared brand guidelines that describe the\nallowed uses of the marks. Our goal in protecting the Flutter trademarks\nis to benefit the entire community by ensuring that the marks are only used\nin ways that are consistent with Google\u2019s mission to provide a free and open\nsource SDK.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tos", "base_url": "https://docs.flutter.dev/"}, {"title": "Android | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android", "base_url": "https://docs.flutter.dev/"}, {"title": "Work with tabs | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Working with tabs is a common pattern in apps that follow the\nMaterial Design guidelines.\nFlutter includes a convenient way to create tab layouts as part of\nthe material library.", "info Note:\n  To create tabs in a Cupertino app, see the\n  Building a Cupertino app with Flutter codelab.", "This recipe creates a tabbed example using the following steps;", "For tabs to work, you need to keep the selected tab and content\nsections in sync.\nThis is the job of the TabController.", "Either create a TabController manually,\nor automatically by using a DefaultTabController widget.", "Using DefaultTabController is the simplest option, since it\ncreates a TabController and makes it available to all descendant widgets.", "When a tab is selected, it needs to display content.\nYou can create tabs using the TabBar widget.\nIn this example, create a TabBar with three\nTab widgets and place it within an AppBar.", "By default, the TabBar looks up the widget tree for the nearest\nDefaultTabController. If you\u2019re manually creating a TabController,\npass it to the TabBar.", "Now that you have tabs, display content when a tab is selected.\nFor this purpose, use the TabBarView widget.", "info Note:\n  Order is important and must correspond to the order of the tabs in the\n  TabBar.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/tabs", "base_url": "https://docs.flutter.dev/"}, {"title": "Implicit animations | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "With Flutter\u2019s animation library,\nyou can add motion and create visual effects\nfor the widgets in your UI.\nOne part of the library is an assortment of widgets\nthat manage animations for you.\nThese widgets are collectively referred to as implicit animations,\nor implicitly animated widgets, deriving their name from the\nImplicitlyAnimatedWidget class that they implement.\nThe following set of resources provide many ways to learn\nabout implicit animations in Flutter.", "Flutter in Focus videos feature 5-10 minute tutorials\nwith real code that cover techniques\nthat every Flutter dev needs to know from top to bottom.\nThe following videos cover topics\nthat are relevant to implicit animations.", "Watch the Boring Show to follow Google Engineers build apps\nfrom scratch in Flutter. The following episode covers\nusing implicit animations in a news aggregator app.", "A weekly series of short animated videos each showing\nthe important features of one particular widget.\nIn about 60 seconds, you\u2019ll see real code for each\nwidget with a demo about how it works.\nThe following Widget of the Week videos cover\nimplicitly animated widgets:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations/implicit-animations", "base_url": "https://docs.flutter.dev/"}, {"title": "Write your first Flutter app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You are now ready to start the \u201cFirst Flutter app\u201d codelab.\nIn about an hour and a half,\nyou will learn the basics of Flutter\nby creating an app\nthat works on mobile, desktop, and web.", "tips_and_updates Tip:\n  The codelab above walks you through writing your first Flutter\n  app for all platforms \u2014 mobile, desktop and web.\n  You might prefer to take\n  another codelab written specifically for the web.", "If you prefer an instructor-led version of this codelab,\ncheck out the following workshop:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/codelab", "base_url": "https://docs.flutter.dev/"}, {"title": "Communicate with WebSockets | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In addition to normal HTTP requests,\nyou can connect to servers using WebSockets.\nWebSockets allow for two-way communication with a server\nwithout polling.", "In this example, connect to a\ntest WebSocket server sponsored by Lob.com.\nThe server sends back the same message you send to it.\nThis recipe uses the following steps:", "The web_socket_channel package provides the\ntools you need to connect to a WebSocket server.", "The package provides a WebSocketChannel\nthat allows you to both listen for messages\nfrom the server and push messages to the server.", "In Flutter, use the following line to\ncreate a WebSocketChannel that connects to a server:", "Now that you\u2019ve established a connection,\nlisten to messages from the server.", "After sending a message to the test server,\nit sends the same message back.", "In this example, use a StreamBuilder\nwidget to listen for new messages, and a\nText widget to display them.", "The WebSocketChannel provides a\nStream of messages from the server.", "The Stream class is a fundamental part of the dart:async package.\nIt provides a way to listen to async events from a data source.\nUnlike Future, which returns a single async response,\nthe Stream class can deliver many events over time.", "The StreamBuilder widget connects to a Stream\nand asks Flutter to rebuild every time it\nreceives an event using the given builder() function.", "To send data to the server,\nadd() messages to the sink provided\nby the WebSocketChannel.", "The WebSocketChannel provides a\nStreamSink to push messages to the server.", "The StreamSink class provides a general way to add sync or async\nevents to a data source.", "After you\u2019re done using the WebSocket, close the connection:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/web-sockets", "base_url": "https://docs.flutter.dev/"}, {"title": "Set up an editor | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You can build apps with Flutter using any text editor or\nintegrated development environment (IDE)\ncombined with Flutter\u2019s command-line tools.\nThe Flutter team recommends using an editor that supports\na Flutter extension or plugin, like VS Code and Android Studio.\nThese plugins provide code completion, syntax highlighting,\nwidget editing assists, run & debug support, and more.", "You can add a supported plugin for Visual Studio Code,\nAndroid Studio, or IntelliJ IDEA Community, Educational,\nand Ultimate editions.\nThe Flutter plugin only works with\nAndroid Studio and the listed editions of IntelliJ IDEA.", "(The Dart plugin supports eight additional JetBrains IDEs.)", "Follow these procedures to add the Flutter plugin to VS Code,\nAndroid Studio, or IntelliJ.", "If you choose another IDE, skip ahead to the next step: Test drive.", "VS Code is a code editor to build and debug apps.\nWith the Flutter extension installed, you can compile, deploy, and debug\nFlutter apps.", "To install the latest version of VS Code,\nfollow Microsoft\u2019s instructions for the relevant platform:", "Open a browser and go to the Flutter extension page\non the Visual Studio Marketplace.", "Click Install.\nInstalling the Flutter extension also installs the Dart extension.", "Go to View > Output.", "You can also press Ctrl / Cmd +\nShift + U.", "In the dropdown on the upper right of the Output panel,\nselect flutter (flutter).", "Go to View >\nCommand Palette\u2026.", "You can also press Ctrl / Cmd +\nShift + P.", "Select the Flutter: Run Flutter Doctor.\nFlutter Doctor runs and its response displays in the Output panel.", "Android Studio and IntelliJ IDEA offer a complete,\nIDE experience once you install the Flutter plugin.", "To install the latest version of the following IDEs, follow their instructions:", "The installation instructions vary by platform.", "Use the following instructions for macOS:", "Start Android Studio or IntelliJ.", "From the macOS menu bar, go to Android Studio (or IntelliJ)\n> Settings\u2026.", "You can also press Cmd + ,.", "The Preferences dialog opens.", "From the list at the left, select Plugins.", "From the top of this panel, select Marketplace.", "Type flutter in the plugins search field.", "Select the Flutter plugin.", "Click Yes when prompted to install the plugin.", "Click Restart when prompted.", "Use the following instructions for Linux or Windows:", "Go to File >\nSettings.", "You can also press Ctrl + Alt +\nS.", "The Preferences dialog opens.", "From the list at the left, select Plugins.", "From the top of this panel, select Marketplace.", "Type flutter in the plugins search field.", "Select the Flutter plugin.", "Click Yes when prompted to install the plugin.", "Click Restart when prompted.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/editor", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for UIKit developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "iOS developers with experience using UIKit\nwho want to write mobile apps using Flutter\nshould review this guide.\nIt explains how to apply existing UIKit knowledge to Flutter.", "info Note:\n  If you have experience building apps with SwiftUI,\n  check out Flutter for SwiftUI developers instead.", "Flutter is a framework for building cross-platform applications\nthat uses the Dart programming language.\nTo understand some differences between programming with Dart\nand programming with Swift, see Learning Dart as a Swift Developer\nand Flutter concurrency for Swift developers.", "Your iOS and UIKit knowledge and experience\nare highly valuable when building with Flutter.\nFlutter also makes a number of adaptations\nto app behavior when running on iOS.\nTo learn how, see Platform adaptations.", "info\n  To integrate Flutter code into an existing iOS app, \n  check out Add Flutter to existing app.", "Use this guide as a cookbook.\nJump around and find questions that address your most relevant needs.", "As an introduction, watch the following video.\nIt outlines how Flutter works on iOS and how to use Flutter to build iOS apps.", "How is react-style, or declarative,\n  programming different from the\n  traditional imperative style?\n  For a comparison, see Introduction to declarative UI.", "In UIKit, most of what you create in the UI is done using view objects,\nwhich are instances of the UIView class.\nThese can act as containers for other UIView classes,\nwhich form your layout.", "In Flutter, the rough equivalent to a UIView is a Widget.\nWidgets don\u2019t map exactly to iOS views,\nbut while you\u2019re getting acquainted with how Flutter works\nyou can think of them as \u201cthe way you declare and construct UI\u201d.", "However, these have a few differences to a UIView.\nTo start, widgets have a different lifespan: they are immutable\nand only exist until they need to be changed.\nWhenever widgets or their state change,\nFlutter\u2019s framework creates a new tree of widget instances.\nIn comparison, a UIKit view is not recreated when it changes,\nbut rather it\u2019s a mutable entity that is drawn once\nand doesn\u2019t redraw until it is invalidated using setNeedsDisplay().", "Furthermore, unlike UIView, Flutter\u2019s widgets are lightweight,\nin part due to their immutability.\nBecause they aren\u2019t views themselves,\nand aren\u2019t directly drawing anything,\nbut rather are a description of the UI and its semantics\nthat get \u201cinflated\u201d into actual view objects under the hood.", "Flutter includes the Material Components library.\nThese are widgets that implement the\nMaterial Design guidelines.\nMaterial Design is a flexible design system\noptimized for all platforms, including iOS.", "But Flutter is flexible and expressive enough\nto implement any design language.\nOn iOS, you can use the Cupertino widgets\nto produce an interface that looks like\nApple\u2019s iOS design language.", "To update your views in UIKit, you directly mutate them.\nIn Flutter, widgets are immutable and not updated directly.\nInstead, you have to manipulate the widget\u2019s state.", "This is where the concept of Stateful vs Stateless widgets\ncomes in. A StatelessWidget is just what it sounds\nlike\u2014a widget with no state attached.", "StatelessWidgets are useful when the part of the user interface you are\ndescribing does not depend on anything other than the initial configuration\ninformation in the widget.", "For example, with UIKit, this is similar to placing a UIImageView\nwith your logo as the image. If the logo is not changing during runtime,\nuse a StatelessWidget in Flutter.", "If you want to dynamically change the UI based on data received\nafter making an HTTP call, use a StatefulWidget.\nAfter the HTTP call has completed, tell the Flutter framework\nthat the widget\u2019s State is updated, so it can update the UI.", "The important difference between stateless and\nstateful widgets is that StatefulWidgets have a State object\nthat stores state data and carries it over across tree rebuilds,\nso it\u2019s not lost.", "If you are in doubt, remember this rule:\nif a widget changes outside of the build method\n(because of runtime user interactions, for example),\nit\u2019s stateful.\nIf the widget never changes, once built, it\u2019s stateless.\nHowever, even if a widget is stateful, the containing parent widget\ncan still be stateless if it isn\u2019t itself reacting to those changes\n(or other inputs).", "The following example shows how to use a StatelessWidget.\nA commonStatelessWidget is the Text widget.\nIf you look at the implementation of the Text widget,\nyou\u2019ll find it subclasses StatelessWidget.", "If you look at the code above, you might notice that the Text widget\ncarries no explicit state with it. It renders what is passed in its\nconstructors and nothing more.", "But, what if you want to make \u201cI Like Flutter\u201d change dynamically,\nfor example when clicking a FloatingActionButton?", "To achieve this, wrap the Text widget in a StatefulWidget and\nupdate it when the user clicks the button.", "In UIKit, you might use a Storyboard file\nto organize your views and set constraints,\nor you might set your constraints programmatically in your view controllers.\nIn Flutter, declare your layout in code by composing a widget tree.", "The following example shows how to display a simple widget with padding:", "You can add padding to any widget,\nwhich mimics the functionality of constraints in iOS.", "You can view the layouts that Flutter has to offer\nin the widget catalog.", "In UIKit, you call addSubview() on the parent,\nor removeFromSuperview() on a child view\nto dynamically add or remove child views.\nIn Flutter, because widgets are immutable,\nthere is no direct equivalent to addSubview().\nInstead, you can pass a function to the parent\nthat returns a widget, and control that child\u2019s creation\nwith a boolean flag.", "The following example shows how to toggle between two widgets\nwhen the user clicks the FloatingActionButton:", "In UIKit, you create an animation by calling the\nanimate(withDuration:animations:) method on a view.\nIn Flutter, use the animation library\nto wrap widgets inside an animated widget.", "In Flutter, use an AnimationController, which is an Animation<double>\nthat can pause, seek, stop, and reverse the animation.\nIt requires a Ticker that signals when vsync happens\nand produces a linear interpolation\nbetween 0 and 1 on each frame while it\u2019s running.\nYou then create one or more\nAnimations and attach them to the controller.", "For example, you might use CurvedAnimation\nto implement an animation along an interpolated curve.\nIn this sense, the controller is the \u201cmaster\u201d source\nof the animation progress\nand the CurvedAnimation computes the curve\nthat replaces the controller\u2019s default linear motion.\nLike widgets, animations in Flutter work with composition.", "When building the widget tree you assign the Animation to an animated\nproperty of a widget, such as the opacity of a FadeTransition,\nand tell the controller to start the animation.", "The following example shows how to write a FadeTransition that\nfades the widget into a logo when you press the FloatingActionButton:", "For more information, see Animation & Motion widgets,\nthe Animations tutorial, and the Animations overview.", "In UIKit, you use CoreGraphics to draw lines and shapes to the\nscreen. Flutter has a different API based on the Canvas class,\nwith two other classes that help you draw: CustomPaint and CustomPainter,\nthe latter of which implements your algorithm to draw to the canvas.", "To learn how to implement a signature painter in Flutter,\nsee Collin\u2019s answer on StackOverflow.", "In UIKit, everything has .opacity or .alpha.\nIn Flutter, most of the time you need to\nwrap a widget in an Opacity widget to accomplish this.", "In UIKit, you typically subclass UIView, or use a pre-existing view,\nto override and implement methods that achieve the desired behavior.\nIn Flutter, build a custom widget by composing smaller widgets\n(instead of extending them).", "For example, how do you build a CustomButton\nthat takes a label in the constructor?\nCreate a CustomButton that composes a ElevatedButton with a label,\nrather than by extending ElevatedButton:", "Then use CustomButton,\njust as you\u2019d use any other Flutter widget:", "This section of the document discusses navigation\nbetween pages of an app, the push and pop mechanism, and more.", "In UIKit, to travel between view controllers, you can use a\nUINavigationController that manages the stack of view controllers\nto display.", "Flutter has a similar implementation,\nusing a Navigator and Routes.\nA Route is an abstraction for a \u201cscreen\u201d or \u201cpage\u201d of an app,\nand a Navigator is a widget\nthat manages routes. A route roughly maps to a\nUIViewController. The navigator works in a similar way to the iOS\nUINavigationController, in that it can push() and pop()\nroutes depending on whether you want to navigate to, or back from, a view.", "To navigate between pages, you have a couple options:", "The following example builds a Map.", "Navigate to a route by pushing its name to the Navigator.", "The Navigator class handles routing in Flutter and is used to get\na result back from a route that you have pushed on the stack.\nThis is done by awaiting on the Future returned by push().", "For example, to start a location route that lets the user select their\nlocation, you might do the following:", "And then, inside your location route, once the user has selected their\nlocation, pop() the stack with the result:", "In UIKit, to send the user to another application,\nyou use a specific URL scheme.\nFor the system level apps, the scheme depends on the app.\nTo implement this functionality in Flutter,\ncreate a native platform integration, or use an\nexisting plugin, such as url_launcher.", "Calling SystemNavigator.pop() from your Dart code\ninvokes the following iOS code:", "If that doesn\u2019t do what you want, you can create your own\nplatform channel to invoke arbitrary iOS code.", "Unlike iOS, which has the Localizable.strings file,\nFlutter doesn\u2019t currently have a dedicated system for handling strings.\nAt the moment, the best practice is to declare your copy text\nin a class as static fields and access them from there. For example:", "You can access your strings as such:", "By default, Flutter only supports US English for its strings.\nIf you need to add support for other languages,\ninclude the flutter_localizations package.\nYou might also need to add Dart\u2019s intl\npackage to use i10n machinery, such as date/time formatting.", "To use the flutter_localizations package,\nspecify the localizationsDelegates and\nsupportedLocales on the app widget:", "The delegates contain the actual localized values,\nwhile the supportedLocales defines which locales the app supports.\nThe above example uses a MaterialApp,\nso it has both a GlobalWidgetsLocalizations\nfor the base widgets localized values,\nand a MaterialWidgetsLocalizations for the Material widgets localizations.\nIf you use WidgetsApp for your app, you don\u2019t need the latter.\nNote that these two delegates contain \u201cdefault\u201d values,\nbut you\u2019ll need to provide one or more delegates\nfor your own app\u2019s localizable copy,\nif you want those to be localized too.", "When initialized, the WidgetsApp (or MaterialApp)\ncreates a Localizations widget for you,\nwith the delegates you specify.\nThe current locale for the device is always accessible\nfrom the Localizations widget from the current context\n(in the form of a Locale object), or using the Window.locale.", "To access localized resources, use the Localizations.of() method\nto access a specific localizations class that is provided by a given delegate.\nUse the intl_translation package to extract translatable copy\nto arb files for translating, and importing them back into the app\nfor using them with intl.", "For further details on internationalization and localization in Flutter,\nsee the internationalization guide, which has sample code\nwith and without the intl package.", "In iOS, you add dependencies with CocoaPods by adding to your Podfile.\nFlutter uses Dart\u2019s build system and the Pub package manager\nto handle dependencies. The tools delegate the building of the\nnative Android and iOS wrapper apps to the\nrespective build systems.", "While there is a Podfile in the iOS folder in your\nFlutter project, only use this if you are adding native\ndependencies needed for per-platform integration.\nIn general, use pubspec.yaml to declare external dependencies in Flutter.\nA good place to find great packages for Flutter is on pub.dev.", "This section of the document discusses the equivalent\nof ViewController in Flutter and how to listen to\nlifecycle events.", "In UIKit, a ViewController represents a portion of user interface,\nmost commonly used for a screen or section.\nThese are composed together to build complex user interfaces,\nand help scale your application\u2019s UI.\nIn Flutter, this job falls to Widgets.\nAs mentioned in the Navigation section,\nscreens in Flutter are represented by Widgets since\n\u201ceverything is a widget!\u201d\nUse a Navigator to move between different Routes\nthat represent different screens or pages,\nor maybe different states or renderings of the same data.", "In UIKit, you can override methods to the ViewController\nto capture lifecycle methods for the view itself,\nor register lifecycle callbacks in the AppDelegate.\nIn Flutter, you have neither concept, but you can instead\nlisten to lifecycle events by hooking into\nthe WidgetsBinding observer and listening to\nthe didChangeAppLifecycleState() change event.", "The observable lifecycle events are:", "For more details on the meaning of these states, see\nAppLifecycleState documentation.", "This section discusses different layouts in Flutter\nand how they compare with UIKit.", "In UIKit, you might show a list in\neither a UITableView or a UICollectionView.\nIn Flutter, you have a similar implementation using a ListView.\nIn UIKit, these views have delegate methods\nfor deciding the number of rows,\nthe cell for each index path, and the size of the cells.", "Due to Flutter\u2019s immutable widget pattern,\nyou pass a list of widgets to your ListView,\nand Flutter takes care of making sure that\nscrolling is fast and smooth.", "In UIKit, you implement the delegate method,\ntableView:didSelectRowAtIndexPath:.\nIn Flutter, use the touch handling provided by the passed-in widgets.", "In UIKit, you update the data for the list view,\nand notify the table or collection view using the\nreloadData method.", "In Flutter, if you update the list of widgets inside a setState(),\nyou quickly see that your data doesn\u2019t change visually.\nThis is because when setState() is called,\nthe Flutter rendering engine looks at the widget tree\nto see if anything has changed.\nWhen it gets to your ListView, it performs an == check,\nand determines that the two ListViews are the same.\nNothing has changed, so no update is required.", "For a simple way to update your ListView,\ncreate a new List inside of setState(),\nand copy the data from the old list to the new list.\nWhile this approach is simple,\nit is not recommended for large data sets,\nas shown in the next example.", "The recommended, efficient,\nand effective way to build a list uses a ListView.Builder.\nThis method is great when you have a dynamic\nlist or a list with very large amounts of data.", "Instead of creating a ListView, create a ListView.builder\nthat takes two key parameters: the initial length of the list,\nand an ItemBuilder function.", "The ItemBuilder function is similar to the cellForItemAt\ndelegate method in an iOS table or collection view,\nas it takes a position, and returns the\ncell you want rendered at that position.", "Finally, but most importantly, notice that the onTap() function\ndoesn\u2019t recreate the list anymore, but instead .adds to it.", "In UIKit, you wrap your views in a ScrollView that\nallows a user to scroll your content if needed.", "In Flutter the easiest way to do this is using the ListView widget.\nThis acts as both a ScrollView and an iOS TableView,\nas you can layout widgets in a vertical format.", "For more detailed docs on how to lay out widgets in Flutter,\nsee the layout tutorial.", "This section discusses how to detect gestures\nand handle different events in Flutter,\nand how they compare with UIKit.", "In UIKit, you attach a GestureRecognizer to a view to\nhandle click events.\nIn Flutter, there are two ways of adding touch listeners:", "If the widget supports event detection, pass a function to it,\nand handle the event in the function. For example, the\nElevatedButton widget has an onPressed parameter:", "If the Widget doesn\u2019t support event detection,\nwrap the widget in a GestureDetector and pass a function\nto the onTap parameter.", "Using GestureDetector you can listen\nto a wide range of gestures such as:", "The following example shows a GestureDetector\nthat rotates the Flutter logo on a double tap:", "Flutter applications are easy to style; you can switch\nbetween light and dark themes,\nchange the style of your text and UI components,\nand more. This section covers aspects of styling your Flutter apps\nand compares how you might do the same in UIKit.", "Out of the box, Flutter comes with a beautiful implementation\nof Material Design, which takes care of a lot of styling and\ntheming needs that you would typically do.", "To take full advantage of Material Components in your app,\ndeclare a top-level widget, MaterialApp,\nas the entry point to your application.\nMaterialApp is a convenience widget that wraps a number\nof widgets that are commonly required for applications\nimplementing Material Design.\nIt builds upon a WidgetsApp by adding Material specific functionality.", "But Flutter is flexible and expressive enough to implement\nany design language. On iOS, you can use the\nCupertino library to produce an interface that adheres to the\nHuman Interface Guidelines.\nFor the full set of these widgets,\nsee the Cupertino widgets gallery.", "You can also use a WidgetsApp as your app widget,\nwhich provides some of the same functionality,\nbut is not as rich as MaterialApp.", "To customize the colors and styles of any child components,\npass a ThemeData object to the MaterialApp widget.\nFor example, in the code below,\nthe primary swatch is set to blue and divider color is grey.", "In UIKit, you import any ttf font files into your project\nand create a reference in the info.plist file.\nIn Flutter, place the font file in a folder\nand reference it in the pubspec.yaml file,\nsimilar to how you import images.", "Then assign the font to your Text widget:", "Along with fonts, you can customize other styling elements on a Text widget.\nThe style parameter of a Text widget takes a TextStyle object,\nwhere you can customize many parameters, such as:", "While iOS treats images and assets as distinct items,\nFlutter apps have only assets. Resources that are\nplaced in the Images.xcasset folder on iOS,\nare placed in an assets\u2019 folder for Flutter.\nAs with iOS, assets are any type of file, not just images.\nFor example, you might have a JSON file located in the my-assets folder:", "Declare the asset in the pubspec.yaml file:", "And then access it from code using an AssetBundle:", "For images, Flutter follows a simple density-based format like iOS.\nImage assets might be 1.0x, 2.0x, 3.0x, or any other multiplier.\nFlutter\u2019s devicePixelRatio expresses the ratio\nof physical pixels in a single logical pixel.", "Assets are located in any arbitrary folder\u2014\nFlutter has no predefined folder structure.\nYou declare the assets (with location) in\nthe pubspec.yaml file, and Flutter picks them up.", "For example, to add an image called my_icon.png to your Flutter\nproject, you might decide to store it in a folder arbitrarily called images.\nPlace the base image (1.0x) in the images folder, and the\nother variants in sub-folders named after the appropriate ratio multiplier:", "Next, declare these images in the pubspec.yaml file:", "You can now access your images using AssetImage:", "or directly in an Image widget:", "For more details, see\nAdding Assets and Images in Flutter.", "This section discusses how to use forms in Flutter\nand how they compare with UIKit.", "Given how Flutter uses immutable widgets with a separate state,\nyou might be wondering how user input fits into the picture.\nIn UIKit, you usually query the widgets for their current values\nwhen it\u2019s time to submit the user input, or action on it.\nHow does that work in Flutter?", "In practice forms are handled, like everything in Flutter,\nby specialized widgets. If you have a TextField or a\nTextFormField, you can supply a TextEditingController\nto retrieve user input:", "You can find more information and the full code listing in\nRetrieve the value of a text field,\nfrom the Flutter cookbook.", "In Flutter, you can easily show a \u201chint\u201d or a placeholder text\nfor your field by adding an InputDecoration object\nto the decoration constructor parameter for the Text widget:", "Just as you would with a \u201chint\u201d, pass an InputDecoration object\nto the decoration constructor for the Text widget.", "However, you don\u2019t want to start off by showing an error.\nInstead, when the user has entered invalid data,\nupdate the state, and pass a new InputDecoration object.", "This section discusses concurrency in Flutter and\nhow it compares with UIKit.", "Dart has a single-threaded execution model,\nwith support for Isolates\n(a way to run Dart code on another thread),\nan event loop, and asynchronous programming.\nUnless you spawn an Isolate,\nyour Dart code runs in the main UI thread and is\ndriven by an event loop. Flutter\u2019s event loop is\nequivalent to the iOS main loop\u2014that is,\nthe Looper that is attached to the main thread.", "Dart\u2019s single-threaded model doesn\u2019t mean you are\nrequired to run everything as a blocking operation\nthat causes the UI to freeze. Instead,\nuse the asynchronous facilities that the Dart language provides,\nsuch as async/await, to perform asynchronous work.", "For example, you can run network code without causing the\nUI to hang by using async/await and letting Dart do\nthe heavy lifting:", "Once the awaited network call is done,\nupdate the UI by calling setState(),\nwhich triggers a rebuild of the widget sub-tree\nand updates the data.", "The following example loads data asynchronously and\ndisplays it in a ListView:", "Refer to the next section for more information on doing work\nin the background, and how Flutter differs from iOS.", "Since Flutter is single threaded and runs an event loop\n(like Node.js), you don\u2019t have to worry about\nthread management or spawning background threads.\nIf you\u2019re doing I/O-bound work,\nsuch as disk access or a network call,\nthen you can safely use async/await and you\u2019re done.\nIf, on the other hand, you need to do computationally intensive\nwork that keeps the CPU busy, you want to move it to an\nIsolate to avoid blocking the event loop.", "For I/O-bound work, declare the function as an async function,\nand await on long-running tasks inside the function:", "This is how you typically do network or database calls,\nwhich are both I/O operations.", "However, there are times when you might be processing\na large amount of data and your UI hangs.\nIn Flutter, use Isolates to take advantage of\nmultiple CPU cores to do long-running or\ncomputationally intensive tasks.", "Isolates are separate execution threads that do not share\nany memory with the main execution memory heap.\nThis means you can\u2019t access variables from the main thread,\nor update your UI by calling setState().\nIsolates are true to their name, and cannot share memory\n(in the form of static fields, for example).", "The following example shows, in a simple isolate,\nhow to share data back to the main thread to update the UI.", "Here, dataLoader() is the Isolate that runs in\nits own separate execution thread.\nIn the isolate, you can perform more CPU intensive\nprocessing (parsing a big JSON, for example),\nor perform computationally intensive math,\nsuch as encryption or signal processing.", "You can run the full example below:", "Making a network call in Flutter is easy when you\nuse the popular http package. This abstracts\naway a lot of the networking that you might normally\nimplement yourself, making it simple to make network calls.", "To add the http package as a dependency, run flutter pub add:", "To make a network call,\ncall await on the async function http.get():", "In UIKit, you typically use a UIProgressView\nwhile executing a long-running task in the background.", "In Flutter, use a ProgressIndicator widget.\nShow the progress programmatically by controlling\nwhen it\u2019s rendered through a boolean flag.\nTell Flutter to update its state before your long-running task starts,\nand hide it after it ends.", "In the example below, the build function is separated into three different\nfunctions. If showLoadingDialog is true\n(when widgets.length == 0), then render the ProgressIndicator.\nOtherwise, render the ListView with the data returned from a network call.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/uikit-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "State management | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt", "base_url": "https://docs.flutter.dev/"}, {"title": "Leveraging Apple's System APIs and Frameworks | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When you come from iOS development, you might need to find\nFlutter plugins that offer the same abilities as Apple\u2019s system\nlibraries. This might include accessing device hardware or interacting\nwith specific frameworks like HealthKit or MapKit.", "For an overview of how the SwiftUI framework compares to Flutter,\nsee Flutter for SwiftUI developers.", "Dart calls libraries that contain platform-specific code plugins.\nWhen developing an app with Flutter, you use plugins to interact\nwith system libraries.", "In your Dart code, you use the plugin\u2019s Dart API to call the native\ncode from the system library being used. This means that you can write\nthe code to call the Dart API. The API then makes it work for all\nplatforms that the plugin supports.", "To learn more about plugins, see Using packages.\nThough this page links to some popular plugins,\nyou can find thousands more, along with examples,\non pub.dev. The following table does not endorse any particular plugin.\nIf you can\u2019t find a package that meets your need,\nyou can create your own or use platform channels directly in your project.\nTo learn more, see Writing platform-specific code.", "To use an Apple framework within your native project,\nimport it into your Swift or Objective-C file.", "To add a Flutter plugin, run flutter pub add package_name\nfrom the root of your project.\nThis adds the dependency to your pubspec.yaml file.\nAfter you add the dependency, add an import statement for the package\nin your Dart file.", "You might need to change app settings or initialization logic.\nIf that\u2019s needed, the package\u2019s \u201cReadme\u201d page on pub.dev\nshould provide details.", "Access the photo library", "UIImagePickerControllerusing the .camera sourceType", "Use advanced camera features", "Persist to a database", "Access and manage contacts", "Expose quick actions on the home screen", "Index items in Spotlight search", "Configure, update and communicate with Widgets", "Supports both Google Play Store on Android and Apple App Store on iOS.\u00a0\u21a9", "Adds Google Pay payments on Android and Apple Pay payments on iOS.\u00a0\u21a9", "Uses Firebase Cloud Messaging and integrates with APNs.\u00a0\u21a9", "Includes sensors like accelerometer, gyroscope, etc.\u00a0\u21a9", "Uses Google\u2019s ML Kit and supports various features like text recognition, face detection, image labeling, landmark recognition, and barcode scanning. You can also create a custom model with Firebase. To learn more, see Use a custom TensorFlow Lite model with Flutter.\u00a0\u21a9\u00a0\u21a92", "Uses the OpenWeatherMap API. Other packages exist that can pull from different weather APIs.\u00a0\u21a9", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/apple-frameworks", "base_url": "https://docs.flutter.dev/"}, {"title": "Issues \u00b7 flutter/flutter \u00b7 GitHub", "contents": ["We read every piece of feedback, and take your input very seriously.", "\n            To see all available qualifiers, see our documentation.\n          ", "\nHave a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.\n  ", "By clicking \u201cSign up for GitHub\u201d, you agree to our terms of service and\n  privacy statement. We\u2019ll occasionally send you account related emails.", "\n    Already on GitHub?\n    Sign in\n    to your account\n  "], "url": "https://docs.flutter.dev//resources/design-docs", "base_url": "https://docs.flutter.dev/"}, {"title": "An introduction to unit testing | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "How can you ensure that your app continues to work as you\nadd more features or change existing functionality?\nBy writing tests.", "Unit tests are handy for verifying the behavior of a single function,\nmethod, or class. The test package provides the\ncore framework for writing unit tests, and the flutter_test\npackage provides additional utilities for testing widgets.", "This recipe demonstrates the core features provided by the test package\nusing the following steps:", "For more information about the test package,\nsee the test package documentation.", "The test package provides the core functionality for \nwriting tests in Dart. This is the best approach when\nwriting packages consumed by web, server, and Flutter apps.", "To add the test package as a dev dependency,\nrun flutter pub add:", "In this example, create two files: counter.dart and counter_test.dart.", "The counter.dart file contains a class that you want to test and\nresides in the lib folder. The counter_test.dart file contains\nthe tests themselves and lives inside the test folder.", "In general, test files should reside inside a test folder\nlocated at the root of your Flutter application or package.\nTest files should always end with _test.dart,\nthis is the convention used by the test runner when searching for tests.", "When you\u2019re finished, the folder structure should look like this:", "Next, you need a \u201cunit\u201d to test. Remember: \u201cunit\u201d is another name for a\nfunction, method, or class. For this example, create a Counter class\ninside the lib/counter.dart file. It is responsible for incrementing\nand decrementing a value starting at 0.", "Note: For simplicity, this tutorial does not follow the \u201cTest Driven\nDevelopment\u201d approach. If you\u2019re more comfortable with that style of\ndevelopment, you can always go that route.", "Inside the counter_test.dart file, write the first unit test. Tests are\ndefined using the top-level test function, and you can check if the results\nare correct by using the top-level expect function.\nBoth of these functions come from the test package.", "If you have several tests that are related to one another,\ncombine them using the group function provided by the test package.", "Now that you have a Counter class with tests in place,\nyou can run the tests.", "The Flutter plugins for IntelliJ and VSCode support running tests.\nThis is often the best option while writing tests because it provides the\nfastest feedback loop as well as the ability to set breakpoints.", "You can also use a terminal to run the tests by executing the following\ncommand from the root of the project:", "For more options regarding unit tests, you can execute this command:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/unit/introduction", "base_url": "https://docs.flutter.dev/"}, {"title": "Focus and text fields | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When a text field is selected and accepting input,\nit is said to have \u201cfocus.\u201d\nGenerally, users shift focus to a text field by tapping,\nand developers shift focus to a text field programmatically by\nusing the tools described in this recipe.", "Managing focus is a fundamental tool for creating forms with an intuitive\nflow. For example, say you have a search screen with a text field.\nWhen the user navigates to the search screen,\nyou can set the focus to the text field for the search term.\nThis allows the user to start typing as soon as the screen\nis visible, without needing to manually tap the text field.", "In this recipe, learn how to give the focus\nto a text field as soon as it\u2019s visible,\nas well as how to give focus to a text field\nwhen a button is tapped.", "To give focus to a text field as soon as it\u2019s visible,\nuse the autofocus property.", "For more information on handling input and creating text fields,\nsee the Forms section of the cookbook.", "Rather than immediately shifting focus to a specific text field,\nyou might need to give focus to a text field at a later point in time.\nIn the real world, you might also need to give focus to a specific\ntext field in response to an API call or a validation error.\nIn this example, give focus to a text field after the user\npresses a button using the following steps:", "First, create a FocusNode.\nUse the FocusNode to identify a specific TextField in Flutter\u2019s\n\u201cfocus tree.\u201d This allows you to give focus to the TextField\nin the next steps.", "Since focus nodes are long-lived objects, manage the lifecycle\nusing a State object. Use the following instructions to create\na FocusNode instance inside the initState() method of a\nState class, and clean it up in the dispose() method:", "Now that you have a FocusNode,\npass it to a specific TextField in the build() method.", "Finally, focus the text field when the user taps a floating\naction button. Use the requestFocus() method to perform\nthis task.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/forms/focus", "base_url": "https://docs.flutter.dev/"}, {"title": "Create and style a text field | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Text fields allow users to type text into an app.\nThey are used to build forms,\nsend messages, create search experiences, and more.\nIn this recipe, explore how to create and style text fields.", "Flutter provides two text fields:\nTextField and TextFormField.", "TextField is the most commonly used text input widget.", "By default, a TextField is decorated with an underline.\nYou can add a label, icon, inline hint text, and error text by supplying an\nInputDecoration as the decoration\nproperty of the TextField.\nTo remove the decoration entirely (including the\nunderline and the space reserved for the label),\nset the decoration to null.", "To retrieve the value when it changes,\nsee the Handle changes to a text field recipe.", "TextFormField wraps a TextField and integrates it\nwith the enclosing Form.\nThis provides additional functionality,\nsuch as validation and integration with other\nFormField widgets.", "For more information on input validation, see the\nBuilding a form with validation recipe.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/forms/text-input", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Performance view | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  The DevTools performance view works for Flutter mobile and desktop apps.\n  For web apps, Flutter adds timeline events to the\n  performance panel of Chrome DevTools instead. \n  To learn about profiling web apps, check out Debugging web performance.", "The performance page can help you diagnose performance\nproblems and UI jank in your application.\nThis page offers timing and performance information\nfor activity in your application.\nIt consists of several tools to help you identify\nthe cause of poor performance in your app:", "Use a profile build of your application to analyze performance.\n  Frame rendering times aren\u2019t indicative of release performance\n  when running in debug mode. Run your app in profile mode,\n  which still preserves useful debugging information.", "The performance view also supports importing and exporting of\ndata snapshots. For more information,\ncheck out the Import and export section.", "Flutter is designed to render its UI at 60 frames per second\n(fps), or 120 fps on devices capable of 120Hz updates.\nEach render is called a frame.\nThis means that, approximately every 16ms, the UI updates\nto reflect animations or other changes to the UI. A frame\nthat takes longer than 16ms to render causes jank \n(jerky motion) on the display device.", "This chart contains Flutter frame information for your application.\nEach bar set in the chart represents a single Flutter frame.\nThe bars are color-coded to highlight the different portions\nof work that occur when rendering a Flutter frame: work from\nthe UI thread and work from the raster thread (previously known\nas the GPU thread).", "This chart contains Flutter frame timing information for your\napplication. Each pair of bars in the chart represents a single\nFlutter frame. Selecting a frame from this chart updates the data\nthat is displayed below in the Frame analysis tab\nor the Timeline events tab.\n(As of DevTools 2.23.1, the Raster stats\nis a standalone feature without data per frame).", "The flutter frames chart updates when new frames\nare drawn in your app. To pause updates to this chart,\nclick the pause button to the right of the chart.\nThis chart can be collapsed to provide more viewing space\nfor data below by clicking the Flutter frames button above the chart.", "The pair of bars representing each Flutter frame are color-coded\nto highlight the different portions of work that occur when rendering\na Flutter frame: work from the UI thread and work from the raster thread\n(previously known as the GPU thread).", "The UI thread executes Dart code in the Dart VM. This includes\ncode from your application as well as the Flutter framework.\nWhen your app creates and displays a scene, the UI thread creates\na layer tree, a lightweight object containing device-agnostic\npainting commands, and sends the layer tree to the raster thread\nto be rendered on the device. Do not block this thread.", "The raster thread (previously known as the GPU thread)\nexecutes graphics code from the Flutter Engine.\nThis thread takes the layer tree and displays it by talking to\nthe GPU (graphic processing unit). You can\u2019t directly access\nthe raster thread or its data, but if this thread is slow,\nit\u2019s a result of something you\u2019ve done in the Dart code.\nSkia, the graphics library, runs on this thread.\nImpeller (in the stable channel for iOS)\nalso uses this thread.", "Sometimes a scene results in a layer tree that is easy to construct,\nbut expensive to render on the raster thread. In this case, you\nneed to figure out what your code is doing that is causing\nrendering code to be slow. Specific kinds of workloads are more\ndifficult for the GPU. They might involve unnecessary calls to\nsaveLayer(), intersecting opacities with multiple objects,\nand clips or shadows in specific situations.", "For more information on profiling, check out\nIdentifying problems in the GPU graph.", "The frame rendering chart shows jank with a red overlay.\nA frame is considered to be janky if it takes more than\n~16 ms to complete (for 60 FPS devices). To achieve a frame rendering rate of\n60 FPS (frames per second), each frame must render in\n~16 ms or less. When this target is missed, you may\nexperience UI jank or dropped frames.", "For more information on how to analyze your app\u2019s performance,\ncheck out Flutter performance profiling.", "Shader compilation occurs when a shader is first used in your Flutter\napp. Frames that perform shader compilation are marked in dark\nred:", "For more information on how to reduce shader compilation jank,\ncheck out Reduce shader compilation jank on mobile.", "Selecting a janky frame (slow, colored in red)\nfrom the Flutter frames chart above shows debugging hints\nin the Frame analysis tab. These hints help you diagnose\njank in your app, and notify you of any expensive operations\nthat we have detected that might have contributed to the slow frame time.", "info Note:\n  For best results, this tool should be used with\n  the Impeller rendering engine. When using Skia,\n  the raster stats reported might be inconsistent\n  due to the timing of when shaders are compiled.", "If you have Flutter frames that are janking with\nslow raster thread times, this tool might be able\nto help you diagnose the source of the slow performance.\nTo generate raster stats:", "If you see an expensive layer, find the Dart code in your app\nthat is producing this layer and investigate further.\nYou can make changes to your code, hot reload,\nand take new snapshots to see if the performance of a layer\nwas improved by your change.", "The timeline events chart shows all event tracing from your application.\nThe Flutter framework emits timeline events as it works to build frames,\ndraw scenes, and track other activity such as HTTP request timings\nand garbage collection. These events show up here in the Timeline.\nYou can also send your own Timeline events using the dart:developer\nTimeline and TimelineTask APIs.", "\nFor help with navigating and using the trace viewer,\nclick the ? button at the top right of the timeline\nevents tab bar. To refresh the timeline with new events from\nyour application, click the refresh button\n(also in the upper right corner of the tab controls).", "To view more detailed tracing in the timeline events chart,\nuse the options in the enhance tracing dropdown:", "info Note:\n  Frame times might be negatively affected when these options are enabled.", "To see the new timeline events, reproduce the activity\nin your app that you are interested in tracing,\nand then select a frame to inspect the timeline.", "To see the build() method events in the timeline,\nenable the Track Widget Builds option.\nThe name of the widget is shown in the timeline event.", "To see render object layout events in the timeline,\nenable the Track Layouts option:", "To see render object paint events in the timeline,\nenable the Track Paints option:", "To diagnose performance problems related to rendering layers,\ntoggle off a rendering layer.\nThese options are enabled by default.", "To see the effects on your app\u2019s performance,\nreproduce the activity in your app.\nThen select the new frames in the frames chart\nto inspect the timeline events\nwith the layers disabled.\nIf Raster time has significantly decreased,\nexcessive use of the effects you disabled might be contributing\nto the jank you saw in your app.", "DevTools supports importing and exporting performance snapshots.\nClicking the export button (upper-right corner above the\nframe rendering chart) downloads a snapshot of the current data on the\nperformance page. To import a performance snapshot, you can drag and drop the\nsnapshot into DevTools from any page. Note that DevTools only\nsupports importing files that were originally exported from DevTools.", "To learn how to monitor an app\u2019s performance and\ndetect jank using DevTools, check out a guided\nPerformance View tutorial.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/performance", "base_url": "https://docs.flutter.dev/"}, {"title": "Adding iOS app extensions | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "iOS App extensions allow you to expand functionality\noutside your app. Your app could appear as a home screen widget,\nor you can make portions of your app available within other apps.", "To learn more about app extensions, check out\nApple\u2019s documentation.", "To add an app extension to your Flutter app,\nadd the extension point target to your Xcode project.", "In Xcode, select File -> New -> Target from the menu bar.", "To learn how to add a home screen widget to your iOS device,\ncheck out the Adding a Home Screen widget to your Flutter App codelab.", "Flutter apps interact with app extensions using the same\ntechniques as UIKit or SwiftUI apps.\nThe containing app and the app extension don\u2019t communicate directly.\nThe containing app might not be running while the device user interacts with the extension.\nThe app and your extension can read and write to shared resources or\nuse higher-level APIs to communicate with each other.", "Some extensions have APIs. For example, \nthe Core Spotlight framework indexes your app \nallowing users to search from Spotlight and Safari. The\nWidgetKit framework can trigger an update of your home screen\nwidget.", "To simplify how your app communicates with extensions,\nFlutter plugins wrap these APIs.\nTo find plugins that wrap extension APIs,\ncheck out Leveraging Apple\u2019s System APIs and Frameworks or\nsearch pub.dev.", "To share resources between your Flutter app and your app extension, put\nthe Runner app target and the extension target in the same\nApp Group.", "info Note:\n  You must be signed in to your Apple Developer account.", "To add a target to an App Group:", "When two targets belong to the same App Group, they can read and write\ndata to the same source. Choose one of the following sources for your data.", "Background tasks provide a means to update your extension through code\nregardless of the status of your app.", "To schedule background work from your Flutter app, use the\nworkmanager plugin.", "You might want to direct users from an app extension to a\nspecific page in your Flutter app.\nTo have a URL open a specified route in your app, you can use\nDeep Linking.", "Some app extensions display a user interface.\nFor example, iMessage extensions allow users to access your app\u2019s\ncontent directly from the Messages app.", "Flutter does not support \nbuilding Flutter UI for app extensions. \nTo create the UI for \nan app extension using Flutter, you must compile \na custom engine and embed the FlutterViewController\nas described in the following section.", "info Note:\n  Creating an app extension user interface with Flutter\n  requires you to compile a custom build of the Flutter engine.\n  The Flutter team cautions that only advanced users\n  should try to create a custom build.\n  To learn more, check out Compiling the engine.", "Create a custom build of the Flutter engine that removes uses of\nsharedApplication and corrects the path for the bundle.\nCheck out an example from the community on GitHub.", "Open the Flutter app project settings in Xcode to share build\nconfigurations.", "Embed the FlutterViewController as described in\nAdding a Flutter Screen. For example, you can display a \nspecific route in your Flutter app within an iMessage extension.", "error Important:\n  Commenting out sharedApplication disables\n  many features in the Flutter framework.\n  This hasn\u2019t been tested in App Store submissions\n  and might not work for some app extensions.", "For example, home screen Widgets and Live Activities can\u2019t use some\n  lower-level APIs needed to draw Flutter UI.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/app-extensions", "base_url": "https://docs.flutter.dev/"}, {"title": "Serialization | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/serialization", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for React Native developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This document is for React Native (RN) developers looking to apply their\nexisting RN knowledge to build mobile apps with Flutter. If you understand\nthe fundamentals of the RN framework then you can use this document as a\nway to get started learning Flutter development.", "This document can be used as a cookbook by jumping around and finding\nquestions that are most relevant to your needs.", "Like React Native, Flutter uses reactive-style views. However, while RN\ntranspiles to native widgets, Flutter compiles all the way to native code.\nFlutter controls each pixel on the screen, which avoids performance problems\ncaused by the need for a JavaScript bridge.", "Dart is an easy language to learn and offers the following features:", "A few examples of the differences between JavaScript and Dart are described\nbelow.", "JavaScript doesn\u2019t have a pre-defined entry\nfunction\u2014you define the entry point.", "In Dart, every app must have a top-level main() function that serves as the\nentry point to the app.", "Try it out in DartPad.", "To print to the console in Dart, use print().", "Try it out in DartPad.", "Dart is type safe\u2014it uses a combination of static type checking\nand runtime checks to ensure that a variable\u2019s value always matches\nthe variable\u2019s static type. Although types are mandatory,\nsome type annotations are optional because\nDart performs type inference.", "In JavaScript, variables cannot be typed.", "In Dart, variables must either be explicitly\ntyped or the type system must infer the proper type automatically.", "Try it out in DartPad.", "For more information, see Dart\u2019s Type System.", "In JavaScript, uninitialized variables are undefined.", "In Dart, uninitialized variables have an initial value of null.\nBecause numbers are objects in Dart, even uninitialized variables with\nnumeric types have the value null.", "info Note:\n  As of 2.12, Dart supports Sound Null Safety,\n  all underlying types are non-nullable by default,\n  which must be initialized as a non-nullable value.", "Try it out in DartPad.", "For more information, see the documentation on\nvariables.", "In JavaScript, values of 1 or any non-null objects\nare treated as true when using the == comparison operator.", "In Dart, only the boolean value true is treated as true.", "Try it out in DartPad.", "Dart and JavaScript functions are generally similar.\nThe primary difference is the declaration.", "Try it out in DartPad.", "For more information, see the documentation on\nfunctions.", "Like JavaScript, Dart supports single-threaded execution. In JavaScript,\nthe Promise object represents the eventual completion (or failure)\nof an asynchronous operation and its resulting value.", "Dart uses Future objects to handle this.", "For more information, see the documentation on\nFuture objects.", "The async function declaration defines an asynchronous function.", "In JavaScript, the async function returns a Promise.\nThe await operator is used to wait for a Promise.", "In Dart, an async function returns a Future,\nand the body of the function is scheduled for execution later.\nThe await operator is used to wait for a Future.", "For more information, see the documentation for async and await.", "To create an app using React Native,\nyou would run create-react-native-app from the command line.", "To create an app in Flutter, do one of the following:", "For more information, see Getting started, which\nwalks you through creating a button-click counter app.\nCreating a Flutter project builds all the files that you\nneed to run a sample app on both Android and iOS devices.", "In React Native, you would run npm run or yarn run from the project\ndirectory.", "You can run Flutter apps in a couple of ways:", "Your app runs on a connected device, the iOS simulator,\nor the Android emulator.", "For more information, see the Flutter Getting started\ndocumentation.", "In React Native, you need to import each required component.", "In Flutter, to use widgets from the Material Design library,\nimport the material.dart package. To use iOS style widgets,\nimport the Cupertino library. To use a more basic widget set,\nimport the Widgets library.\nOr, you can write your own widget library and import that.", "Whichever widget package you import,\nDart pulls in only the widgets that are used in your app.", "For more information, see the Flutter Widget Catalog.", "In React Native, the HelloWorldApp class extends React.Component and\nimplements the render method by returning a view component.", "In Flutter, you can create an identical \u201cHello world!\u201d app using the\nCenter and Text widgets from the core widget library.\nThe Center widget becomes the root of the widget tree and has one child,\nthe Text widget.", "The following images show the Android and iOS UI for the basic Flutter\n\u201cHello world!\u201d app.", "Now that you\u2019ve seen the most basic Flutter app, the next section shows how to\ntake advantage of Flutter\u2019s rich widget libraries to create a modern, polished\napp.", "In Flutter, almost everything is a widget.", "Widgets are the basic building blocks of an app\u2019s user interface.\nYou compose widgets into a hierarchy, called a widget tree.\nEach widget nests inside a parent widget\nand inherits properties from its parent.\nEven the application object itself is a widget.\nThere is no separate \u201capplication\u201d object.\nInstead, the root widget serves this role.", "A widget can define:", "The following example shows the \u201cHello world!\u201d app using widgets from the\nMaterial library. In this example, the widget tree is nested inside the\nMaterialApp root widget.", "The following images show \u201cHello world!\u201d built from Material Design widgets.\nYou get more functionality for free than in the basic \u201cHello world!\u201d app.", "When writing an app, you\u2019ll use two types of widgets:\nStatelessWidget or StatefulWidget.\nA StatelessWidget is just what it sounds like\u2014a\nwidget with no state. A StatelessWidget is created once,\nand never changes its appearance.\nA StatefulWidget dynamically changes state based on data\nreceived, or user input.", "The important difference between stateless and stateful\nwidgets is that StatefulWidgets have a State object\nthat stores state data and carries it over\nacross tree rebuilds, so it\u2019s not lost.", "In simple or basic apps it\u2019s easy to nest widgets,\nbut as the code base gets larger and the app becomes complex,\nyou should break deeply nested widgets into\nfunctions that return the widget or smaller classes.\nCreating separate functions\nand widgets allows you to reuse the components within the app.", "In React Native, you would define a class to create a\nreusable component and then use props methods to set\nor return properties and values of the selected elements.\nIn the example below, the CustomCard class is defined\nand then used inside a parent class.", "In Flutter, define a class to create a custom widget and then reuse the\nwidget. You can also define and call a function that returns a\nreusable widget as shown in the build function in the following example.", "In the previous example, the constructor for the CustomCard\nclass uses Dart\u2019s curly brace syntax { } to indicate named parameters.", "To require these fields, either remove the curly braces from\nthe constructor, or add required to the constructor.", "The following screenshots show an example of the reusable\nCustomCard class.", "Start with the lib/main.dart file.\nIt\u2019s autogenerated when you create a Flutter app.", "In Flutter, the entry point file is\n{project_name}/lib/main.dart and execution\nstarts from the main function.", "When you create a new Flutter project,\nit builds the following directory structure.\nYou can customize it later, but this is where you start.", "A Flutter resource or asset is a file that is bundled and deployed\nwith your app and is accessible at runtime.\nFlutter apps can include the following asset types:", "Flutter uses the pubspec.yaml file,\nlocated at the root of your project, to\nidentify assets required by an app.", "The assets subsection specifies files that should be included with the app.\nEach asset is identified by an explicit path\nrelative to the pubspec.yaml file, where the asset file is located.\nThe order in which the assets are declared does not matter.\nThe actual directory used (assets in this case) does not matter.\nHowever, while assets can be placed in any app directory, it\u2019s a\nbest practice to place them in the assets directory.", "During a build, Flutter places assets into a special archive\ncalled the asset bundle, which apps read from at runtime.\nWhen an asset\u2019s path is specified in the assets\u2019 section of pubspec.yaml,\nthe build process looks for any files\nwith the same name in adjacent subdirectories.\nThese files are also included in the asset bundle\nalong with the specified asset. Flutter uses asset variants\nwhen choosing resolution-appropriate images for your app.", "In React Native, you would add a static image by placing the image file\nin a source code directory and referencing it.", "In Flutter, add a static image to your app\nusing the Image.asset constructor in a widget\u2019s build method.", "For more information, see Adding Assets and Images in Flutter.", "In React Native, you would specify the uri in the\nsource prop of the Image component and also provide the\nsize if needed.", "In Flutter, use the Image.network constructor to include\nan image from a URL.", "Flutter supports using shared packages contributed by other developers to the\nFlutter and Dart ecosystems. This allows you to quickly build your app without\nhaving to develop everything from scratch. Packages that contain\nplatform-specific code are known as package plugins.", "In React Native, you would use yarn add {package-name} or\nnpm install --save {package-name} to install packages\nfrom the command line.", "In Flutter, install a package using the following instructions:", "For more information, see Using Packages and\nDeveloping Packages & Plugins.", "You can find many packages shared by Flutter developers in the\nFlutter packages section of pub.dev.", "In Flutter, you build your UI out of widgets that describe what their view\nshould look like given their current configuration and state.", "Widgets are often composed of many small,\nsingle-purpose widgets that are nested to produce powerful effects.\nFor example, the Container widget consists of\nseveral widgets responsible for layout, painting, positioning, and sizing.\nSpecifically, the Container widget includes the LimitedBox,\nConstrainedBox, Align, Padding, DecoratedBox, and Transform widgets.\nRather than subclassing Container to produce a customized effect, you can\ncompose these and other simple widgets in new and unique ways.", "The Center widget is another example of how you can control the layout.\nTo center a widget, wrap it in a Center widget and then use layout\nwidgets for alignment, row, columns, and grids.\nThese layout widgets do not have a visual representation of their own.\nInstead, their sole purpose is to control some aspect of another\nwidget\u2019s layout. To understand why a widget renders in a\ncertain way, it\u2019s often helpful to inspect the neighboring widgets.", "For more information, see the Flutter Technical Overview.", "For more information about the core widgets from the Widgets package,\nsee Flutter Basic Widgets,\nthe Flutter Widget Catalog,\nor the Flutter Widget Index.", "In React Native, View is a container that supports layout with Flexbox,\nstyle, touch handling, and accessibility controls.", "In Flutter, you can use the core layout widgets in the Widgets\nlibrary, such as Container, Column,\nRow, and Center.\nFor more information, see the Layout Widgets catalog.", "A List is a scrollable list of components arranged vertically.", "In React Native, FlatList or SectionList are used to render simple or\nsectioned lists.", "ListView is Flutter\u2019s most commonly used scrolling widget.\nThe default constructor takes an explicit list of children.\nListView is most appropriate for a small number of widgets.\nFor a large or infinite list, use ListView.builder,\nwhich builds its children on demand and only builds\nthose children that are visible.", "To learn how to implement an infinite scrolling list, see the official\ninfinite_list sample.", "In React Native, canvas components aren\u2019t present\nso third party libraries like react-native-canvas are used.", "In Flutter, you can use the CustomPaint\nand CustomPainter classes to draw to the canvas.", "The following example shows how to draw during the paint phase using the\nCustomPaint widget. It implements the abstract class, CustomPainter,\nand passes it to CustomPaint\u2019s painter property.\nCustomPaint subclasses must implement the paint()\nand shouldRepaint() methods.", "In React Native, most of the layout can be done with the props\nthat are passed to a specific component.\nFor example, you could use the style prop on the View component\nin order to specify the flexbox properties.\nTo arrange your components in a column, you would specify a prop such as:\nflexDirection: 'column'.", "In Flutter, the layout is primarily defined by widgets\nspecifically designed to provide layout,\ncombined with control widgets and their style properties.", "For example, the Column and Row widgets\ntake an array of children and align them\nvertically and horizontally respectively.\nA Container widget takes a combination of\nlayout and styling properties, and a\nCenter widget centers its child widgets.", "Flutter provides a variety of layout widgets in its core widget library.\nFor example, Padding, Align, and Stack.", "For a complete list, see Layout Widgets.", "In React Native, components can be layered using absolute positioning.", "Flutter uses the Stack\nwidget to arrange children widgets in layers.\nThe widgets can entirely or partially overlap the base widget.", "The Stack widget positions its children relative to the edges of its box.\nThis class is useful if you simply want to overlap several children widgets.", "The previous example uses Stack to overlay a Container\n(that displays its Text on a translucent black background)\non top of a CircleAvatar.\nThe Stack offsets the text using the alignment property\nand Alignment coordinates.", "For more information, see the Stack class documentation.", "In React Native, inline styling and stylesheets.create\nare used to style components.", "In Flutter, a Text widget can take a TextStyle class\nfor its style property. If you want to use the same text\nstyle in multiple places, you can create a\nTextStyle class and use it for multiple Text widgets.", "React Native doesn\u2019t include support for icons\nso third party libraries are used.", "In Flutter, importing the Material library also pulls in the\nrich set of Material icons and colors.", "When using the Icons class,\nmake sure to set uses-material-design: true in\nthe project\u2019s pubspec.yaml file.\nThis ensures that the MaterialIcons font,\nwhich displays the icons, is included in your app.\nIn general, if you intend to use the Material library,\nyou should include this line.", "Flutter\u2019s Cupertino (iOS-style) package provides high\nfidelity widgets for the current iOS design language.\nTo use the CupertinoIcons font,\nadd a dependency for cupertino_icons in your project\u2019s \npubspec.yaml file.", "To globally customize the colors and styles of components,\nuse ThemeData to specify default colors\nfor various aspects of the theme.\nSet the theme property in MaterialApp to the ThemeData object.\nThe Colors class provides colors\nfrom the Material Design color palette.", "The following example sets the primary swatch to blue\nand the text selection to red.", "In React Native, common themes are defined for\ncomponents in stylesheets and then used in components.", "In Flutter, create uniform styling for almost everything\nby defining the styling in the ThemeData\nclass and passing it to the theme property in the\nMaterialApp widget.", "A Theme can be applied even without using the MaterialApp widget.\nThe Theme widget takes a ThemeData in its data parameter\nand applies the ThemeData to all of its children widgets.", "State is information that can be read synchronously\nwhen a widget is built or information\nthat might change during the lifetime of a widget.\nTo manage app state in Flutter,\nuse a StatefulWidget paired with a State object.", "For more information on ways to approach managing state in Flutter,\nsee State management.", "A StatelessWidget in Flutter is a widget\nthat doesn\u2019t require a state change\u2014\nit has no internal state to manage.", "Stateless widgets are useful when the part of the user interface\nyou are describing does not depend on anything other than the\nconfiguration information in the object itself and the\nBuildContext in which the widget is inflated.", "AboutDialog, CircleAvatar, and Text are examples\nof stateless widgets that subclass StatelessWidget.", "The previous example uses the constructor of the MyStatelessWidget\nclass to pass the text, which is marked as final.\nThis class extends StatelessWidget\u2014it contains immutable data.", "The build method of a stateless widget is typically called\nin only three situations:", "A StatefulWidget is a widget that changes state.\nUse the setState method to manage the\nstate changes for a StatefulWidget.\nA call to setState() tells the Flutter\nframework that something has changed in a state,\nwhich causes an app to rerun the build() method\nso that the app can reflect the change.", "State is information that can be read synchronously when a widget\nis built and might change during the lifetime of the widget.\nIt\u2019s the responsibility of the widget implementer to ensure that\nthe state object is promptly notified when the state changes.\nUse StatefulWidget when a widget can change dynamically.\nFor example, the state of the widget changes by typing into a form,\nor moving a slider.\nOr, it can change over time\u2014perhaps a data feed updates the UI.", "Checkbox, Radio, Slider, InkWell,\nForm, and TextField\nare examples of stateful widgets that subclass\nStatefulWidget.", "The following example declares a StatefulWidget\nthat requires a createState() method.\nThis method creates the state object that manages the widget\u2019s state,\n_MyStatefulWidgetState.", "The following state class, _MyStatefulWidgetState,\nimplements the build() method for the widget.\nWhen the state changes, for example, when the user toggles\nthe button, setState() is called with the new toggle value.\nThis causes the framework to rebuild this widget in the UI.", "Here are a few things to consider when designing your widget.", "In Flutter, widgets are either Stateful or Stateless\u2014depending on whether\nthey depend on a state change.", "In Flutter, there are three primary ways to manage state:", "When deciding which approach to use, consider the following principles:", "The MyStatefulWidget class manages its own state\u2014it extends\nStatefulWidget, it overrides the createState()\nmethod to create the State object,\nand the framework calls createState() to build the widget.\nIn this example, createState() creates an instance of\n_MyStatefulWidgetState, which\nis implemented in the next best practice.", "Add your custom StatefulWidget to the widget tree\nin the app\u2019s build method.", "In React Native, most components can be customized when they are\ncreated with different parameters or properties, called props.\nThese parameters can be used in a child component using this.props.", "In Flutter, you assign a local variable or function marked\nfinal with the property received in the parameterized constructor.", "If you don\u2019t need to store a lot of data, and it doesn\u2019t require\nstructure, you can use shared_preferences which allows you to\nread and write persistent key-value pairs of primitive data\ntypes: booleans, floats, ints, longs, and strings.", "In React Native, you use the setItem and getItem functions\nof the AsyncStorage component to store and retrieve data\nthat is persistent and global to the app.", "In Flutter, use the shared_preferences plugin to\nstore and retrieve key-value data that is persistent and global\nto the app. The shared_preferences plugin wraps\nNSUserDefaults on iOS and SharedPreferences on Android,\nproviding a persistent store for simple data.", "To add the shared_preferences package as a dependency, run flutter pub add:", "To implement persistent data, use the setter methods\nprovided by the SharedPreferences class.\nSetter methods are available for various primitive\ntypes, such as setInt, setBool, and setString.\nTo read data, use the appropriate getter method provided\nby the SharedPreferences class. For each\nsetter there is a corresponding getter method,\nfor example, getInt, getBool, and getString.", "Most apps contain several screens for displaying different\ntypes of information. For example, you might have a product\nscreen that displays images where users could tap on a product\nimage to get more information about the product on a new screen.", "In Android, new screens are new Activities.\nIn iOS, new screens are new ViewControllers. In Flutter,\nscreens are just Widgets! And to navigate to new\nscreens in Flutter, use the Navigator widget.", "In React Native, there are three main navigators:\nStackNavigator, TabNavigator, and DrawerNavigator.\nEach provides a way to configure and define the screens.", "In Flutter, there are two main widgets used to navigate between screens:", "A Navigator is defined as a widget that manages a set of child\nwidgets with a stack discipline. The navigator manages a stack\nof Route objects and provides methods for managing the stack,\nlike Navigator.push and Navigator.pop.\nA list of routes might be specified in the MaterialApp widget,\nor they might be built on the fly, for example, in hero animations.\nThe following example specifies named routes in the MaterialApp widget.", "info Note:\n  Named routes are no longer recommended for most\n  applications. For more information, see\n  Limitations in the navigation overview page.", "To navigate to a named route, the Navigator.of()\nmethod is used to specify the BuildContext\n(a handle to the location of a widget in the widget tree).\nThe name of the route is passed to the pushNamed function to\nnavigate to the specified route.", "You can also use the push method of Navigator which\nadds the given Route to the history of the\nnavigator that most tightly encloses the given BuildContext,\nand transitions to it. In the following example,\nthe MaterialPageRoute widget is a modal route that\nreplaces the entire screen with a platform-adaptive\ntransition. It takes a WidgetBuilder as a required parameter.", "In Material Design apps, there are two primary options\nfor Flutter navigation: tabs and drawers.\nWhen there is insufficient space to support tabs, drawers\nprovide a good alternative.", "In React Native, createBottomTabNavigator\nand TabNavigation are used to\nshow tabs and for tab navigation.", "Flutter provides several specialized widgets for drawer and\ntab navigation:", "A TabController is required to coordinate the tab selection\nbetween a TabBar and a TabBarView.\nThe TabController constructor length argument is the total\nnumber of tabs. A TickerProvider is required to trigger\nthe notification whenever a frame triggers a state change.\nThe TickerProvider is vsync. Pass the\nvsync: this argument to the TabController constructor\nwhenever you create a new TabController.", "The TickerProvider is an interface implemented\nby classes that can vend Ticker objects.\nTickers can be used by any object that must be notified whenever a\nframe triggers, but they\u2019re most commonly used indirectly via an\nAnimationController. AnimationControllers\nneed a TickerProvider to obtain their Ticker.\nIf you are creating an AnimationController from a State,\nthen you can use the TickerProviderStateMixin\nor SingleTickerProviderStateMixin\nclasses to obtain a suitable TickerProvider.", "The Scaffold widget wraps a new TabBar widget and\ncreates two tabs. The TabBarView widget\nis passed as the body parameter of the Scaffold widget.\nAll screens corresponding to the TabBar widget\u2019s tabs are\nchildren to the TabBarView widget along with the same TabController.", "In React Native, import the needed react-navigation packages and then use\ncreateDrawerNavigator and DrawerNavigation.", "In Flutter, we can use the Drawer widget in combination with a\nScaffold to create a layout with a Material Design drawer.\nTo add a Drawer to an app, wrap it in a Scaffold widget.\nThe Scaffold widget provides a consistent\nvisual structure to apps that follow the\nMaterial Design guidelines. It also supports\nspecial Material Design components,\nsuch as Drawers, AppBars, and SnackBars.", "The Drawer widget is a Material Design panel that slides\nin horizontally from the edge of a Scaffold to show navigation\nlinks in an application. You can\nprovide a ElevatedButton, a Text widget,\nor a list of items to display as the child to the Drawer widget.\nIn the following example, the ListTile\nwidget provides the navigation on tap.", "The Scaffold widget also includes an AppBar widget that automatically\ndisplays an appropriate IconButton to show the Drawer when a Drawer is\navailable in the Scaffold. The Scaffold automatically handles the\nedge-swipe gesture to show the Drawer.", "To listen for and respond to gestures,\nFlutter supports taps, drags, and scaling.\nThe gesture system in Flutter has two separate layers.\nThe first layer includes raw pointer events,\nwhich describe the location and movement of pointers,\n(such as touches, mice, and styli movements), across the screen.\nThe second layer includes gestures,\nwhich describe semantic actions\nthat consist of one or more pointer movements.", "In React Native, listeners are added to components\nusing PanResponder or the Touchable components.", "For more complex gestures and combining several touches into\na single gesture, PanResponder is used.", "In Flutter, to add a click (or press) listener to a widget,\nuse a button or a touchable widget that has an onPress: field.\nOr, add gesture detection to any widget by wrapping it\nin a GestureDetector.", "For more information, including a list of\nFlutter GestureDetector callbacks,\nsee the GestureDetector class.", "Fetching data from the internet is common for most apps. And in Flutter,\nthe http package provides the simplest way to fetch data from the internet.", "React Native provides the Fetch API for networking\u2014you make a fetch request\nand then receive the response to get the data.", "Flutter uses the http package.", "To add the http package as a dependency, run flutter pub add:", "Flutter uses the dart:io core HTTP support client.\nTo create an HTTP Client, import dart:io.", "The client supports the following HTTP operations:\nGET, POST, PUT, and DELETE.", "Text fields allow users to type text into your app so they can be\nused to build forms, messaging apps, search experiences, and more.\nFlutter provides two core text field widgets:\nTextField and TextFormField.", "In React Native, to enter text you use a TextInput component to show a text\ninput box and then use the callback to store the value in a variable.", "In Flutter, use the TextEditingController\nclass to manage a TextField widget.\nWhenever the text field is modified,\nthe controller notifies its listeners.", "Listeners read the text and selection properties to\nlearn what the user typed into the field.\nYou can access the text in TextField\nby the text property of the controller.", "In this example, when a user clicks on the submit button an alert dialog\ndisplays the current text entered in the text field.\nThis is achieved using an AlertDialog\nwidget that displays the alert message, and the text from\nthe TextField is accessed by the text property of the\nTextEditingController.", "In Flutter, use the Form widget where\nTextFormField widgets along with the submit\nbutton are passed as children.\nThe TextFormField widget has a parameter called\nonSaved that takes a callback and executes\nwhen the form is saved. A FormState\nobject is used to save, reset, or validate\neach FormField that is a descendant of this Form.\nTo obtain the FormState, you can use Form.of()\nwith a context whose ancestor is the Form,\nor pass a GlobalKey to the Form constructor and call\nGlobalKey.currentState().", "The following example shows how Form.save() and formKey\n(which is a GlobalKey), are used to save the form on submit.", "When building a cross-platform app, you want to re-use as much code as\npossible across platforms. However, scenarios might arise where it\nmakes sense for the code to be different depending on the OS.\nThis requires a separate implementation by declaring a specific platform.", "In React Native, the following implementation would be used:", "In Flutter, use the following implementation:", "Use the DevTools suite for debugging Flutter or Dart apps.", "DevTools includes support for profiling, examining the heap,\ninspecting the widget tree, logging diagnostics, debugging,\nobserving executed lines of code, debugging memory leaks and memory\nfragmentation. For more information, see the\nDevTools documentation.", "If you\u2019re using an IDE,\nyou can debug your application using the IDE\u2019s debugger.", "Flutter\u2019s Stateful Hot Reload feature helps you quickly and easily experiment,\nbuild UIs, add features, and fix bugs. Instead of recompiling your app\nevery time you make a change, you can hot reload your app instantly.\nThe app is updated to reflect your change,\nand the current state of the app is preserved.", "In React Native,\nthe shortcut is \u2318R for the iOS Simulator and tapping R twice on\nAndroid emulators.", "In Flutter, If you are using IntelliJ IDE or Android Studio,\nyou can select Save All (\u2318s/ctrl-s), or you can click the\nHot Reload button on the toolbar. If you\nare running the app at the command line using flutter run,\ntype r in the Terminal window.\nYou can also perform a full restart by typing R in the\nTerminal window.", "In React Native, the developer menu can be accessed by shaking your device: \u2318D\nfor the iOS Simulator or \u2318M for Android emulator.", "In Flutter, if you are using an IDE, you can use the IDE tools. If you start\nyour application using flutter run you can also access the menu by typing h\nin the terminal window, or type the following shortcuts:", "Well-designed animation makes a UI feel intuitive,\ncontributes to the look and feel of a polished app,\nand improves the user experience.\nFlutter\u2019s animation support makes it easy\nto implement simple and complex animations.\nThe Flutter SDK includes many Material Design widgets\nthat include standard motion effects,\nand you can easily customize these effects\nto personalize your app.", "In React Native, Animated APIs are used to create animations.", "In Flutter, use the Animation\nclass and the AnimationController class.\nAnimation is an abstract class that understands its\ncurrent value and its state (completed or dismissed).\nThe AnimationController class lets you\nplay an animation forward or in reverse,\nor stop animation and set the animation\nto a specific value to customize the motion.", "In the React Native example below, an animated component,\nFadeInView is created using the Animated API.\nThe initial opacity state, final state, and the\nduration over which the transition occurs are defined.\nThe animation component is added inside the Animated component,\nthe opacity state fadeAnim is mapped\nto the opacity of the Text component that we want to animate,\nand then, start() is called to start the animation.", "To create the same animation in Flutter, create an\nAnimationController object named controller\nand specify the duration. By default, an AnimationController\nlinearly produces values that range from 0.0 to 1.0,\nduring a given duration. The animation controller generates a new value\nwhenever the device running your app is ready to display a new frame.\nTypically, this rate is around 60 values per second.", "When defining an AnimationController,\nyou must pass in a vsync object.\nThe presence of vsync prevents offscreen\nanimations from consuming unnecessary resources.\nYou can use your stateful object as the vsync by adding\nTickerProviderStateMixin to the class definition.\nAn AnimationController needs a TickerProvider,\nwhich is configured using the vsync argument on the constructor.", "A Tween describes the interpolation between a\nbeginning and ending value or the mapping from an input\nrange to an output range. To use a Tween object\nwith an animation, call the Tween object\u2019s animate()\nmethod and pass it the Animation object that you want to modify.", "For this example, a FadeTransition\nwidget is used and the opacity property is\nmapped to the animation object.", "To start the animation, use controller.forward().\nOther operations can also be performed using the\ncontroller such as fling() or repeat().\nFor this example, the FlutterLogo\nwidget is used inside the FadeTransition widget.", "In React Native, either the PanResponder or\nthird-party libraries are used for swipe animation.", "In Flutter, to add a swipe animation, use the\nDismissible widget and nest the child widgets.", "The following table lists commonly-used React Native\ncomponents mapped to the corresponding Flutter widget\nand common widget properties.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/react-native-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "Add Material touch ripples | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Widgets that follow the Material Design guidelines display\na ripple animation when tapped.", "Flutter provides the InkWell\nwidget to perform this effect.\nCreate a ripple effect using the following steps:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/gestures/ripples", "base_url": "https://docs.flutter.dev/"}, {"title": "Delete data on the internet | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This recipe covers how to delete data over\nthe internet using the http package.", "This recipe uses the following steps:", "To add the http package as a dependency,\nrun flutter pub add:", "Import the http package.", "This recipe covers how to delete an album from the\nJSONPlaceholder using the http.delete() method.\nNote that this requires the id of the album that\nyou want to delete. For this example,\nuse something you already know, for example id = 1.", "The http.delete() method returns a Future that contains a Response.", "In order to check whether the data has been deleted or not,\nfirst fetch the data from the JSONPlaceholder\nusing the http.get() method, and display it in the screen.\n(See the Fetch Data recipe for a complete example.)\nYou should now have a Delete Data button that,\nwhen pressed, calls the deleteAlbum() method.", "Now, when you click on the Delete Data button,\nthe deleteAlbum() method is called and the id\nyou are passing is the id of the data that you retrieved\nfrom the internet. This means you are going to delete\nthe same data that you fetched from the internet.", "Once the delete request has been made,\nyou can return a response from the deleteAlbum()\nmethod to notify our screen that the data has been deleted.", "FutureBuilder() now rebuilds when it receives a response.\nSince the response won\u2019t have any data in its body\nif the request was successful,\nthe Album.fromJson() method creates an instance of the\nAlbum object with a default value (null in our case).\nThis behavior can be altered in any way you wish.", "That\u2019s all!\nNow you\u2019ve got a function that deletes the data from the internet.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/delete-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter News Toolkit | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter News Toolkit enables you to accelerate\ndevelopment of a mobile news app.\nThe toolkit assists you in building a customized\ntemplate app with prebuilt features required\nfor most news apps, such authentication and\nmonetization. After generating your\ntemplate app, your primary tasks are to connect to your\ndata source, and to customize the UI to reflect\nyour brand.", "The Flutter News Toolkit includes critical features,\nsuch as:", "You can use these pre-integrated features out of the box,\nor modify and swap them with other functionality that\nyou prefer.", "Generating your template app requires answering\na few simple questions, as described on the\nFlutter News Toolkit Overview doc page.", "For complete documentation on how to configure your project,\ncreate a template app, develop the app, how to\nhandle authentication, theming, work with an API\nserver, and much more, check out the\nFlutter News Toolkit documentation.", "You might also check out:", "info Note:\n  This is the first release of the news toolkit and,\n  while is has been tested by early adopters, it\n  might have issues or rough edges. Please don\u2019t\n  hesitate to file an issue.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/news-toolkit", "base_url": "https://docs.flutter.dev/"}, {"title": "Add Flutter to Android | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android", "base_url": "https://docs.flutter.dev/"}, {"title": "Set up universal links for iOS | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Deep linking is a mechanism for launching an app with a URI. This URI\ncontains scheme, host, and path, and opens the app to a specific\nscreen.", "A universal link is a type of deep link that uses http or https and\nis exclusive to Apple devices.", "Setting up universal links requires one to own a web domain. Otherwise, consider\nusing Firebase Hosting or GitHub Pages as a temporary solution.", "Write a Flutter app that can handle an incoming URL.\nThis example uses the go_router package to handle the routing.\nThe Flutter team maintains the go_router package.\nIt provides a simple API to handle complex routing scenarios.", "To create a new application, type flutter create <app-name>.", "To include the go_router package as a dependency, \nrun flutter pub add:", "To handle the routing, create a GoRouter object in the main.dart file:", "Navigate to the Info Plist file in the ios/Runner folder.", "Update the key to FlutterDeepLinkingEnabled with a Boolean value set to YES.", "info Note:\n    The FlutterDeepLinkingEnabled property opts into Flutter\u2019s default deeplink handler. If\n    you are using the third-party plugins, such as uni_links, setting this property will\n    break these plugins. Skip this step if you prefer to use third-party plugins.", "Enter applinks:<web domain>. Replace <web domain> with your own domain name.", "You have finished configuring the application for deep linking.", "You need to host an apple-app-site-association file in the web domain.\nThis file tells the mobile browser which iOS application to open instead of the browser.\nTo create the file, get the app ID of the Flutter app you created in the previous step.", "Apple formats the app ID as <team id>.<bundle id>.", "For example: Given a team ID of S8QB4VV633\nand a bundle ID of com.example.deeplinkCookbook, The app ID is\nS8QB4VV633.com.example.deeplinkCookbook.", "The hosted file should have the following content:", "Set the appID value to your Flutter application ID.", "Set the paths value to [\"*\"].\nThe paths field specifies the allowed universal links.\nUsing the asterisk, * redirects every path to the Flutter application.\nIf needed, change the paths value to a setting more appropriate\nto your app.", "Host the file at a URL that resembles the following:\n<webdomain>/.well-known/apple-app-site-association", "Verify that your browser can access this file.", "info Note:\n  It might take up to 24 hours before Apple\u2019s\n  Content Delivery Network (CDN)\n  requests the apple-app-site-association (AASA) file from your web domain.\n  The universal link won\u2019t work until the CDN requests the file.\n  To bypass Apple\u2019s CDN, check out the alternate mode section.", "You can use a real device or the Simulator to test a universal link,\nbut first make sure you have executed flutter run at least once on\nthe devices. This ensures that the Flutter application is installed.", "If using the Simulator, test using the Xcode CLI:", "Otherwise, type the URL in the Note app and click it.", "If everything is set up correctly, the Flutter application\nlaunches and displays the details screen:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/navigation/set-up-universal-links", "base_url": "https://docs.flutter.dev/"}, {"title": "DevTools release notes | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page summarizes the changes in official stable releases of DevTools.\nTo view a complete list of changes, check out the\nDevTools git log.", "The Dart and Flutter SDKs include DevTools.\nTo check your current version of DevTools, \nrun the following on your command line:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/release-notes", "base_url": "https://docs.flutter.dev/"}, {"title": "Handle changes to a text field | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In some cases, it\u2019s useful to run a callback function every time the text\nin a text field changes. For example, you might want to build a search\nscreen with autocomplete functionality where you want to update the\nresults as the user types.", "How do you run a callback function every time the text changes?\nWith Flutter, you have two options:", "The simplest approach is to supply an onChanged() callback to a\nTextField or a TextFormField.\nWhenever the text changes, the callback is invoked.", "In this example, print the current value and length of the text field \nto the console every time the text changes.", "It\u2019s important to use characters when dealing with user input,\nas text may contain complex characters.\nThis ensures that every character is counted correctly\nas they appear to the user.", "A more powerful, but more elaborate approach, is to supply a\nTextEditingController as the controller\nproperty of the TextField or a TextFormField.", "To be notified when the text changes, listen to the controller\nusing the addListener() method using the following steps:", "info Note:\n  Remember to dispose of the TextEditingController when it\u2019s no\n  longer needed. This ensures that you discard any resources used\n  by the object.", "Supply the TextEditingController to either a TextField\nor a TextFormField. Once you wire these two classes together,\nyou can begin listening for changes to the text field.", "You need a function to run every time the text changes.\nCreate a method in the _MyCustomFormState class that prints\nout the current value of the text field.", "Finally, listen to the TextEditingController and call the\n_printLatestValue() method when the text changes. Use the\naddListener() method for this purpose.", "Begin listening for changes when the\n_MyCustomFormState class is initialized,\nand stop listening when the _MyCustomFormState is disposed.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/forms/text-field-changes", "base_url": "https://docs.flutter.dev/"}, {"title": "Add a drawer to a screen | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In apps that use Material Design,\nthere are two primary options for navigation: tabs and drawers.\nWhen there is insufficient space to support tabs,\ndrawers provide a handy alternative.", "In Flutter, use the Drawer widget in combination with a\nScaffold to create a layout with a Material Design drawer.\nThis recipe uses the following steps:", "To add a drawer to the app, wrap it in a Scaffold widget.\nThe Scaffold widget provides a consistent visual structure to apps that\nfollow the Material Design Guidelines.\nIt also supports special Material Design\ncomponents, such as Drawers, AppBars, and SnackBars.", "In this example, create a Scaffold with a drawer:", "Now add a drawer to the Scaffold. A drawer can be any widget,\nbut it\u2019s often best to use the Drawer widget from the\nmaterial library,\nwhich adheres to the Material Design spec.", "Now that you have a Drawer in place, add content to it.\nFor this example, use a ListView.\nWhile you could use a Column widget,\nListView is handy because it allows users to scroll\nthrough the drawer if the\ncontent takes more space than the screen supports.", "Populate the ListView with a DrawerHeader\nand two ListTile widgets.\nFor more information on working with Lists,\nsee the list recipes.", "After a user taps an item, you might want to close the drawer.\nYou can do this by using the Navigator.", "When a user opens the drawer, Flutter adds the drawer to the navigation\nstack. Therefore, to close the drawer, call Navigator.pop(context).", "This example shows a Drawer as it is used within a Scaffold widget.\nThe Drawer has three ListTile items.\nThe _onItemTapped function changes the selected item\u2019s index\nand displays the corresponding text in the center of the Scaffold.", "info Note:\n  For more information on implementing navigation,\n  check out the Navigation section of the cookbook.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/drawer", "base_url": "https://docs.flutter.dev/"}, {"title": "DevTools | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "DevTools is a suite of performance and debugging tools\nfor Dart and Flutter.", "Here are some of the things you can do with DevTools:", "We expect you to use DevTools in conjunction with\nyour existing IDE or command-line based development workflow.", "See the VS Code, Android Studio/IntelliJ, or\ncommand line pages for installation instructions.", "Question: My app looks janky or stutters.\n  How do I fix it?", "Answer: Performance issues can cause UI frames\n  to be janky and/or slow down some operations.", "For more information, check out the\nPerformance page.", "Question: I see a lot of garbage collection (GC) events occurring.\n  Is this a problem?", "Answer: Frequent GC events might display on\n  the DevTools > Memory > Memory chart. In most cases,\n  it\u2019s not a problem.", "If your app has frequent background activity with some idle time,\nFlutter might use that opportunity to collect the created objects\nwithout performance impact.", "Please give DevTools a try, provide feedback, and file issues\nin the DevTools issue tracker. Thanks!", "For more information on debugging and profiling\nFlutter apps, see the Debugging page and,\nin particular, its list of other resources.", "For more information on using DevTools with Dart command-line apps, see the \nDevTools documentation on dart.dev.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/overview", "base_url": "https://docs.flutter.dev/"}, {"title": "Handle taps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You not only want to display information to users,\nyou want users to interact with your app.\nUse the GestureDetector widget to respond\nto fundamental actions, such as tapping and dragging.", "info Note:\n  To learn more, watch this short Widget of the Week video on the GestureDetector widget:", "This recipe shows how to make a custom button that shows\na snackbar when tapped with the following steps:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/gestures/handling-taps", "base_url": "https://docs.flutter.dev/"}, {"title": "Breaking changes and migration guides | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "As described in the breaking change policy,\non occasion we publish guides\nfor migrating code across a breaking change.", "To be notified about future breaking changes,\njoin the groups Flutter announce and Dart announce.", "When facing Dart errors after upgrading Flutter,\nconsider using the dart fix command\nto automatically migrate your code.\nNot every breaking change is supported in this way,\nbut many are.", "To avoid being broken by future versions of Flutter,\nconsider submitting your tests to our test registry.", "The following guides are available. They are sorted by\nrelease, and listed in alphabetical order:", "The following breaking change was reverted in release 2.2:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/breaking-changes", "base_url": "https://docs.flutter.dev/"}, {"title": "Automatic platform adaptations | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In general, two cases of platform adaptiveness exist:", "This article mainly covers the automatic adaptations\nprovided by Flutter in case 1 on Android and iOS.", "For case 2, Flutter bundles the means to produce the\nappropriate effects of the platform conventions but doesn\u2019t\nadapt automatically when app design choices are needed.\nFor a discussion, see issue #8410 and the\nMaterial/Cupertino adaptive widget problem definition.", "For an example of an app using different information\narchitecture structures on Android and iOS but sharing\nthe same content code, see the platform_design code samples.", "info\nPreliminary guides addressing case 2 \nare being added to the UI components section. \nYou can request additional guides by commenting on issue #8427.", "Flutter provides the navigation patterns seen on Android\nand iOS and also automatically adapts the navigation animation\nto the current platform.", "On Android, the default Navigator.push() transition\nis modeled after startActivity(),\nwhich generally has one bottom-up animation variant.", "On Android, Flutter uses the ZoomPageTransitionsBuilder animation.\nWhen the user taps on an item, the UI zooms in to a screen that features that item.\nWhen the user taps to go back, the UI zooms out to the previous screen.", "On iOS when the push style transition is used,\nFlutter\u2019s bundled CupertinoNavigationBar\nand CupertinoSliverNavigationBar nav bars\nautomatically animate each subcomponent to its corresponding\nsubcomponent on the next or previous page\u2019s\nCupertinoNavigationBar or CupertinoSliverNavigationBar.", "On Android,\nthe OS back button, by default, is sent to Flutter\nand pops the top route of the WidgetsApp\u2019s Navigator.", "On iOS,\nan edge swipe gesture can be used to pop the top route.", "Scrolling is an important part of the platform\u2019s\nlook and feel, and Flutter automatically adjusts\nthe scrolling behavior to match the current platform.", "Android and iOS both have complex scrolling physics\nsimulations that are difficult to describe verbally.\nGenerally, iOS\u2019s scrollable has more weight and\ndynamic friction but Android has more static friction.\nTherefore iOS gains high speed more gradually but stops\nless abruptly and is more slippery at slow speeds.", "On Android,\nscrolling past the edge of a scrollable shows an\noverscroll glow indicator (based on the color\nof the current Material theme).", "On iOS, scrolling past the edge of a scrollable\noverscrolls with increasing resistance and snaps back.", "On iOS,\nrepeated flings in the same direction stacks momentum\nand builds more speed with each successive fling.\nThere is no equivalent behavior on Android.", "On iOS,\ntapping the OS status bar scrolls the primary\nscroll controller to the top position.\nThere is no equivalent behavior on Android.", "When using the Material package,\nthe typography automatically defaults to the\nfont family appropriate for the platform.\nAndroid uses the Roboto font.\niOS uses the San Francisco font.", "When using the Cupertino package, the default theme\nuses the San Francisco font.", "The San Francisco font license limits its usage to\nsoftware running on iOS, macOS, or tvOS only.\nTherefore a fallback font is used when running on Android\nif the platform is debug-overridden to iOS or the\ndefault Cupertino theme is used.", "You might choose to adapt the text styling of Material \nwidgets to match the default text styling on iOS. \nYou can see widget-specific examples in the \nUI Component section.", "When using the Material package,\ncertain icons automatically show different\ngraphics depending on the platform.\nFor instance, the overflow button\u2019s three dots\nare horizontal on iOS and vertical on Android.\nThe back button is a simple chevron on iOS and\nhas a stem/shaft on Android.", "The material library also provides a set of platform-adaptive icons through Icons.adaptive.", "The Material and Cupertino packages automatically\ntrigger the platform appropriate haptic feedback in\ncertain scenarios.", "For instance,\na word selection via text field long-press triggers a \u2018buzz\u2019\nvibrate on Android and not on iOS.", "Scrolling through picker items on iOS triggers a\n\u2018light impact\u2019 knock and no feedback on Android.", "Flutter also makes the below adaptations while editing\nthe content of text fields to match the current platform.", "On Android,\nhorizontal swipes can be made on the soft keyboard\u2019s space key\nto move the cursor in Material and Cupertino text fields.", "On iOS devices with 3D Touch capabilities,\na force-press-drag gesture could be made on the soft\nkeyboard to move the cursor in 2D via a floating cursor.\nThis works on both Material and Cupertino text fields.", "With Material on Android,\nthe Android style selection toolbar is shown when\na text selection is made in a text field.", "With Material on iOS or when using Cupertino,\nthe iOS style selection toolbar is shown when a text\nselection is made in a text field.", "With Material on Android,\na single tap in a text field puts the cursor at the\nlocation of the tap.", "A collapsed text selection also shows a draggable\nhandle to subsequently move the cursor.", "With Material on iOS or when using Cupertino,\na single tap in a text field puts the cursor at the\nnearest edge of the word tapped.", "Collapsed text selections don\u2019t have draggable handles on iOS.", "With Material on Android,\na long press selects the word under the long press.\nThe selection toolbar is shown upon release.", "With Material on iOS or when using Cupertino,\na long press places the cursor at the location of the\nlong press. The selection toolbar is shown upon release.", "With Material on Android,\ndragging while holding the long press expands the words selected.", "With Material on iOS or when using Cupertino,\ndragging while holding the long press moves the cursor.", "On both Android and iOS,\na double tap selects the word receiving the\ndouble tap and shows the selection toolbar.", "This section includes preliminary recommendations on how to adapt \nMaterial widgets to deliver a natural and compelling experience on iOS. \nYour feedback is welcomed on issue #8427.", "Several widgets support .adaptive() constructors. \nThe following table lists these widgets.\nAdaptive constructors substitute the corresponding Cupertino components \nwhen the app is run on an iOS device.", "Widgets in the following table are used primarily for input, \nselection, and to display system information. \nBecause these controls are tightly integrated with the operating system,\nusers have been trained to recognize and respond to them.\nTherefore, we recommend that you follow platform conventions.", "Since Android 12, the default UI for top app \nbars follows the design guidelines defined in Material 3. \nOn iOS, an equivalent component called \u201cNavigation Bars\u201d \nis defined in Apple\u2019s Human Interface Guidelines (HIG).", "Certain properties of app bars in Flutter apps should be adapted, \nlike system icons and page transitions. \nThese are already automatically adapted when using \nthe Material AppBar and SliverAppBar widgets. \nYou can also further customize the properties of these widgets to better \nmatch iOS platform styles, as shown below.", "But, because app bars are displayed alongside \nother content in your page, it\u2019s only recommended to adapt the styling \nso long as its cohesive with the rest of your application. You can see \nadditional code samples and a further explanation in \nthe GitHub discussion on app bar adaptations.", "Since Android 12, the default UI for bottom navigation \nbars follow the design guidelines defined in Material 3. \nOn iOS, an equivalent component called \u201cTab Bars\u201d \nis defined in Apple\u2019s Human Interface Guidelines (HIG).", "Since tab bars are persistent across your app, they should match your\nown branding. However, if you choose to use Material\u2019s default \nstyling on Android, you might consider adapting to the default iOS\ntab bars.", "To implement platform-specific bottom navigation bars, \nyou can use Flutter\u2019s NavigationBar widget on Android \nand the CupertinoTabBar widget on iOS. \nBelow is a code snippet you can \nadapt to show a platform-specific navigation bars.", "Since Android 12, text fields follow the\nMaterial 3 (M3) design guidelines. \nOn iOS, Apple\u2019s Human Interface Guidelines (HIG) define\nan equivalent component.", "Since text fields require user input,\ntheir design should follow platform conventions.", "To implement a platform-specific TextField \nin Flutter, you can adapt the styling of the \nMaterial TextField.", "To learn more about adapting text fields, check out \nthe GitHub discussion on text fields.\nYou can leave feedback or ask questions in the discussion.", "Since Android 12, the default UI of alert dialogs \n(also known as a \u201cbasic dialog\u201d) follows the design guidelines \ndefined in Material 3 (M3). \nOn iOS, an equivalent component called \u201calert\u201d is defined in Apple\u2019s \nHuman Interface Guidelines (HIG).", "Since alert dialogs are often tightly integrated with the operating system, \ntheir design generally needs to follow the platform conventions. \nThis is especially important when a dialog is used to request user input \nabout security, privacy, and destructive operations (e.g., deleting files \npermanently). As an exception, a branded alert dialog design can be used on \nnon-critical user flows to highlight specific information or messages.", "To implement platform-specific alert dialogs, \nyou can use Flutter\u2019s AlertDialog widget on Android \nand the CupertinoAlertDialog widget on iOS. Below is a code snippet you can \nadapt to show a platform-specific alert dialog.", "To learn more about adapting alert dialogs, check out \nthe GitHub discussion on dialog adaptations.\nYou can leave feedback or ask questions in the discussion.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/platform-adaptations", "base_url": "https://docs.flutter.dev/"}, {"title": "State restoration for Android apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When a user runs a mobile app and then selects another\napp to run, the first app is moved to the background,\nor backgrounded. The operating system (both iOS and Android)\nmight kill the backgrounded app to release memory and\nimprove performance for the app running in the foreground.", "When the user selects the app again, bringing it\nback to the foreground, the OS relaunches it.\nBut, unless you\u2019ve set up a way to save the\nstate of the app before it was killed,\nyou\u2019ve lost the state and the app starts from scratch.\nThe user has lost the continuity they expect,\nwhich is clearly not ideal.\n(Imagine filling out a lengthy form and being interrupted\nby a phone call before clicking Submit.)", "So, how can you restore the state of the app so that\nit looks like it did before it was sent to the\nbackground?", "Flutter has a solution for this with the\nRestorationManager (and related classes)\nin the services library.\nWith the RestorationManager, the Flutter framework\nprovides the state data to the engine as the state\nchanges, so that the app is ready when the OS signals\nthat it\u2019s about to kill the app, giving the app only\nmoments to prepare.", "Instance state vs long-lived state\n  When should you use the RestorationManager and\n  when should you save state to long term storage?\n  Instance state\n  (also called short-term or ephemeral state),\n  includes unsubmitted form field values, the currently\n  selected tab, and so on. On Android, this is\n  limited to 1 MB and, if the app exceeds this,\n  it crashes with a TransactionTooLargeException\n  error in the native code.", "You can enable state restoration with just a few tasks:", "Define a restorationId or a restorationScopeId\nfor all widgets that support it,\nsuch as TextField and ScrollView.\nThis automatically enables built-in state restoration\nfor those widgets.", "For custom widgets,\nyou must decide what state you want to restore\nand hold that state in a RestorableProperty.\n(The Flutter API provides various subclasses for\ndifferent data types.)\nDefine those RestorableProperty widgets \nin a State class that uses the RestorationMixin.\nRegister those widgets with the mixin in a\nrestoreState method.", "If you use any Navigator API (like push, pushNamed, and so on)\nmigrate to the API that has \u201crestorable\u201d in the name\n(restorablePush, resstorablePushNamed, and so on)\nto restore the navigation stack.", "Providing a restorationId to\nMaterialApp, CupertinoApp, or WidgetsApp\nautomatically enables state restoration by\ninjecting a RootRestorationScope.\nIf you need to restore state above the app class,\ninject a RootRestorationScope manually.", "The difference between a restorationId and\na restorationScopeId: Widgets that take a\nrestorationScopeID create a new restorationScope\n(a new RestorationBucket) into which all children\nstore their state. A restorationId means the widget\n(and its children) store the data in the surrounding bucket.", "If you want your app to return to a particular route\nthat the user was most recently viewing\n(the shopping cart, for example), then you must implement\nrestoration state for navigation, as well.", "If you use the Navigator API directly,\nmigrate the standard methods to restorable\nmethods (that have \u201crestorable\u201d in the name).\nFor example, replace push with restorablePush.", "The VeggieSeasons example (listed under \u201cOther resources\u201d below)\nimplements navigation with the go_router package.\nSetting the restorationId\nvalues occur in the lib/screens classes.", "To test state restoration, set up your mobile device so that\nit doesn\u2019t save state once an app is backgrounded.\nTo learn how to do this for both iOS and Android,\ncheck out Testing state restoration on the\nRestorationManager page.", "report_problem Warning:\n  Don\u2019t forget to reenable\n  storing state on your device once you are\n  finished with testing!", "For further information on state restoration,\ncheck out the following resources:", "To learn more about short term and long term state,\ncheck out Differentiate between ephemeral state\nand app state.", "You might want to check out packages on pub.dev that\nperform state restoration, such as statePersistence.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android/restore-state-android", "base_url": "https://docs.flutter.dev/"}, {"title": "Taps, drags, and other gestures | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This document explains how to listen for, and respond to,\ngestures in Flutter.\nExamples of gestures include taps, drags, and scaling.", "The gesture system in Flutter has two separate layers.\nThe first layer has raw pointer events that describe\nthe location and movement of pointers (for example,\ntouches, mice, and styli) across the screen.\nThe second layer has gestures that describe semantic\nactions that consist of one or more pointer movements.", "Pointers represent raw data about the user\u2019s interaction\nwith the device\u2019s screen.\nThere are four types of pointer events:", "On pointer down, the framework does a hit test on your app\nto determine which widget exists at the location where the\npointer contacted the screen. The pointer down event\n(and subsequent events for that pointer) are then dispatched\nto the innermost widget found by the hit test.\nFrom there, the events bubble up the tree and are dispatched\nto all the widgets on the path from the innermost\nwidget to the root of the tree. There is no mechanism for\ncanceling or stopping pointer events from being dispatched further.", "To listen to pointer events directly from the widgets layer, use a\nListener widget. However, generally,\nconsider using gestures (as discussed below) instead.", "Gestures represent semantic actions (for example, tap, drag,\nand scale) that are recognized from multiple individual pointer\nevents, potentially even multiple individual pointers.\nGestures can dispatch multiple events, corresponding to the\nlifecycle of the gesture (for example, drag start,\ndrag update, and drag end):", "To listen to gestures from the widgets layer,\nuse a GestureDetector.", "info Note:\n  To learn more, watch this short\n  Widget of the Week video on the GestureDetector widget:", "If you\u2019re using Material Components,\nmany of those widgets already respond to taps or gestures.\nFor example, IconButton and TextButton\nrespond to presses (taps), and ListView\nresponds to swipes to trigger scrolling.\nIf you aren\u2019t using those widgets, but you want the\n\u201cink splash\u201d effect on a tap, you can use InkWell.", "At a given location on screen,\nthere might be multiple gesture detectors.\nFor example:", "All of these gesture detectors listen to the stream\nof pointer events as they flow past and attempt to recognize\nspecific gestures. The GestureDetector widget decides\nwhich gestures to attempt to recognize based on which of its\ncallbacks are non-null.", "When there is more than one gesture recognizer for a given\npointer on the screen, the framework disambiguates which\ngesture the user intends by having each recognizer join\nthe gesture arena. The gesture arena determines which\ngesture wins using the following rules:", "At any time, a recognizer can eliminate itself and leave the\narena. If there\u2019s only one recognizer left in the arena,\nthat recognizer wins.", "At any time, a recognizer can declare itself the winner,\ncausing all of the remaining recognizers to lose.", "For example, when disambiguating horizontal and vertical dragging,\nboth recognizers enter the arena when they receive the pointer\ndown event. The recognizers observe the pointer move events.\nIf the user moves the pointer more than a certain number of\nlogical pixels horizontally, the horizontal recognizer declares\nthe win and the gesture is interpreted as a horizontal drag.\nSimilarly, if the user moves more than a certain number of logical\npixels vertically, the vertical recognizer declares itself the winner.", "The gesture arena is beneficial when there is only a horizontal\n(or vertical) drag recognizer. In that case, there is only one\nrecognizer in the arena and the horizontal drag is recognized\nimmediately, which means the first pixel of horizontal movement\ncan be treated as a drag and the user won\u2019t need to wait for\nfurther gesture disambiguation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/interactivity/gestures", "base_url": "https://docs.flutter.dev/"}, {"title": "iOS debugging | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Due to security around\nlocal network permissions in iOS 14 or later,\nyou must accept a permission dialog box to enable\nFlutter debugging functionalities such as hot-reload\nand DevTools.", "This affects debug and profile builds only and won\u2019t\nappear in release builds. You can also allow this\npermission by enabling\nSettings > Privacy > Local Network > Your App.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/ios-debugging", "base_url": "https://docs.flutter.dev/"}, {"title": "Upgrading Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "No matter which one of the Flutter release channels\nyou follow, you can use the flutter command to upgrade your\nFlutter SDK or the packages that your app depends on.", "To update the Flutter SDK use the flutter upgrade command:", "This command gets the most recent version of the Flutter SDK\nthat\u2019s available on your current Flutter channel.", "If you are using the stable channel\nand want an even more recent version of the Flutter SDK,\nswitch to the beta channel using flutter channel beta,\nand then run flutter upgrade.", "We publish migration guides for known breaking changes.", "We send announcements regarding these changes to the\nFlutter announcements mailing list.", "To avoid being broken by future versions of Flutter,\nconsider submitting your tests to our test registry.", "Flutter has two release channels:\nstable and beta.", "We recommend the stable channel for new users\nand for production app releases.\nThe team updates this channel about every three months.\nThe channel might receive occasional hot fixes\nfor high-severity or high-impact issues.", "The continuous integration for the Flutter team\u2019s plugins and packages\nincludes testing against the latest stable release.", "The latest documentation for the stable branch\nis at: https://api.flutter.dev", "The beta channel has the latest stable release.\nThis is the most recent version of Flutter that we have heavily tested.\nThis channel has passed all our public testing,\nhas been verified against test suites for Google products that use Flutter,\nand has been vetted against contributed private test suites.\nThe beta channel receives regular hot fixes\nto address newly discovered important issues.", "The beta channel is essentially the same as the stable channel\nbut updated monthly instead of quarterly.\nIndeed, when the stable channel is updated,\nit is updated to the latest beta release.", "We currently have one other channel, master.\nPeople who contribute to Flutter use this channel.", "This channel is not as thoroughly tested as\nthe beta and stable channels.", "We do not recommend using this channel as\nit is more likely to contain serious regressions.", "The latest documentation for the master branch\nis at: https://master-api.flutter.dev", "To view your current channel, use the following command:", "To change to another channel, use flutter channel <channel-name>.\nOnce you\u2019ve changed your channel, use flutter upgrade\nto download the latest Flutter SDK and dependent packages for that channel.\nFor example:", "info Note:\n  If you need a specific version of the Flutter SDK,\n  you can download it from the Flutter SDK archive.", "If you\u2019ve modified your pubspec.yaml file, or you want to update\nonly the packages that your app depends upon\n(instead of both the packages and Flutter itself),\nthen use one of the flutter pub commands.", "To update to the latest compatible versions of\nall the dependencies listed in the pubspec.yaml file,\nuse the upgrade command:", "To update to the latest possible version of\nall the dependencies listed in the pubspec.yaml file,\nuse the upgrade --major-versions command:", "This also automatically update the constraints\nin the pubspec.yaml file.", "To identify out-of-date package dependencies and get advice\non how to update them, use the outdated command. For details, see\nthe Dart pub outdated documentation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/upgrade", "base_url": "https://docs.flutter.dev/"}, {"title": "Using packages | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter supports using shared packages contributed by other developers\nto the Flutter and Dart ecosystems. This allows quickly building\nan app without having to develop everything from scratch.", "What is the difference between a package\n  and a plugin? A plugin is a type of\n  package\u2014the full designation is plugin package,\n  which is generally shortened to plugin.", "Existing packages enable many use cases\u2014for example,\nmaking network requests (http),\nnavigation/route handling (go_router),\nintegration with device APIs\n(url_launcher and battery_plus),\nand using third-party platform SDKs like Firebase\n(FlutterFire).", "To write a new package, see developing packages.\nTo add assets, images, or fonts,\nwhether stored in files or packages,\nsee Adding assets and images.", "The following section describes how to use\nexisting published packages.", "Packages are published to pub.dev.", "The Flutter landing page on pub.dev displays\ntop packages that are compatible with Flutter\n(those that declare dependencies generally compatible with Flutter),\nand supports searching among all published packages.", "The Flutter Favorites page on pub.dev lists\nthe plugins and packages that have been identified as\npackages you should first consider using when writing\nyour app. For more information on what it means to\nbe a Flutter Favorite, see the\nFlutter Favorites program.", "You can also browse the packages on pub.dev by filtering\non Android, iOS, web,\nLinux, Windows, macOS,\nor any combination thereof.", "To add the package, css_colors, to an app:", "To add the package, css_colors, to an app:", "To remove the package, css_colors, to an app:", "The Installing tab,\navailable on any package page on pub.dev,\nis a handy reference for these steps.", "For a complete example,\nsee the css_colors example below.", "Suppose you want to use some_package and\nanother_package in an app,\nand both of these depend on url_launcher,\nbut in different versions.\nThat causes a potential conflict.\nThe best way to avoid this is for package authors to use\nversion ranges rather than specific versions when\nspecifying dependencies.", "If some_package declares the dependencies above\nand another_package declares a compatible\nurl_launcher dependency like '5.4.6' or\n^5.5.0, pub resolves the issue automatically.\nPlatform-specific dependencies on\nGradle modules and/or CocoaPods\nare solved in a similar way.", "Even if some_package and another_package\ndeclare incompatible versions for url_launcher,\nthey might actually use url_launcher in\ncompatible ways. In this situation,\nthe conflict can be resolved by adding\na dependency override declaration to the app\u2019s\npubspec.yaml file, forcing the use of a particular version.", "For example, to force the use of url_launcher version 5.4.0,\nmake the following changes to the app\u2019s pubspec.yaml file:", "If the conflicting dependency is not itself a package,\nbut an Android-specific library like guava,\nthe dependency override declaration must be added to\nGradle build logic instead.", "To force the use of guava version 28.0, make the following\nchanges to the app\u2019s android/build.gradle file:", "CocoaPods doesn\u2019t currently offer dependency\noverride functionality.", "If no package exists for your specific use case,\nyou can write a custom package.", "To minimize the risk of version collisions,\nspecify a version range in the pubspec.yaml file.", "All packages have a version number, specified in the\npackage\u2019s pubspec.yaml file. The current version of a package\nis displayed next to its name (for example,\nsee the url_launcher package), as\nwell as a list of all prior versions\n(see url_launcher versions).", "To ensure that the app doesn\u2019t break when a\npackage is updated,\nspecify a version range using one of the\nfollowing formats:", "Range constraints: Specify a minimum and maximum version. For example:", "Range constraints with caret syntax\nare similar to regular range constraints:", "For additional details,\nsee the package versioning guide.", "When running flutter pub get \nfor the first time after adding a package,\nFlutter saves the concrete package version found in the pubspec.lock\nlockfile. This ensures that you get the same version again\nif you, or another developer on your team, run flutter pub get.", "To upgrade to a new version of the package,\nfor example to use new features in that package,\nrun flutter pub upgrade\nto retrieve the highest available version of the package\nthat is allowed by the version constraint specified in\npubspec.yaml.\nNote that this is a different command from\nflutter upgrade or flutter update-packages,\nwhich both update Flutter itself.", "Packages can be used even when not published on pub.dev.\nFor private packages, or for packages not ready for publishing,\nadditional dependency options are available:", "Finally, use the ref argument to pin the dependency to a\nspecific git commit, branch, or tag. For more details, see\nPackage dependencies.", "The following examples walk through the necessary steps for\nusing packages.", "The css_colors package\ndefines color constants for CSS colors, so use the constants\nwherever the Flutter framework expects the Color type.", "To use this package:", "Create a new project called cssdemo.", "Open pubspec.yaml, and add the css-colors dependency:", "Run flutter pub get in the terminal,\nor click Get Packages in VS Code.", "Open lib/main.dart and replace its full contents with:", "The url_launcher plugin package enables opening\nthe default browser on the mobile platform to display\na given URL, and is supported on Android, iOS, web,\nWindows, Linux, and macos.\nThis package is a special Dart package called a\nplugin package (or plugin),\nwhich includes platform-specific code.", "To use this plugin:", "Create a new project called launchdemo.", "Open pubspec.yaml, and add the url_launcher dependency:", "Run flutter pub get in the terminal,\nor click Get Packages get in VS Code.", "Open lib/main.dart and replace its full contents with the\nfollowing:", "Run the app (or stop and restart it, if it was already running\nbefore adding the plugin). Click Show Flutter homepage.\nYou should see the default browser open on the device,\ndisplaying the homepage for flutter.dev.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//packages-and-plugins/using-packages", "base_url": "https://docs.flutter.dev/"}, {"title": "Codelabs & workshops | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter codelabs provide a guided,\nhands-on coding experience. Some codelabs\nrun in DartPad\u2014no downloads required!", "Flutter workshops are similar to the codelabs,\nbut are instructor led and always use DartPad.\nThe provided workshop link takes you to the relevant YouTube video,\nwhich tells you where to find the associated DartPad link.", "You might want to check out the workshops\n  created by our Google Developer Experts (GDEs).\n  You can find them on the Flutter community blog.", "If you\u2019re new to Flutter, we recommend starting with\none of the following codelabs:", "Building your first Flutter app (workshop)\nAn instructor-led version of our very popular\n\u201cWrite your first Flutter app\u201d codelab\n(listed below).", "Your first Flutter app\nCreate a simple app that automatically generates cool-sounding names,\nsuch as \u201cnewstay\u201d, \u201clightstream\u201d, \u201cmainbrake\u201d, or \u201cgraypine\u201d.\nThis app is responsive and runs on mobile, desktop, and web.\n(This also replaces the previous \u201cwrite your first Flutter app\u201d\nfor mobile, part 1 and part 2 codelabs.)", "Write your first Flutter app on the web\nImplement a simple web app in DartPad (no downloads\nrequired!) that displays a sign-in screen\ncontaining three text fields. As the user fills out the\nfields, a progress bar animates along the top of the\nsign-in area. This codelab is written specifically for\nthe web, but if you have downloaded and configured\nAndroid and iOS tooling, the completed app\nworks on Android and iOS devices, as well.", "Records and Patterns in Dart 3\nDiscover Dart 3\u2019s new records and patterns features.\nLearn how you can use them in a Flutter app to help you\nwrite more readable and maintainable Dart code.", "Building scrolling experiences in Flutter (workshop)\nStart with an app that performs simple, straightforward scrolling\nand enhance it to create fancy and custom scrolling effects\nby using slivers.", "Dart null safety in Action (workshop)\nAn instructor-led workshop based on the Null safety codelab\non the dart.dev site.", "How to manage application states using inherited widgets (workshop)\nLearn how to manage the state of your app\u2019s data by\nusing the InheritedWidget class, one of the\nlow-level state management classes provided\nby Flutter.", "Learn about Material Design and basic Flutter concepts,\nlike layout and animations:", "Basic Flutter layout concepts\nUse DartPad in a browser (no downloads required!)\nto learn the basics of creating a Flutter layout.", "How to debug layout issues with the Flutter Inspector\nNot an official codelab, but step-by-step instructions on\nhow to debug common layout problems using the Flutter \nInspector and Layout Explorer.", "Implicit animations\nUse DartPad (no downloads required!) to learn how to use\nimplicit animations to add motion and create\nvisual effects for the widgets in your UI.", "Building Beautiful Transitions with Material Motion for Flutter\nLearn how to use the Material animations package to\nadd pre-built transitions to a Material app called Reply.", "Take your Flutter app from boring to beautiful\nLearn how to use some of the features in Material 3\nto make your app more beautiful and more responsive.", "MDC-101 Flutter: Material Components (MDC) Basics\nLearn the basics of using Material Components by building\na simple app with core components.  The four MDC codelabs\nguide you through building an e-commerce app called Shrine.\nYou\u2019ll start by building a login page using several of MDC\nFlutter\u2019s components.", "MDC-102 Flutter: Material Structure and Layout\nLearn how to use Material for structure and layout in Flutter.\nContinue building the e-commerce app, introduced in MDC-101,\nby adding navigation, structure, and data.", "MDC-103 Flutter: Material Theming with Color, Shape, Elevation, and Type\nDiscover how Material Components for Flutter make it\neasy to differentiate your product, and express your\nbrand through design. Continue building your e-commerce\napp by adding a home screen that displays products.", "MDC-104 Flutter: Material Advanced Components\nImprove your design and learn to use our advanced\ncomponent backdrop menu. Finish your e-commerce app\nby adding a backdrop with a menu that filters\nproducts by the selected category.", "Adaptive Apps in Flutter\nLearn how to build a Flutter app that adapts to the \nplatform that it\u2019s running on, be that Android, iOS, \nthe web, Windows, macOS, or Linux.", "Building next generation UIs in Flutter\nLearn how to build a Flutter app that uses the power of flutter_animate,\nfragment shaders, and particle fields. You will craft a user interface that\nevokes those science fiction movies and TV shows we all love\nwatching when we aren\u2019t coding.", "Learn how to use Flutter with other technologies.", "Adding AdMob Ads to a Flutter app\nLearn how to add an AdMob banner, an interstitial ad,\nand a rewarded ad to an app called Awesome Drawing Quiz,\na game that lets players guess the name of the drawing.", "Adding an AdMob banner and native inline ads to a Flutter app\nLearn how to implement inline banner and native ads\nto a travel booking app that lists possible\nflight destinations.", "Adding in-app purchases to your Flutter app\nExtend a simple gaming app that uses the Dash mascot as\ncurrency to offer three types of in-app purchases:\nconsumable, non-consumable, and subscription.", "Add a user authentication flow to a Flutter app using FirebaseUI\nLearn how to add Firebase authentication to a Flutter app\nwith only a few lines of code.", "Get to know Firebase for Flutter (workshop)\nAn instructor-led version of our popular\n\u201cGet to know Firebase for Flutter\u201d codelab\n(listed below).", "Get to know Firebase for Flutter\nBuild an event RSVP and guestbook chat app on both Android\nand iOS using Flutter, authenticating users with Firebase\nAuthentication, and sync data using Cloud Firestore.", "Local development for your Flutter apps using the Firebase Emulator Suite\nLearn how to use the Firebase Emulator Suite when\ndeveloping with Flutter. You will also learn to use\nthe Auth and Firestore emulators.", "Create a custom text-classification model with TensorFlow Lite Model Maker", "Create a Flutter app to classify texts with TensorFlow\nLearn how to run a text-classification inference from a Flutter\napp with TensorFlow Serving through REST and gRPC.", "Train a comment-spam detection model with TensorFlow Lite Model Maker\nLearn how to install the TensorFlow Lite Model Maker with Colab,\nHow to use a data loader, and how to build a model.", "Adding Google Maps to a Flutter app\nDisplay a Google map in an app, retrieve data from a\nweb service, and display the data as markers on the map.", "Adding WebView to your Flutter app\nWith the WebView Flutter plugin you can add a WebView \nwidget to your Android or iOS Flutter app.", "Build voice bots for mobile with Dialogflow and Flutter (workshop)\nAn instructor-led version of the Dialogflow\nand Flutter codelab (listed below).", "Build voice bots for Android with Dialogflow and Flutter\nLearn how to build a mobile FAQ bot that can answer most\ncommon questions about the tool Dialogflow. End users\ncan interact with the text interface or stream a voice\ninteraction via the built-in microphone of a mobile device.", "Building a game with Flutter and Flame \nLearn how to create a platform game (featuring\nDash or Sparky), using the Flame package.", "Using FFI in a Flutter plugin \nLearn how to use Dart\u2019s FFI (foreign function interface)\nlibrary, ffigen, allowing you to leverage\nexisting native libraries that provide a\nC interface.", "Create haikus about Google products with the PaLM API and Flutter\nLearn how to build an app that uses the PaLM API to \ngenerate haikus based on Google product names. The \nPaLM API gives you access to Google\u2019s \nstate-of-the-art large language models.", "Learn how to test your Flutter application.", "Learn how to write code that\u2019s targeted for specific platforms,\nlike iOS, Android, desktop, or the web.", "Building a Cupertino app with Flutter\nBuild a version of the Shrine shopping app\n(used in the Material Design codelabs) using the\nCupertino package to create an iOS style look and feel.\nCreate multiple tabs and navigate between them.\nUse the provider package to manage state between screens.", "How to write a Flutter plugin\nLearn how to write a plugin by creating a music plugin\nfor iOS and Android that processes audio on the host platform.\nThen make an example app that uses your plugin to make a music keyboard.", "Using a plugin with a Flutter web app\nFinish an app that reports the number of stars on a GitHub repository.\nUse Dart DevTools to do some simple debugging, and\nhost your app on Firebase and, finally, use a Flutter plugin to\nlaunch the app and open the hosted privacy policy.", "Write a Flutter desktop application\nBuild a Flutter desktop app (Windows, Linux, or macOS)\nthat accesses GitHub APIs to retrieve your repositories,\nassigned issues, and pull requests. As part of this task,\ncreate and use plugins to interact with native APIs and desktop applications,\nand use code generation to build type-safe client libraries for GitHub\u2019s APIs.", "Adding a Home Screen widget to your Flutter app NEW\nLearn how to add a Home Screen widget to your Flutter app\non iOS. This applies to your home screen, lock screen, or the\ntoday view.", "For Dart-specific codelabs, see the\ncodelabs page on the Dart site.", "We also recommend the following online class:", "info Note:\n  If you have trouble viewing any of the codelabs\n  on codelabs.developers.google.com, try \n  this mirror of the Flutter codelabs.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//codelabs", "base_url": "https://docs.flutter.dev/"}, {"title": "Hot reload | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter\u2019s hot reload feature helps you quickly and\neasily experiment, build UIs, add features, and fix bugs.\nHot reload works by injecting updated source code files\ninto the running Dart Virtual Machine (VM).\nAfter the VM updates classes with the new versions of fields and functions,\nthe Flutter framework automatically rebuilds the widget tree,\nallowing you to quickly view the effects of your changes.", "To hot reload a Flutter app:", "If you\u2019re working in an IDE/editor that supports Flutter\u2019s IDE tools,\nselect Save All (cmd-s/ctrl-s),\nor click the hot reload button on the toolbar.", "If you\u2019re running the app at the command line using flutter run,\nenter r in the terminal window.", "After a successful hot reload operation,\nyou\u2019ll see a message in the console similar to:", "The app updates to reflect your change,\nand the current state of the app is preserved.\nYour app continues to execute from where it was prior\nto run the hot reload command.\nThe code updates and execution continues.", "What is the difference between hot reload, hot restart,\n  and full restart?", "Flutter web currently supports hot restart but not\n  hot reload.", "\nControls for run, run debug, hot reload, and hot restart in Android Studio", "A code change has a visible effect only if the modified\nDart code is run again after the change. Specifically,\na hot reload causes all the existing widgets to rebuild.\nOnly code involved in the rebuilding of the widgets\nis automatically re-executed. The main() and initState()\nfunctions, for example, are not run again.", "The next sections describe specific scenarios that involve\nhot reload. In some cases, small changes to the Dart code\nenable you to continue using hot reload for your app.\nIn other cases, a hot restart, or a full restart is needed.", "Hot reload can break when the app is killed.\nFor example, if the app was in the background for too long.", "When a code change introduces a compilation error,\nhot reload generates an error message similar to:", "In this situation, simply correct the errors on the\nspecified lines of Dart code to keep using hot reload.", "Hot reload won\u2019t apply changes made to\na builder of a CupertinoTabView.\nFor more information, see Issue 43574.", "Hot reload doesn\u2019t work when enumerated types are\nchanged to regular classes or regular classes are\nchanged to enumerated types.", "Hot reload won\u2019t work when generic type declarations\nare modified. For example, the following won\u2019t work:", "If you\u2019ve changed native code (such as Kotlin, Java, Swift,\nor Objective-C), you must perform a full restart (stop and\nrestart the app) to see the changes take effect.", "Flutter\u2019s stateful hot reload preserves the state of your app.\nThis approach enables you to view the effect of the most\nrecent change only, without throwing away the current state.\nFor example, if your app requires a user to log in,\nyou can modify and hot reload a page several levels down in\nthe navigation hierarchy, without re-entering your login credentials.\nState is kept, which is usually the desired behavior.", "If code changes affect the state of your app (or its dependencies),\nthe data your app has to work with might not be fully consistent\nwith the data it would have if it executed from scratch.\nThe result might be different behavior after a hot reload\nversus a hot restart.", "In Dart, static fields are lazily initialized.\nThis means that the first time you run a Flutter app and a\nstatic field is read, it\u2019s set to whatever value its\ninitializer was evaluated to.\nGlobal variables and static fields are treated as state,\nand are therefore not reinitialized during hot reload.", "If you change initializers of global variables and static fields,\na hot restart or restart the state where the initializers are hold\nis necessary to see the changes.\nFor example, consider the following code:", "After running the app, you make the following change:", "You hot reload, but the change is not reflected.", "Conversely, in the following example:", "Running the app for the first time prints 1 and 1.\nThen, you make the following change:", "While changes to const field values are always hot reloaded,\nthe static field initializer is not rerun. Conceptually,\nconst fields are treated like aliases instead of state.", "The Dart VM detects initializer changes and flags when a set\nof changes needs a hot restart to take effect.\nThe flagging mechanism is triggered for\nmost of the initialization work in the above example,\nbut not for cases like the following:", "To update foo and view the change after hot reload,\nconsider redefining the field as const or using a getter to\nreturn the value, rather than using final.\nFor example, either of the following solutions work:", "For more information, read about the differences\nbetween the const and final keywords in Dart.", "Even when a hot reload operation appears successful and generates no\nexceptions, some code changes might not be visible in the refreshed UI.\nThis behavior is common after changes to the app\u2019s main() or\ninitState() methods.", "As a general rule, if the modified code is downstream of the root\nwidget\u2019s build() method, then hot reload behaves as expected.\nHowever, if the modified code won\u2019t be re-executed as a result\nof rebuilding the widget tree, then you won\u2019t\nsee its effects after hot reload.", "For example, consider the following code:", "After running this app, change the code as follows:", "With a hot restart, the program starts from the beginning,\nexecutes the new version of main(),\nand builds a widget tree that displays the text Hello.", "However, if you hot reload the app after this change,\nmain() and initState() are not re-executed,\nand the widget tree is rebuilt with the unchanged instance\nof MyApp as the root widget.\nThis results in no visible change after hot reload.", "When hot reload is invoked, the host machine looks\nat the edited code since the last compilation.\nThe following libraries are recompiled:", "The source code from those libraries is compiled into\nkernel files and sent to the mobile device\u2019s Dart VM.", "The Dart VM re-loads all libraries from the new kernel file.\nSo far no code is re-executed.", "The hot reload mechanism then causes the Flutter framework\nto trigger a rebuild/re-layout/repaint of all existing\nwidgets and render objects.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/hot-reload", "base_url": "https://docs.flutter.dev/"}, {"title": "Export fonts from a package | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Rather than declaring a font as part of an app,\nyou can declare a font as part of a separate package.\nThis is a convenient way to share the same font across\nseveral different projects,\nor for coders publishing their packages to pub.dev.\nThis recipe uses the following steps:", "info Note:\n  Check out the google_fonts package for direct access\n  to almost 1000 open-sourced font families.", "To export a font from a package, you need to import the font files into the\nlib folder of the package project. You can place font files directly in the\nlib folder or in a subdirectory, such as lib/fonts.", "In this example, assume you\u2019ve got a Flutter library called\nawesome_package with fonts living in a lib/fonts folder.", "Now you can use the fonts in the package by\nupdating the pubspec.yaml in the app\u2019s root directory.", "To add the awesome_package package as a dependency,\nrun flutter pub add:", "Now that you\u2019ve imported the package, tell Flutter where to\nfind the fonts from the awesome_package.", "To declare package fonts, prefix the path to the font with\npackages/awesome_package.\nThis tells Flutter to look in the lib folder\nof the package for the font.", "Use a TextStyle to change the appearance of text.\nTo use package fonts, declare which font you\u2019d like to use and\nwhich package the font belongs to.", "The Raleway and RobotoMono fonts were downloaded from\nGoogle Fonts.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/package-fonts", "base_url": "https://docs.flutter.dev/"}, {"title": "Animate a widget using a physics simulation | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Physics simulations can make app interactions feel realistic and interactive.\nFor example, you might want to animate a widget to act as if it were attached to\na spring or falling with gravity.", "This recipe demonstrates how to move a widget from a dragged point back to the\ncenter using a spring simulation.", "This recipe uses these steps:", "Start with a stateful widget called DraggableCard:", "Make the _DraggableCardState class extend from\nSingleTickerProviderStateMixin.\nThen construct an AnimationController in\ninitState and set vsync to this.", "info Note:\n  Extending SingleTickerProviderStateMixin allows the state object to be a\n  TickerProvider for the AnimationController. For more information, see the\n  documentation for TickerProvider.", "Make the widget move when it\u2019s dragged, and add an Alignment field to the\n_DraggableCardState class:", "Add a GestureDetector that handles the onPanDown, onPanUpdate, and\nonPanEnd callbacks. To adjust the alignment, use a MediaQuery to get the\nsize of the widget, and divide by 2. (This converts units of \u201cpixels dragged\u201d to\ncoordinates that Align uses.) Then, set the Align widget\u2019s alignment to\n_dragAlignment:", "When the widget is released, it should spring back to the center.", "Add an Animation<Alignment> field and an _runAnimation method. This\nmethod defines a Tween that interpolates between the point the widget was\ndragged to, to the point in the center.", "Next, update _dragAlignment when the AnimationController produces a\nvalue:", "Next, make the Align widget use the _dragAlignment field:", "Finally, update the GestureDetector to manage the animation controller:", "The last step is to do a little math, to calculate the velocity of the widget\nafter it\u2019s finished being dragged. This is so that the widget realistically\ncontinues at that speed before being snapped back. (The _runAnimation method\nalready sets the direction by setting the animation\u2019s start and end alignment.)", "First, import the physics package:", "The onPanEnd callback provides a DragEndDetails object. This object\nprovides the velocity of the pointer when it stopped contacting the screen. The\nvelocity is in pixels per second, but the Align widget doesn\u2019t use pixels. It\nuses coordinate values between [-1.0, -1.0] and [1.0, 1.0], where [0.0, 0.0]\nrepresents the center. The size calculated in step 2 is used to convert pixels\nto coordinate values in this range.", "Finally, AnimationController has an animateWith() method that can be given a\nSpringSimulation:", "Don\u2019t forget to call _runAnimation()  with the velocity and size:", "info Note:\n  Now that the animation controller uses a simulation it\u2019s duration argument\n  is no longer required.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/animation/physics-simulation", "base_url": "https://docs.flutter.dev/"}, {"title": "JSON and serialization | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "It is hard to think of a mobile app that doesn\u2019t need to communicate with a\nweb server or easily store structured data at some point. When making\nnetwork-connected apps, the chances are that it needs to consume some good old\nJSON, sooner or later.", "This guide looks into ways of using JSON with Flutter.\nIt covers which JSON solution to use in different scenarios, and why.", "info\nTerminology: Encoding and serialization are the same\n  thing\u2014turning a data structure into a string.\n  Decoding and deserialization are the\n  opposite process\u2014turning a string into a data structure.\n  However, serialization also commonly refers to the entire process of\n  translating data structures to and from a more easily readable format.", "To avoid confusion, this doc uses \u201cserialization\u201d when referring to the\n  overall process, and \u201cencoding\u201d and \u201cdecoding\u201d when specifically\n  referring to those processes.", "This article covers two general strategies for working with JSON:", "Different projects come with different complexities and use cases.\nFor smaller proof-of-concept projects or quick prototypes,\nusing code generators might be overkill.\nFor apps with several JSON models with more complexity,\nencoding by hand can quickly become tedious, repetitive,\nand lend itself to many small errors.", "Manual JSON decoding refers to using the built-in JSON decoder in\ndart:convert. It involves passing the raw JSON string to the jsonDecode()\nfunction, and then looking up the values you need in the resulting\nMap<String, dynamic>.\nIt has no external dependencies or particular setup process,\nand it\u2019s good for a quick proof of concept.", "Manual decoding does not perform well when your project becomes bigger.\nWriting decoding logic by hand can become hard to manage and error-prone.\nIf you have a typo when accessing a nonexistent JSON\nfield, your code throws an error during runtime.", "If you do not have many JSON models in your project and are\nlooking to test a concept quickly,\nmanual serialization might be the way you want to start.\nFor an example of manual encoding, see\nSerializing JSON manually using dart:convert.", "JSON serialization with code generation means having an external library\ngenerate the encoding boilerplate for you. After some initial setup,\nyou run a file watcher that generates the code from your model classes.\nFor example, json_serializable and built_value are these\nkinds of libraries.", "This approach scales well for a larger project. No hand-written\nboilerplate is needed, and typos when accessing JSON fields are caught at\ncompile-time. The downside with code generation is that it requires some\ninitial setup. Also, the generated source files might produce visual clutter\nin your project navigator.", "You might want to use generated code for JSON serialization when you have a\nmedium or a larger project. To see an example of code generation based JSON\nencoding, see Serializing JSON using code generation libraries.", "The simple answer is no.", "Such a library would require using runtime reflection, which is disabled in\nFlutter. Runtime reflection interferes with tree shaking, which Dart has\nsupported for quite a long time. With tree shaking, you can \u201cshake off\u201d unused\ncode from your release builds. This optimizes the app\u2019s size significantly.", "Since reflection makes all code implicitly used by default, it makes tree\nshaking difficult. The tools cannot know what parts are unused at runtime, so\nthe redundant code is hard to strip away. App sizes cannot be easily optimized\nwhen using reflection.", "Although you cannot use runtime reflection with Flutter,\nsome libraries give you similarly easy-to-use APIs but are\nbased on code generation instead. This\napproach is covered in more detail in the\ncode generation libraries section.", "Basic JSON serialization in Flutter is very simple. Flutter has a built-in\ndart:convert library that includes a straightforward JSON encoder and\ndecoder.", "The following sample JSON implements a simple user model.", "With dart:convert,\nyou can serialize this JSON model in two ways.", "By looking at the dart:convert documentation,\nyou\u2019ll see that you can decode the JSON by calling the\njsonDecode() function, with the JSON string as the method argument.", "Unfortunately, jsonDecode() returns a dynamic, meaning\nthat you do not know the types of the values until runtime. With this approach,\nyou lose most of the statically typed language features: type safety,\nautocompletion and most importantly, compile-time exceptions. Your code will\nbecome instantly more error-prone.", "For example, whenever you access the name or email fields, you could quickly\nintroduce a typo. A typo that the compiler doesn\u2019t know about since the\nJSON lives in a map structure.", "Combat the previously mentioned problems by introducing a plain model\nclass, called User in this example. Inside the User class, you\u2019ll find:", "With this approach, the calling code can have type safety,\nautocompletion for the name and email fields, and compile-time exceptions.\nIf you make typos or treat the fields as ints instead of Strings,\nthe app won\u2019t compile, instead of crashing at runtime.", "The responsibility of the decoding logic is now moved inside the model\nitself. With this new approach, you can decode a user easily.", "To encode a user, pass the User object to the jsonEncode() function.\nYou don\u2019t need to call the toJson() method, since jsonEncode()\nalready does it for you.", "With this approach, the calling code doesn\u2019t have to worry about JSON\nserialization at all. However, the model class still definitely has to.\nIn a production app, you would want to ensure that the serialization\nworks properly. In practice, the User.fromJson() and User.toJson()\nmethods both need to have unit tests in place to verify correct behavior.", "info\n  The cookbook contains a more comprehensive worked example of using\n  JSON model classes, using an isolate to parse\n  the JSON file on a background thread. This approach is ideal if you\n  need your app to remain responsive while the JSON file is being\n  decoded.", "However, real-world scenarios are not always that simple.\nSometimes JSON API responses are more complex, for example since they \ncontain nested JSON objects that must be parsed through their own model\nclass.", "It would be nice if there were something that handled the JSON encoding\nand decoding for you.  Luckily, there is!", "Although there are other libraries available, this guide uses\njson_serializable, an automated source code generator that\ngenerates the JSON serialization boilerplate for you.", "info\nChoosing a library:\n  You might have noticed two Flutter Favorite packages\n  on pub.dev that generate JSON serialization code,\n  json_serializable and built_value.\n  How do you choose between these packages?\n  The json_serializable package allows you to make regular\n  classes serializable by using annotations, \n  whereas the built_value package provides a higher-level way\n  of defining immutable value classes that can also be\n  serialized to JSON.", "Since the serialization code is not handwritten or maintained manually\nanymore, you minimize the risk of having JSON serialization exceptions at\nruntime.", "To include json_serializable in your project, you need one regular\ndependency, and two dev dependencies. In short, dev dependencies\nare dependencies that are not included in our app source code\u2014they\nare only used in the development environment.", "To add the dependencies, run flutter pub add:", "Run flutter pub get inside your project root folder\n(or click Packages get in your editor)\nto make these new dependencies available in your project.", "The following shows how to convert the User class to a\njson_serializable class. For the sake of simplicity,\nthis code uses the simplified JSON model\nfrom the previous samples.", "With this setup, the source code generator generates code for encoding\nand decoding the name and email fields from JSON.", "If needed, it is also easy to customize the naming strategy.\nFor example, if the API returns objects with snake_case,\nand you want to use lowerCamelCase in your models,\nyou can use the @JsonKey annotation with a name parameter:", "It\u2019s best if both server and client follow the same naming strategy.\n@JsonSerializable() provides fieldRename enum for totally converting dart \nfields into JSON keys.", "Modifying @JsonSerializable(fieldRename: FieldRename.snake) is equivalent to\nadding @JsonKey(name: '<snake_case>') to each field.", "Sometimes server data is uncertain, so it is necessary to verify and protect data\n on client.\nOther commonly used @JsonKey annotations include:", "When creating json_serializable classes the first time,\nyou\u2019ll get errors similar to what is shown in the image below.", "These errors are entirely normal and are simply because the generated code for\nthe model class does not exist yet. To resolve this, run the code\ngenerator that generates the serialization boilerplate.", "There are two ways of running the code generator.", "By running dart run build_runner build --delete-conflicting-outputs in the project root,\nyou generate JSON serialization code for your models whenever they are needed.\nThis triggers a one-time build that goes through the source files, picks the\nrelevant ones, and generates the necessary serialization code for them.", "While this is convenient, it would be nice if you did not have to run the\nbuild manually every time you make changes in your model classes.", "A watcher makes our source code generation process more convenient. It\nwatches changes in our project files and automatically builds the necessary\nfiles when needed. Start the watcher by running\ndart run build_runner watch --delete-conflicting-outputs in the project root.", "It is safe to start the watcher once and leave it running in the background.", "To decode a JSON string the json_serializable way,\nyou do not have actually to make any changes to our previous code.", "The same goes for encoding. The calling API is the same as before.", "With json_serializable,\nyou can forget any manual JSON serialization in the User class.\nThe source code generator creates a file called user.g.dart,\nthat has all the necessary serialization logic.\nYou no longer have to write automated tests to ensure\nthat the serialization works\u2014it\u2019s now\nthe library\u2019s responsibility to make sure the serialization works\nappropriately.", "You might have code that has nested classes within a class.\nIf that is the case, and you have tried to pass the class in JSON format\nas an argument to a service (such as Firebase, for example),\nyou might have experienced an Invalid argument error.", "Consider the following Address class:", "The Address class is nested inside the User class:", "Running \ndart run build_runner build --delete-conflicting-outputs\nin the terminal creates\nthe *.g.dart file, but the private _$UserToJson() function\nlooks something like the following:", "All looks fine now, but if you do a print() on the user object:", "When what you probably want is output like the following:", "To make this work, pass explicitToJson: true in the @JsonSerializable()\nannotation over the class declaration. The User class now looks as follows:", "For more information, see explicitToJson in the\nJsonSerializable class for the json_annotation package.", "For more information, see the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/serialization/json", "base_url": "https://docs.flutter.dev/"}, {"title": "More thoughts about performance | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Performance is a set of quantifiable properties of a performer.", "In this context, performance isn\u2019t the execution of an action itself;\nit\u2019s how well something or someone performs. Therefore, we use the adjective\n performant.", "While the how well part can, in general, be described in natural languages,\nin our limited scope, the focus is on something that is quantifiable as a real\nnumber. Real numbers include integers and 0/1 binaries as special cases.\nNatural language descriptions are still very important. For example, a news\narticle that heavily criticizes Flutter\u2019s performance by just using words\nwithout any numbers (a quantifiable value) could still be meaningful, and it\ncould have great impacts. The limited scope is chosen only because of our\nlimited resources.", "The required quantity to describe performance is often referred to as a\nmetric.", "To navigate through countless performance issues and metrics, you can categorize\nbased on performers.", "For example, most of the content on this website is about the Flutter app\nperformance, where the performer is a Flutter app. Infra performance is also\nimportant to Flutter, where the performers are build bots and CI task runners:\nthey heavily affect how fast Flutter can incorporate code changes, to improve\nthe app\u2019s performance.", "Here, the scope was intentionally broadened to include performance issues other\nthan just app performance issues because they can share many tools regardless of\nwho the performers are. For example, Flutter app performance and infra\nperformance might share the same dashboard and similar alert mechanisms.", "Broadening the scope also allows performers to be included that traditionally\nare easy to ignore. Document performance is such an example. The performer\ncould be an API doc of the SDK, and a metric could be: the percentage of readers\nwho find the API doc useful.", "Answering this question is not only crucial for validating the work in\nperformance, but also for guiding the performance work in order to be more\nuseful. The answer to \u201cwhy is performance important?\u201d often is also the answer\nto \u201chow is performance useful?\u201d", "Simply speaking, performance is important and useful because, in the scope,\nperformance must have quantifiable properties or metrics. This implies:", "Not that non-performance, or non-measurable issues or descriptions are not\nimportant. They\u2019re meant to highlight the scenarios where performance can be\nmore useful.", "Performance metrics are numbers. Reading a number is much easier than reading a\npassage. For example, it probably takes an engineer 1 second to consume the\nperformance rating as a number from 1 to 5. It probably takes the same engineer\nat least 1 minute to read the full, 500-word feedback summary.", "If there are many numbers, it\u2019s easy to summarize or visualize them for quick\nconsumption. For example, you can quickly consume millions of numbers by\nlooking at its histogram, average, quantiles, and so on. If a metric has a\nhistory of thousands of data points, then you can easily plot a timeline to\nread its trend.", "On the other hand, having n number of 500-word texts almost guarantees an\nn-time cost to consume those texts. It would be a daunting task to analyze\nthousands of historical descriptions, each having 500 words.", "Another advantage of having performance as a set of numbers is its unambiguity.\nWhen you want an animation to have a performance of 20 ms per frame or\n50 fps, there\u2019s little room for different interpretations about the numbers. On\nthe other hand, to describe the same animation in words, someone might call it\ngood, while someone else might complain that it\u2019s bad. Similarly, the same\nword or phrase could be interpreted differently by different people. You might\ninterpret an OK frame rate to be 60 fps, while someone else might interpret it\nto be 30 fps.", "Numbers can still be noisy. For example, the measured time per frame might\nbe a true computation time of this frame, plus a random amount of time (noise)\nthat CPU/GPU spends on some unrelated work. Hence, the metric fluctuates.\nNevertheless, there\u2019s no ambiguity of what the number means. And, there are\nalso rigorous theory and testing tools to handle such noise. For example, you\ncould take multiple measurements to estimate the distribution of a random\nvariable, or you could take the average of many measurements to eliminate the\nnoise by the law of large numbers.", "Performance numbers not only have unambiguous meanings, but they also have\nunambiguous comparisons. For example, there\u2019s no doubt that 5 is greater than 4.\nOn the other hand, it might be subjective to figure out whether excellent is\nbetter or worse than superb. Similarly, could you figure out whether epic is\nbetter than legendary? Actually, the phrase strongly exceeds expectations\ncould be better than superb in someone\u2019s interpretation. It only becomes\nunambiguous and comparable after a definition that maps strongly exceeds\nexpectations to 4 and superb to 5.", "Numbers are also easily convertible using formulas and functions. For example,\n60 fps can be converted to 16.67 ms per frame. A frame\u2019s rendering\ntime x (ms) can be converted to a binary indicator\nisSmooth = [x <= 16] = (x <= 16 ? 1 :0). Such conversion can be compounded or\nchained, so you can get a large variety of quantities using a single\nmeasurement without any added noise or ambiguity. The converted quantity can\nthen be used for further comparisons and consumption. Such conversions are\nalmost impossible if you\u2019re dealing with natural languages.", "If issues rely on verbose words to be discovered, then an unfair advantage is\ngiven to people who are more verbose (more willing to chat or write) or those\nwho are closer to the development team, who have a larger bandwidth and lower\ncost for chatting or face-to-face meetings.", "By having the same metrics to detect problems no matter how far away or how\nsilent the users are, we can treat all issues fairly. That, in turn,\nallows us to focus on the right issues that have greater impact.", "The following summarizes the 4 points discussed here, from a slightly different\nperspective:", "Make performance metrics easy to consume. Do not overwhelm the readers with a\nlot of numbers (or words). If there are many numbers, then try to summarize\nthem into a smaller set of numbers (for example, summarize many numbers into\na single average number). Only notify readers when the numbers change\nsignificantly (for example, automatic alerts on spikes or regressions).", "Make performance metrics as unambiguous as possible. Define the unit that the\nnumber is using. Precisely describe how the number is measured. Make the\nnumber easily reproducible. When there\u2019s a lot of noise, try to show the full\ndistribution, or eliminate the noise as much as possible by aggregating many\nnoisy measurements.", "Make it easy to compare performance. For example, provide a timeline to\ncompare the current version with the old version. Provide ways and tools to\nconvert one metric to another. For example, if we can convert both memory\nincrease and fps drops into the number of users dropped or revenue lost in\ndollars, then we can compare them and make an informed trade-off.", "Make performance metrics monitor a population that is as wide as possible,\nso no one is left behind.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/appendix", "base_url": "https://docs.flutter.dev/"}, {"title": "Set up app links for Android | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Deep linking is a mechanism for launching an app with a URI.\nThis URI contains scheme, host, and path,\nand opens the app to a specific screen.", "A app link is a type of deep link that uses\nhttp or https and is exclusive to Android devices.", "Setting up app links requires one to own a web domain.\nOtherwise, consider using Firebase Hosting\nor GitHub Pages as a temporary solution.", "Write a Flutter app that can handle an incoming URL.\nThis example uses the go_router package to handle the routing.\nThe Flutter team maintains the go_router package.\nIt provides a simple API to handle complex routing scenarios.", "To create a new application, type flutter create <app-name>:", "To include go_router package in your app,\nadd a dependency for go_router to the project:", "To add the go_router package as a dependency,\n run flutter pub add:", "To handle the routing,\ncreate a GoRouter object in the main.dart file:", "Add the following metadata tag and intent filter inside the\n<activity> tag with .MainActivity.", "Replace example.com with your own web domain.", "info Note:\n  The metadata tag flutter_deeplinking_enabled opts\n  into Flutter\u2019s default deeplink handler.\n  If you are using the third-party plugins,\n  such as uni_links, setting this metadata tag will\n  break these plugins. Omit this metadata tag\n  if you prefer to use third-party plugins.", "Host an assetlinks.json file in using a web server\nwith a domain that you own. This file tells the\nmobile browser which Android application to open instead\nof the browser. To create the file,\nget the package name of the Flutter app you created in\nthe previous step and the sha256 fingerprint of the\nsigning key you will be using to build the APK.", "Locate the package name in AndroidManifest.xml,\nthe package property under <manifest> tag.\nPackage names are usually in the format of com.example.*.", "The process might differ depending on how the apk is signed.", "You can find the sha256 fingerprint directly from play\ndeveloper console. Open your app in the play console,\nunder Release> Setup > App Integrity> App Signing tab:", "If you are storing the key locally,\nyou can generate sha256 using the following command:", "The hosted file should look similar to this:", "Set the package_name value to your Android application ID.", "Set sha256_cert_fingerprints to the value you got\nfrom the previous step.", "Host the file at a URL that resembles the following:\n<webdomain>/.well-known/assetlinks.json", "Verify that your browser can access this file.", "You can use a real device or the Emulator to test an app link,\nbut first make sure you have executed flutter run at least once on\nthe devices. This ensures that the Flutter application is installed.", "To test only the app setup, use the adb command:", "info Note:\n   This doesn\u2019t test whether the web files are\n   hosted correctly,\n   the command launches the app even\n   if web files are not presented.", "To test both web and app setup, you must click a link\ndirectly through web browser or another app.\nOne way is to create a Google Doc, add the link, and tap on it.", "If everything is set up correctly, the Flutter application\nlaunches and displays the details screen:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/navigation/set-up-app-links", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter SDK overview | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter SDK has the packages and command-line tools that you need to develop\nFlutter apps across platforms. To get the Flutter SDK, see Install.", "The following is available through the Flutter SDK:", "Note: For more information about the Flutter SDK, see its\nREADME file.", "The flutter CLI tool (flutter/bin/flutter) is how developers\n(or IDEs on behalf of developers) interact with Flutter.", "The dart CLI tool is available with the Flutter SDK at flutter/bin/dart.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/sdk", "base_url": "https://docs.flutter.dev/"}, {"title": "Add a Flutter View to an Android app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "report_problem Warning:\n  Integrating via a FlutterView\n  is advanced usage and requires manually creating custom, application specific\n  bindings.", "Integrating via a FlutterView\nrequires a bit more work than via FlutterActivity and FlutterFragment previously\ndescribed.", "Fundamentally, the Flutter framework on the Dart side requires access to various\nactivity-level events and lifecycles to function. Since the FlutterView (which\nis an android.view.View)\ncan be added to any activity which is owned by the developer\u2019s application\nand since the FlutterView doesn\u2019t have access to activity level events, the\ndeveloper must bridge those connections manually to the FlutterEngine.", "How you choose to feed your application\u2019s activities\u2019 events to the FlutterView\nwill be specific to your application.", "Unlike the guides for FlutterActivity and FlutterFragment, the FlutterView\nintegration could be better demonstrated with a sample project.", "A sample project is at https://github.com/flutter/samples/tree/main/add_to_app/android_view\nto document a simple FlutterView integration where FlutterViews are used\nfor some of the cells in a RecycleView list of cards as seen in the gif above.", "The general gist of the FlutterView-level integration is that you must recreate\nthe various interactions between the your Activity, the FlutterView\nand the FlutterEngine\npresent in the FlutterActivityAndFragmentDelegate\nin your own application\u2019s code. The connections made in the FlutterActivityAndFragmentDelegate\nare done automatically when using a FlutterActivity\nor a FlutterFragment,\nbut since the FlutterView\nin this case is being added to an Activity or Fragment in your application,\nyou must recreate the connections manually. Otherwise, the FlutterView\nwill not render anything or have other missing functionalities.", "A sample FlutterViewEngine\nclass shows one such possible implementation of an application-specific\nconnection between an Activity, a FlutterView\nand a FlutterEngine.", "The absolute minimum implementation needed for Flutter to draw anything at all\nis to:", "The reverse detachFromFlutterEngine and other lifecycle methods on the LifecycleChannel\nclass must also be called to not leak resources when the FlutterView or Activity\nis no longer visible.", "In addition, see the remaining implementation in the FlutterViewEngine\ndemo class or in the FlutterActivityAndFragmentDelegate\nto ensure a correct functioning of other features such as clipboards, system\nUI overlay, plugins etc.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android/add-flutter-view", "base_url": "https://docs.flutter.dev/"}, {"title": "Binding to native iOS code using dart:ffi | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter mobile and desktop apps can use the\ndart:ffi library to call native C APIs.\nFFI stands for foreign function interface.\nOther terms for similar functionality include\nnative interface and language bindings.", "info Note:\n  This page describes using the dart:ffi library\n  in iOS apps. For information on Android, see\n  Binding to native Android code using dart:ffi.\n  For information in macOS, see\n  Binding to native macOS code using dart:ffi.\n  This feature is not yet supported for web plugins.", "Before your library or program can use the FFI library\nto bind to native code, you must ensure that the\nnative code is loaded and its symbols are visible to Dart.\nThis page focuses on compiling, packaging,\nand loading iOS native code within a Flutter plugin or app.", "This tutorial demonstrates how to bundle C/C++\nsources in a Flutter plugin and bind to them using\nthe Dart FFI library on iOS.\nIn this walkthrough, you\u2019ll create a C function\nthat implements 32-bit addition and then\nexposes it through a Dart plugin named \u201cnative_add\u201d.", "A native library can be linked into an app either\ndynamically or statically. A statically linked library\nis embedded into the app\u2019s executable image,\nand is loaded when the app starts.", "Symbols from a statically linked library can be\nloaded using DynamicLibrary.executable or\nDynamicLibrary.process.", "A dynamically linked library, by contrast, is distributed\nin a separate file or folder within the app,\nand loaded on-demand. On iOS, the dynamically linked\nlibrary is distributed as a .framework folder.", "A dynamically linked library can be loaded into\nDart using DynamicLibrary.open.", "API documentation is available from the Dart dev channel:\nDart API reference documentation.", "To create an FFI plugin called \u201cnative_add\u201d,\ndo the following:", "info Note:\n  You can exclude platforms from --platforms that you don\u2019t want\n  to build to. However, you need to include the platform of \n  the device you are testing on.", "This will create a plugin with C/C++ sources in native_add/src.\nThese sources are built by the native build files in the various\nos build folders.", "The FFI library can only bind against C symbols,\nso in C++ these symbols are marked extern \"C\".", "You should also add attributes to indicate that the\nsymbols are referenced from Dart,\nto prevent the linker from discarding the symbols\nduring link-time optimization.\n__attribute__((visibility(\"default\"))) __attribute__((used)).", "On iOS, the native_add/ios/native_add.podspec links the code.", "The native code is invoked from dart in lib/native_add_bindings_generated.dart.", "The bindings are generated with package:ffigen.", "Dynamically linked libraries are automatically loaded by\nthe dynamic linker when the app starts. Their constituent\nsymbols can be resolved using DynamicLibrary.process.\nYou can also get a handle to the library with\nDynamicLibrary.open to restrict the scope of\nsymbol resolution, but it\u2019s unclear how Apple\u2019s\nreview process handles this.", "Symbols statically linked into the application binary\ncan be resolved using DynamicLibrary.executable or\nDynamicLibrary.process.", "To link against a platform library,\nuse the following instructions:", "A first-party native library can be included either\nas source or as a (signed) .framework file.\nIt\u2019s probably possible to include statically linked\narchives as well, but it requires testing.", "To link directly to source code,\nuse the following instructions:", "Add the following prefix to the\nexported symbol declarations to ensure they\nare visible to Dart:", "To link to a compiled dynamic library,\nuse the following instructions:", "To create a Flutter plugin that includes both\nC/C++/Objective-C and Dart code,\nuse the following instructions:", "The native code is then statically linked into\nthe application binary of any app that uses\nthis plugin.", "To create a Flutter plugin that includes Dart\nsource code, but distribute the C/C++ library\nin binary form, use the following instructions:", "report_problem Warning:\nDo not upload this plugin\n  (or any plugin containing binary code) to pub.dev.\n  Instead, this plugin should be downloaded\n  from a trusted third-party,\n  as shown in the CocoaPods example.", "When creating a release archive (IPA),\nthe symbols are stripped by Xcode.", "To learn more about C interoperability, check out these videos:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/c-interop", "base_url": "https://docs.flutter.dev/"}, {"title": "Creating responsive and adaptive apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "One of Flutter\u2019s primary goals is to create a framework\nthat allows you to develop apps from a single codebase\nthat look and feel great on any platform.", "This means that your app might appear on screens of\nmany different sizes, from a watch, to a foldable\nphone with two screens, to a high def monitor.", "Two terms that describe concepts for this\nscenario are adaptive and responsive. Ideally,\nyou\u2019d want your app to be both but what, \nexactly, does this mean?\nThese terms are similar, but they are not the same.", "Adaptive and responsive can be viewed as separate\ndimensions of an app: you can have an adaptive app\nthat is not responsive, or vice versa. And, of course,\nan app can be both, or neither.", "Flutter allows you to create apps that self-adapt\nto the device\u2019s screen size and orientation.", "There are two basic approaches to creating Flutter\napps with responsive design:", "Other useful widgets and classes for creating a responsive UI:", "For more information, here are a few resources,\nincluding contributions from the Flutter community:", "Learn more about creating an adaptive Flutter app with\nBuilding adaptive apps, written by the gskinner team.", "You might also check out the following episodes\nof The Boring Show:", "Adaptive layouts, part 2", "For an excellent example of an adaptive app,\ncheck out Flutter Folio, a scrapbooking app created \nin collaboration with gskinner and the Flutter team:", "The Folio source code is also available on GitHub.\nLearn more on the gskinner blog.", "You can learn more about creating platform adaptive apps\nin the following resources:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/responsive", "base_url": "https://docs.flutter.dev/"}, {"title": "Add a Flutter screen to an Android app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide describes how to add a single Flutter screen to an\nexisting Android app. A Flutter screen can be added as a normal,\nopaque screen, or as a see-through, translucent screen.\nBoth options are described in this guide.", "Flutter provides FlutterActivity to display a Flutter\nexperience within an Android app. Like any other Activity,\nFlutterActivity must be registered in your\nAndroidManifest.xml. Add the following XML to your\nAndroidManifest.xml file under your application tag:", "The reference to @style/LaunchTheme can be replaced\nby any Android theme that want to apply to your FlutterActivity.\nThe choice of theme dictates the colors applied to\nAndroid\u2019s system chrome, like Android\u2019s navigation bar, and to\nthe background color of the FlutterActivity just before\nthe Flutter UI renders itself for the first time.", "With FlutterActivity registered in your manifest file,\nadd code to launch FlutterActivity from whatever point\nin your app that you\u2019d like. The following example shows\nFlutterActivity being launched from an OnClickListener.", "info Note:\nMake sure to use the following import:", "The previous example assumes that your Dart entrypoint\nis called main(), and your initial Flutter route is \u2018/\u2019.\nThe Dart entrypoint can\u2019t be changed using Intent,\nbut the initial route can be changed using Intent.\nThe following example demonstrates how to launch a\nFlutterActivity that initially renders a custom\nroute in Flutter.", "Replace \"/my_route\" with your desired initial route.", "The use of the withNewEngine() factory method\nconfigures a FlutterActivity that internally create\nits own FlutterEngine instance. This comes with a\nnon-trivial initialization time. The alternative approach\nis to instruct FlutterActivity to use a pre-warmed,\ncached FlutterEngine, which minimizes Flutter\u2019s\ninitialization time. That approach is discussed next.", "Every FlutterActivity creates its own FlutterEngine\nby default. Each FlutterEngine has a non-trivial\nwarm-up time. This means that launching a standard\nFlutterActivity comes with a brief delay before your Flutter\nexperience becomes visible. To minimize this delay,\nyou can warm up a FlutterEngine before arriving at\nyour FlutterActivity, and then you can use\nyour pre-warmed FlutterEngine instead.", "To pre-warm a FlutterEngine, find a reasonable\nlocation in your app to instantiate a FlutterEngine.\nThe following example arbitrarily pre-warms a\nFlutterEngine in the Application class:", "The ID passed to the FlutterEngineCache can be whatever you want.\nMake sure that you pass the same ID to any FlutterActivity\nor FlutterFragment that should use the cached FlutterEngine.\nUsing FlutterActivity with a cached FlutterEngine\nis discussed next.", "info Note:\n  To warm up a FlutterEngine, you must execute a Dart\n  entrypoint. Keep in mind that the moment\n  executeDartEntrypoint() is invoked,\n  your Dart entrypoint method begins executing.\n  If your Dart entrypoint invokes runApp()\n  to run a Flutter app, then your Flutter app behaves as if it\n  were running in a window of zero size until this\n  FlutterEngine is attached to a FlutterActivity,\n  FlutterFragment, or FlutterView. Make sure that your app\n  behaves appropriately between the time you warm it up and\n  the time you display Flutter content.", "With a pre-warmed, cached FlutterEngine, you now need\nto instruct your FlutterActivity to use the cached\nFlutterEngine instead of creating a new one.\nTo accomplish this, use FlutterActivity\u2019s withCachedEngine()\nbuilder:", "When using the withCachedEngine() factory method,\npass the same ID that you used when caching the desired\nFlutterEngine.", "Now, when you launch FlutterActivity,\nthere is significantly less delay in\nthe display of Flutter content.", "info Note:\n  When using a cached FlutterEngine, that FlutterEngine outlives any\n  FlutterActivity or FlutterFragment that displays it. Keep in\n  mind that Dart code begins executing as soon as you pre-warm the\n  FlutterEngine, and continues executing after the destruction of your\n  FlutterActivity/FlutterFragment. To stop executing and clear resources,\n  obtain your FlutterEngine from the FlutterEngineCache and destroy the\n  FlutterEngine with FlutterEngine.destroy().", "info Note:\n  Runtime performance isn\u2019t the only reason that you might\n  pre-warm and cache a FlutterEngine.\n  A pre-warmed FlutterEngine executes Dart code independent\n  from a FlutterActivity, which allows such a FlutterEngine\n  to be used to execute arbitrary Dart code at any moment.\n  Non-UI application logic can be executed in a FlutterEngine,\n  like networking and data caching, and in background behavior\n  within a Service or elsewhere. When using a FlutterEngine\n  to execute behavior in the background, be sure to adhere to all\n  Android restrictions on background execution.", "info Note:\n  Flutter\u2019s debug/release builds have drastically different\n  performance characteristics. To evaluate the performance\n  of Flutter, use a release build.", "The concept of an initial route is available when configuring a\nFlutterActivity or a FlutterFragment with a new FlutterEngine.\nHowever, FlutterActivity and FlutterFragment don\u2019t offer the\nconcept of an initial route when using a cached engine.\nThis is because a cached engine is expected to already be\nrunning Dart code, which means it\u2019s too late to configure the\ninitial route.", "Developers that would like their cached engine to begin\nwith a custom initial route can configure their cached\nFlutterEngine to use a custom initial route just before\nexecuting the Dart entrypoint. The following example\ndemonstrates the use of an initial route with a cached engine:", "By setting the initial route of the navigation channel, the associated\nFlutterEngine displays the desired route upon initial execution of the\nrunApp() Dart function.", "Changing the initial route property of the navigation channel\nafter the initial execution of runApp() has no effect.\nDevelopers who would like to use the same FlutterEngine\nbetween different Activitys and Fragments and switch\nthe route between those displays need to setup a method channel and\nexplicitly instruct their Dart code to change Navigator routes.", "Most full-screen Flutter experiences are opaque.\nHowever, some apps would like to deploy a Flutter\nscreen that looks like a modal, for example,\na dialog or bottom sheet. Flutter supports translucent\nFlutterActivitys out of the box.", "To make your FlutterActivity translucent,\nmake the following changes to the regular process of\ncreating and launching a FlutterActivity.", "Android requires a special theme property for Activitys that render\nwith a translucent background. Create or update an Android theme with the\nfollowing property:", "Then, apply the translucent theme to your FlutterActivity.", "Your FlutterActivity now supports translucency.\nNext, you need to launch your FlutterActivity\nwith explicit transparency support.", "To launch your FlutterActivity with a transparent background,\npass the appropriate BackgroundMode to the IntentBuilder:", "You now have a FlutterActivity with a transparent background.", "info Note:\n  Make sure that your Flutter content also includes a\n  translucent background. If your Flutter UI paints a\n  solid background color, then it still appears as\n  though your FlutterActivity has an opaque background.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android/add-flutter-screen", "base_url": "https://docs.flutter.dev/"}, {"title": "Binding to native Android code using dart:ffi | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter mobile and desktop apps can use the\ndart:ffi library to call native C APIs.\nFFI stands for foreign function interface.\nOther terms for similar functionality include\nnative interface and language bindings.", "info Note:\n  This page describes using the dart:ffi library\n  in Android apps. For information on iOS, see\n  Binding to native iOS code using dart:ffi.\n  For information in macOS, see\n  Binding to native macOS code using dart:ffi.\n  This feature is not yet supported for web plugins.", "Before your library or program can use the FFI library\nto bind to native code, you must ensure that the\nnative code is loaded and its symbols are visible to Dart.\nThis page focuses on compiling, packaging,\nand loading Android native code within a Flutter plugin or app.", "This tutorial demonstrates how to bundle C/C++\nsources in a Flutter plugin and bind to them using\nthe Dart FFI library on both Android and iOS.\nIn this walkthrough, you\u2019ll create a C function\nthat implements 32-bit addition and then\nexposes it through a Dart plugin named \u201cnative_add\u201d.", "A native library can be linked into an app either\ndynamically or statically. A statically linked library\nis embedded into the app\u2019s executable image,\nand is loaded when the app starts.", "Symbols from a statically linked library can be\nloaded using DynamicLibrary.executable or\nDynamicLibrary.process.", "A dynamically linked library, by contrast, is distributed\nin a separate file or folder within the app,\nand loaded on-demand. On Android, a dynamically\nlinked library is distributed as a set of .so (ELF)\nfiles, one for each architecture.", "A dynamically linked library can be loaded into\nDart via DynamicLibrary.open.", "API documentation is available from the Dart dev channel:\nDart API reference documentation.", "On Android, only dynamic libraries are supported\n(because the main executable is the JVM,\nwhich we don\u2019t link to statically).", "To create an FFI plugin called \u201cnative_add\u201d,\ndo the following:", "info Note:\n  You can exclude platforms from --platforms that you don\u2019t want\n  to build to. However, you need to include the platform of \n  the device you are testing on.", "This will create a plugin with C/C++ sources in native_add/src.\nThese sources are built by the native build files in the various\nos build folders.", "The FFI library can only bind against C symbols,\nso in C++ these symbols are marked extern \"C\".", "You should also add attributes to indicate that the\nsymbols are referenced from Dart,\nto prevent the linker from discarding the symbols\nduring link-time optimization.\n__attribute__((visibility(\"default\"))) __attribute__((used)).", "On Android, the native_add/android/build.gradle links the code.", "The native code is invoked from dart in lib/native_add_bindings_generated.dart.", "The bindings are generated with package:ffigen.", "To link against a platform library,\nuse the following instructions:", "Load the library using DynamicLibrary.open.\nFor example, to load OpenGL ES (v3):", "You might need to update the Android manifest\nfile of the app or plugin if indicated by\nthe documentation.", "The process for including native code in source\ncode or binary form is the same for an app or\nplugin.", "Follow the Add C and C++ code to your project\ninstructions in the Android docs to\nadd native code and support for the native\ncode toolchain (either CMake or ndk-build).", "To create a Flutter plugin that includes Dart\nsource code, but distribute the C/C++ library\nin binary form, use the following instructions:", "Android guidelines in general recommend\ndistributing native shared objects uncompressed\nbecause that actually saves on device space.\nShared objects can be directly loaded from the APK\ninstead of unpacking them on device into a\ntemporary location and then loading.\nAPKs are additionally packed in transit\u2014that\u2019s\nwhy you should be looking at download size.", "Flutter APKs by default don\u2019t follow these guidelines\nand compress libflutter.so and libapp.so\u2014this\nleads to smaller APK size but larger on device size.", "Shared objects from third parties can change this default\nsetting with android:extractNativeLibs=\"true\" in their\nAndroidManifest.xml and stop the compression of libflutter.so,\nlibapp.so, and any user-added shared objects.\nTo re-enable compression, override the setting in\nyour_app_name/android/app/src/main/AndroidManifest.xml\nin the following way.", "To learn more about C interoperability, check out these videos:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android/c-interop", "base_url": "https://docs.flutter.dev/"}, {"title": "Performance metrics | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "For a complete list of performance metrics Flutter measures per commit, visit \nthe following sites, click Query, and filter the test and \nsub_result fields:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/metrics", "base_url": "https://docs.flutter.dev/"}, {"title": "State management | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "If you are already familiar with state management in reactive apps,\nyou can skip this section, though you might want to review the\nlist of different approaches.", "As you explore Flutter,\nthere comes a time when you need to share application\nstate between screens, across your app.\nThere are many approaches you can take,\nand many questions to think about.", "In the following pages,\nyou will learn the basics of dealing with state in Flutter apps.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt/intro", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Network View | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  The network view works with all Flutter and Dart applications.", "The network view allows you to inspect HTTP, HTTPS, and web socket traffic from\nyour Dart or Flutter application.", "Network traffic should be recording by default when you open the Network page.\nIf it is not, click the Resume button in the upper left to\nbegin polling.", "Select a network request from the table (left) to view details (right). You can\ninspect general and timing information about the request, as well as the content\nof response and request headers and bodies.", "You can use the search and filter controls to find a specific request or filter\nrequests out of the request table.", "To apply a filter, press the filter button (right of the search bar). You will\nsee a filter dialog pop up:", "The filter query syntax is described in the dialog. You can filter network\nrequests by the following keys:", "Any text that is not paired with an available filter key will be queried against\nall categories (method, uri, status, type).", "HTTP and HTTPs requests are also surfaced in the Timeline as\nasynchronous timeline events. Viewing network activity in the timeline can be\nuseful if you want to see how HTTP traffic aligns with other events happening\nin your app or in the Flutter framework.", "To learn how to monitor an app\u2019s network traffic and inspect\ndifferent types of requests using the DevTools,\ncheck out a guided Network View tutorial.\nThe tutorial also uses the view to identify network activity that\ncauses poor app performance.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/network", "base_url": "https://docs.flutter.dev/"}, {"title": "What's new | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page contains current and previous announcements of\nwhat\u2019s new on the Flutter website and blog.\nFor details about what\u2019s new in the Flutter releases\nsee the release notes page.", "To stay on top of Flutter announcements including breaking changes,\njoin the flutter-announce Google group.", "For Dart, you can join the Dart Announce Google group,\nand review the Dart changelog.", "Flutter 3.13 is live! For more information,\ncheck out the Flutter 3.13 blog post.", "You might also check out \nDart 3.1 & a retrospective on functional style programming in Dart 3.", "In addition to new docs since the last release,\nwe have been incrementally releasing a revamped\nversion of the docs.flutter.dev website.\nSpecifically, we have reorganized (flattened) the \ninformation architecture (IA) and have\nincorporated some of our most popular cookbook\nrecipes into the sidenav.\nLet us know what you think!", "Docs updated or added since the 3.10 release", "The following codelab has been published since Flutter 3.10:", "The following articles were published on the Flutter Medium\npublication since Flutter 3.10:", "Things that are coming soon-ish to a stable release:", "You\u2019ve probably heard by now that Material 3 is coming.\nIt\u2019s been available on Flutter for some time now,\nby setting useMaterial3: true in your code.\nBy the next stable release in Q4,\nMaterial 3 will be enabled by default. Now would\nbe a good time to start migrating your code.\nMost all of the example code on this website\nhas been updated to use Material 3.", "For more information,\ncheck out the following resources:", "Progress continues on Impeller for Android.\nFor more information, check out the\nFlutter 3.13 blog post.", "We have been working on updating our scrolling APIs.\nThe rework will eventually result in 2D scrolling\nsupport for trees and tables, even diagonal scrolling!\nFlutter 3.13 also provides new Sliver classes for fancy scrolling.\nFor more information, check out the\nFlutter 3.13 blog post.", "Updates to the Games toolkit", "We are working on updates to the Flutter Games toolkit,\nincluding the sample code, additional docs, and a new video.\nThe Games toolkit is developed independently of the\nFlutter SDK, so stay tuned for updates as they are ready.\nFor  more information,\ncheck out the Flutter 3.13 blog post.", "Flutter 3.10 is live! This release contains many updates\nand improvements. This page lists the documentation changes,\nbut you can also check out the 3.10 blog post and the\n3.10 release notes.", "You might also check out Introducing Dart 3.", "Docs updated or added since the 3.7 release", "The following codelabs have been published since Flutter 3.7:", "The Flutter team published the following articles on the Flutter Medium\npublication since Flutter 3.7:", "Flutter 3.7 is live! This release contains many updates\nand improvements. This page lists the documentation changes,\nbut you can also check out the 3.7 blog post and the\n3.7 release notes.", "You might also check out What\u2019s next for Flutter\nand Introducing Dart 3 alpha.", "Docs updated or added since the 3.3 release", "We have new codelabs since the last stable release:", "In addition, we\u2019ve updated all of our existing\ncodelabs to support multiplatform.\nThe codelabs & workshops page is updated\nto reflect the latest available codelabs.", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 3.3 is live! For more information, see", "What\u2019s new in Flutter 3.3,\nand Dart 2.18: Objective-C & Swift interop (free articles on Medium),\nand the Flutter 3.3 release notes.", "Docs updated or added since the 3.0 release", "Flutter 3 is live!!! For more information, see\nIntroducing Flutter 3, What\u2019s new in Flutter 3,\nand Dart 2.17: Productivity and integration\n(free articles on Medium),\nand the Flutter 3 release notes.", "Docs updated or added since the 2.10 release", "We have a new codelab since the last stable release:", "Also, check out the workshops written by our GDEs\nand available on the Flutter community blog.", "Google I/O 2022 is over, but you can still check out\nthe Flutter-specific updates and talks from Google I/O\non the videos page.", "Desktop support for Microsoft Windows\n(a central feature of the 2.10 release) is live!\nFor more information, see\nAnnouncing Flutter for Windows\nand What\u2019s new in Flutter 2.10,\nfree articles on Medium.", "Flutter 2.8 is live! For details, see\nAnnouncing Flutter 2.8 and\nWhat\u2019s new in Flutter 2.8.", "Flutter 2.5 is live! For details, see\nWhat\u2019s new in Flutter 2.5.", "We\u2019ve made significant changes to flutter/website\nrepo to make it easier to use and maintain.\nIf you contribute to this repo, see the README file\nfor more information.", "Docs updated or added since the 2.2 release", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 2.2 is live! For details, see\nAnnouncing Flutter 2.2 and\nWhat\u2019s New in Flutter 2.2.", "We continue migrating code on the website to use\nnull safety, but that work is not yet completed.", "Docs updated or added since the 2.0 release", "New codelabs since the last stable release:", "For Google I/O 2021, we have added a new\nFlutter/Dart learning tool that\nis based on DartPad: Workshops!\nThese workshops are designed to be instructor led.\nThe instructor-led videos are available on the\nFlutter and Firebase YouTube channels:", "To see the event list of \u201call things Flutter\u201d at I/O,\nsee the Google 2021 I/O Flutter page.", "You can author your own DartPad workshops!\nIf you are interested, check out the following resources:", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 2 is live!!!  For more information, see\nAnnouncing Flutter 2, What\u2019s new in Flutter 2,\nFlutter web support hits the stable milestone,\nAnnouncing Dart 2.12,\nand the Flutter 2 release notes.", "Docs updated or added since the 1.22 release", "Many of our codelabs have been updated to null safety.\nWe\u2019ve also added a new codelab since the last stable release:", "For a complete list, see Flutter codelabs.", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 1.22 is live! For details, see\nAnnouncing Flutter 1.22.", "Docs updated or added to flutter.dev since the 1.20 release", "We\u2019ve added a new codelab since the last stable release:", "For a complete list, see Flutter codelabs.", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 1.20 is live! For details,\nsee Announcing Flutter 1.20.", "Docs updated or added to flutter.dev", "A deep dive into null safety has been added to dart.dev:", "Flutter Day was held on 6/25/2020.\nIn preparation for the event,\nwe wrote new codelabs and updated existing codelabs.\nNew codelabs include:", "For a complete list, see Flutter codelabs.", "We\u2019ve published the following articles on the Flutter Medium\npublication since the last stable release:", "Flutter 1.17 is live!", "For more information, see Announcing Flutter 1.17.", "Docs added and updated since the last announcement include:", "Flutter 1.12 is live!", "For more information, see\nFlutter: the first UI platform designed for ambient computing,\nAnnouncing Flutter 1.12: What a year! and\nthe Flutter 1.12.13 release notes.", "Docs added and updated since the last announcement include:", "Flutter 1.9 is live!", "For more information, see Flutter news from GDD China:\nuniting Flutter on web and mobile, and introducing Flutter 1.9\nand the 1.9.1 release notes.", "For the 1.9 release, Flutter\u2019s web support has been\nmerged (\u201cunforked\u201d) into the main repo.\nWeb support hasn\u2019t reached beta, and is not ready\nto be used in production.\nWeb and desktop support (which is also coming), will\nimpact the website, which was originally written\nexclusively for developing Flutter mobile apps.\nSome website updates are available now (and listed below),\nbut more will be coming.", "New and updated docs on the site include:", "Flutter 1.7 is live!", "For more information, see Announcing Flutter 1.7\non the Flutter Medium Publication, and the\n1.7.8 release notes.", "New and updated docs on the site include:", "The Flutter 1.7 release includes the new RangeSlider\ncomponent, which allows the user to select both the upper and lower\nendpoints in a range of values. For information about this\ncomponent and how to customize it, see\nMaterial RangeSlider in Flutter.", "Flutter 1.5 is live!", "For more information on updates, see the 1.5.4 release notes\nor download the release.", "We are updating DartPad to work with Flutter. Try our new\nBasic Flutter layout codelab and tell us what you think!", "Flutter released version 1.2 at Mobile World Congress\n(MWC) in Barcelona. For more information, see the\n1.2.1 release notes or download the release.", "In addition, here are some recent new and updated docs:", "If you have questions or comments about any of these docs,\nfile an issue.", "Welcome to the revamped Flutter website!", "We\u2019ve spent the last few months redesigning the website and how its\ninformation is organized. We hope you can more easily find the docs\nyou are looking for. Some of the changes to the website include:", "Some of the new content includes:", "If you have questions or comments about the revamped site,\nfile an issue.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/whats-new", "base_url": "https://docs.flutter.dev/"}, {"title": "Learn more | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Learn more about the Flutter framework from the following pages:", "Reach out to us at our mailing list. We\u2019d love to hear from you!", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/learn-more", "base_url": "https://docs.flutter.dev/"}, {"title": "Introduction to declarative UI | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This introduction describes the conceptual difference between the\ndeclarative style used by Flutter, and the imperative style used by\nmany other UI frameworks.", "Frameworks from Win32 to web to Android and iOS typically use an imperative\nstyle of UI programming. This might be the style you\u2019re most familiar\nwith\u2014where you manually construct a full-functioned UI entity,\nsuch as a UIView or equivalent, and later mutate it using methods and\nsetters when the UI changes.", "In order to lighten the burden on developers from having to program how to\ntransition between various UI states, Flutter, by contrast,\nlets the developer describe the current UI state and leaves the\ntransitioning to the framework.", "This, however, requires a slight shift in thinking for how to manipulate UI.", "Consider a simplified example below:", "In the imperative style, you would typically go to ViewB\u2019s owner\nand retrieve the instance b using selectors or with findViewById or similar,\nand invoke mutations on it (and implicitly invalidate it). For example:", "You might also need to replicate this configuration in the constructor of\nViewB since the source of truth for the UI might outlive instance b itself.", "In the declarative style, view configurations (such as Flutter\u2019s Widgets)\nare immutable and are only lightweight \u201cblueprints\u201d. To change the UI,\na widget triggers a rebuild on itself (most commonly by calling setState()\non StatefulWidgets in Flutter) and constructs a new Widget subtree.", "Here, rather than mutating an old instance b when the UI changes,\nFlutter constructs new Widget instances. The framework manages many of the\nresponsibilities of a traditional UI object (such as maintaining the\nstate of the layout) behind the scenes with RenderObjects.\nRenderObjects persist between frames and Flutter\u2019s lightweight Widgets\ntell the framework to mutate the RenderObjects between states.\nThe Flutter framework handles the rest.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/declarative", "base_url": "https://docs.flutter.dev/"}, {"title": "Play and pause a video | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Playing videos is a common task in app development,\nand Flutter apps are no exception. To play videos,\nthe Flutter team provides the video_player plugin.\nYou can use the video_player plugin to play videos\nstored on the file system, as an asset, or from the internet.", "report_problem Warning:\n  At this time,\n  the video_player plugin doesn\u2019t work with any desktop platform.\n  To learn more, check out the video_player package.", "On iOS, the video_player plugin makes use of\nAVPlayer to handle playback. On Android,\nit uses ExoPlayer.", "This recipe demonstrates how to use the video_player package to stream a\nvideo from the internet with basic play and pause controls using\nthe following steps:", "This recipe depends on one Flutter plugin: video_player. \nFirst, add this dependency to your project.", "To add the video_player package as a dependency, run flutter pub add:", "Next, update your android and ios configurations to ensure\nthat your app has the correct permissions to stream videos\nfrom the internet.", "Add the following permission to the AndroidManifest.xml file just after the\n<application> definition. The AndroidManifest.xml file is found at\n<project root>/android/app/src/main/AndroidManifest.xml.", "For iOS, add the following to the Info.plist file found at\n<project root>/ios/Runner/Info.plist.", "report_problem Warning:\n  The video_player plugin can only play asset videos in iOS simulators.\n  You must test network-hosted videos on physical iOS devices.", "Now that you have the video_player plugin installed with the correct\npermissions, create a VideoPlayerController. The\nVideoPlayerController class allows you to connect to different types of\nvideos and control playback.", "Before you can play videos, you must also initialize the controller.\nThis establishes the connection to the video and prepare the\ncontroller for playback.", "To create and initialize the VideoPlayerController do the following:", "Now, display the video. The video_player plugin provides the\nVideoPlayer widget to display the video initialized by\nthe VideoPlayerController.\nBy default, the VideoPlayer widget takes up as much space as possible.\nThis often isn\u2019t ideal for videos because they are meant\nto be displayed in a specific aspect ratio, such as 16x9 or 4x3.", "Therefore, wrap the VideoPlayer widget in an AspectRatio\nwidget to ensure that the video has the correct proportions.", "Furthermore, you must display the VideoPlayer widget after the\n_initializeVideoPlayerFuture() completes. Use FutureBuilder to\ndisplay a loading spinner until the controller finishes initializing.\nNote: initializing the controller does not begin playback.", "By default, the video starts in a paused state. To begin playback,\ncall the play() method provided by the VideoPlayerController.\nTo pause playback, call the pause() method.", "For this example,\nadd a FloatingActionButton to your app that displays a play\nor pause icon depending on the situation.\nWhen the user taps the button,\nplay the video if it\u2019s currently paused,\nor pause the video if it\u2019s playing.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/plugins/play-video", "base_url": "https://docs.flutter.dev/"}, {"title": "Create a staggered menu animation | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "A single app screen might contain multiple animations.\nPlaying all of the animations at the same time can be\noverwhelming. Playing the animations one after the other\ncan take too long. A better option is to stagger the animations. \nEach animation begins at a different time,\nbut the animations overlap to create a shorter duration.\nIn this recipe, you build a drawer menu with animated \ncontent that is staggered and has a button that pops\nin at the bottom.", "The following animation shows the app\u2019s behavior:", "The drawer menu displays a list of titles,\nfollowed by a Get started button at \nthe bottom of the menu.", "Define a stateful widget called Menu\nthat displays the list and button \nin static locations.", "Control of the animation timing requires an\nAnimationController.", "Add the SingleTickerProviderStateMixin\nto the MenuState class. Then, declare and\ninstantiate an AnimationController.", "The length of the delay before every animation is\nup to you. Define the animation delays,\nindividual animation durations, and the total \nanimation duration.", "In this case, all the animations are delayed by 50 ms.\nAfter that, list items begin to appear.\nEach list item\u2019s appearance is delayed by 50 ms after the \nprevious list item begins to slide in.\nEach list item takes 250 ms to slide from right to left.\nAfter the last list item begins to slide in,\nthe button at the bottom waits another 150 ms to pop in.\nThe button animation takes 500 ms.", "With each delay and animation duration defined,\nthe total duration is calculated so that it can be\nused to calculate the individual animation times.", "The desired animation times are shown in the following diagram:", "To animate a value during a subsection of a larger animation,\nFlutter provides the Interval class.\nAn Interval takes a start time percentage and an end \ntime percentage. That Interval can then be used to\nanimate a value between those start and end times,\ninstead of using the entire animation\u2019s start and \nend times. For example, given an animation that takes 1 second, \nan interval from 0.2 to 0.5 would start at 200 ms\n(20%) and end at 500 ms (50%).", "Declare and calculate each list item\u2019s Interval and the \nbottom button Interval.", "The staggered animation plays as soon as the menu becomes visible.", "Start the animation in initState().", "Each list item slides from right to left and\nfades in at the same time.", "Use the list item\u2019s Interval and an easeOut\ncurve to animate the opacity and translation\nvalues for each list item.", "Use the same approach to animate the opacity and\nscale of the bottom button. This time, use an\nelasticOut curve to give the button a springy effect.", "Congratulations!\nYou have an animated menu where the appearance of each \nlist item is staggered, followed by a bottom button that\npops into place.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/effects/staggered-menu-animation", "base_url": "https://docs.flutter.dev/"}, {"title": "Animations API overview | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The animation system in Flutter is based on typed\nAnimation objects. Widgets can either\nincorporate these animations in their build\nfunctions directly by reading their current value and listening to their\nstate changes or they can use the animations as the basis of more elaborate\nanimations that they pass along to other widgets.", "The primary building block of the animation system is the\nAnimation class. An animation represents a value\nof a specific type that can change over the lifetime of\nthe animation. Most widgets that perform an animation\nreceive an Animation object as a parameter,\nfrom which they read the current value of the animation\nand to which they listen for changes to that value.", "Whenever the animation\u2019s value changes,\nthe animation notifies all the listeners added with\naddListener. Typically, a State\nobject that listens to an animation calls\nsetState on itself in its listener callback\nto notify the widget system that it needs to\nrebuild with the new value of the animation.", "This pattern is so common that there are two widgets\nthat help widgets rebuild when animations change value:\nAnimatedWidget and AnimatedBuilder.\nThe first, AnimatedWidget, is most useful for\nstateless animated widgets. To use AnimatedWidget,\nsimply subclass it and implement the build function.\nThe second, AnimatedBuilder, is useful for more complex widgets\nthat wish to include an animation as part of a larger build function.\nTo use AnimatedBuilder, simply construct the widget\nand pass it a builder function.", "Animations also provide an AnimationStatus,\nwhich indicates how the animation will evolve over time.\nWhenever the animation\u2019s status changes,\nthe animation notifies all the listeners added with\naddStatusListener. Typically, animations start\nout in the dismissed status, which means they\u2019re\nat the beginning of their range. For example,\nanimations that progress from 0.0 to 1.0\nwill be dismissed when their value is 0.0.\nAn animation might then run forward (from 0.0 to 1.0)\nor perhaps in reverse (from 1.0 to 0.0).\nEventually, if the animation reaches the end of its range\n(1.0), the animation reaches the completed status.", "To create an animation, first create an AnimationController.\nAs well as being an animation itself, an AnimationController\nlets you control the animation. For example,\nyou can tell the controller to play the animation\nforward or stop the animation.\nYou can also fling animations,\nwhich uses a physical simulation, such as a spring,\nto drive the animation.", "Once you\u2019ve created an animation controller,\nyou can start building other animations based on it.\nFor example, you can create a ReverseAnimation\nthat mirrors the original animation but runs in the\nopposite direction (from 1.0 to 0.0).\nSimilarly, you can create a CurvedAnimation\nwhose value is adjusted by a Curve.", "To animate beyond the 0.0 to 1.0 interval, you can use a\nTween<T>, which interpolates between its\nbegin and end values. Many types have specific\nTween subclasses that provide type-specific interpolation.\nFor example, ColorTween interpolates between colors and\nRectTween interpolates between rects.\nYou can define your own interpolations by creating\nyour own subclass of Tween and overriding its\nlerp function.", "By itself, a tween just defines how to interpolate\nbetween two values. To get a concrete value for the\ncurrent frame of an animation, you also need an\nanimation to determine the current state.\nThere are two ways to combine a tween\nwith an animation to get a concrete value:", "You can evaluate the tween at the current\nvalue of an animation. This approach is most useful\nfor widgets that are already listening to the animation and hence\nrebuilding whenever the animation changes value.", "You can animate the tween based on the animation.\nRather than returning a single value, the animate function\nreturns a new Animation that incorporates the tween.\nThis approach is most useful when you want to give the\nnewly created animation to another widget,\nwhich can then read the current value that incorporates\nthe tween as well as listen for changes to the value.", "Animations are actually built from a number of core building blocks.", "The SchedulerBinding is a singleton class\nthat exposes the Flutter scheduling primitives.", "For this discussion, the key primitive is the frame callbacks.\nEach time a frame needs to be shown on the screen,\nFlutter\u2019s engine triggers a \u201cbegin frame\u201d callback that\nthe scheduler multiplexes to all the listeners registered using\nscheduleFrameCallback(). All these callbacks are\ngiven the official time stamp of the frame, in\nthe form of a Duration from some arbitrary epoch. Since all the\ncallbacks have the same time, any animations triggered from these\ncallbacks will appear to be exactly synchronised even\nif they take a few milliseconds to be executed.", "The Ticker class hooks into the scheduler\u2019s\nscheduleFrameCallback()\nmechanism to invoke a callback every tick.", "A Ticker can be started and stopped. When started,\nit returns a Future that will resolve when it is stopped.", "Each tick, the Ticker provides the callback with the\nduration since the first tick after it was started.", "Because tickers always give their elapsed time relative to the first\ntick after they were started; tickers are all synchronised. If you\nstart three tickers at different times between two ticks, they will all\nnonetheless be synchronised with the same starting time, and will\nsubsequently tick in lockstep. Like people at a bus-stop,\nall the tickers wait for a regularly occurring event\n(the tick) to begin moving (counting time).", "The Simulation abstract class maps a\nrelative time value (an elapsed time) to a\ndouble value, and has a notion of completion.", "In principle simulations are stateless but in practice\nsome simulations (for example,\nBouncingScrollSimulation and\nClampingScrollSimulation)\nchange state irreversibly when queried.", "There are various concrete implementations\nof the Simulation class for different effects.", "The Animatable abstract class maps a\ndouble to a value of a particular type.", "Animatable classes are stateless and immutable.", "The Tween<T> abstract class maps a double\nvalue nominally in the range 0.0-1.0 to a typed value\n(for example, a Color, or another double).\nIt is an Animatable.", "It has a notion of an output type (T),\na begin value and an end value of that type,\nand a way to interpolate (lerp) between the begin\nand end values for a given input value (the double nominally in\nthe range 0.0-1.0).", "Tween classes are stateless and immutable.", "Passing an Animatable<double> (the parent) to an Animatable\u2019s\nchain() method creates a new Animatable subclass that applies the\nparent\u2019s mapping then the child\u2019s mapping.", "The Curve abstract class maps doubles\nnominally in the range 0.0-1.0 to doubles\nnominally in the range 0.0-1.0.", "Curve classes are stateless and immutable.", "The Animation abstract class provides a\nvalue of a given type, a concept of animation\ndirection and animation status, and a listener interface to\nregister callbacks that get invoked when the value or status change.", "Some subclasses of Animation have values that never change\n(kAlwaysCompleteAnimation, kAlwaysDismissedAnimation,\nAlwaysStoppedAnimation); registering callbacks on\nthese has no effect as the callbacks are never called.", "The Animation<double> variant is special because it can be used to\nrepresent a double nominally in the range 0.0-1.0, which is the input\nexpected by Curve and Tween classes, as well as some further\nsubclasses of Animation.", "Some Animation subclasses are stateless,\nmerely forwarding listeners to their parents.\nSome are very stateful.", "Most Animation subclasses take an explicit \u201cparent\u201d\nAnimation<double>. They are driven by that parent.", "The CurvedAnimation subclass takes an Animation<double> class (the\nparent) and a couple of Curve classes (the forward and reverse\ncurves) as input, and uses the value of the parent as input to the\ncurves to determine its output. CurvedAnimation is immutable and\nstateless.", "The ReverseAnimation subclass takes an\nAnimation<double> class as its parent and reverses\nall the values of the animation. It assumes the parent\nis using a value nominally in the range 0.0-1.0 and returns\na value in the range 1.0-0.0. The status and direction of the parent\nanimation are also reversed. ReverseAnimation is immutable and\nstateless.", "The ProxyAnimation subclass takes an Animation<double> class as\nits parent and merely forwards the current state of that parent.\nHowever, the parent is mutable.", "The TrainHoppingAnimation subclass takes two parents,\nand switches between them when their values cross.", "The AnimationController is a stateful\nAnimation<double> that uses a Ticker to give itself life.\nIt can be started and stopped. At each tick, it takes the time\nelapsed since it was started and passes it to a Simulation to obtain\na value. That is then the value it reports. If the Simulation\nreports that at that time it has ended, then the controller stops\nitself.", "The animation controller can be given a lower and upper bound to\nanimate between, and a duration.", "In the simple case (using forward() or reverse()), the animation controller simply does a linear\ninterpolation from the lower bound to the upper bound (or vice versa,\nfor the reverse direction) over the given duration.", "When using repeat(), the animation controller uses a linear\ninterpolation between the given bounds over the given duration, but\ndoes not stop.", "When using animateTo(), the animation controller does a linear\ninterpolation over the given duration from the current value to the\ngiven target. If no duration is given to the method, the default\nduration of the controller and the range described by the controller\u2019s\nlower bound and upper bound is used to determine the velocity of the\nanimation.", "When using fling(), a Force is used to create a specific\nsimulation which is then used to drive the controller.", "When using animateWith(), the given simulation is used to drive the\ncontroller.", "These methods all return the future that the Ticker provides and\nwhich will resolve when the controller next stops or changes\nsimulation.", "Passing an Animation<double> (the new parent) to an Animatable\u2019s\nanimate() method creates a new Animation subclass that acts like\nthe Animatable but is driven from the given parent.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/animations/overview", "base_url": "https://docs.flutter.dev/"}, {"title": "Update the UI based on orientation | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In some situations,\nyou want to update the display of an app when the user\nrotates the screen from portrait mode to landscape mode. For example,\nthe app might show one item after the next in portrait mode,\nyet put those same items side-by-side in landscape mode.", "In Flutter, you can build different layouts depending\non a given Orientation.\nIn this example, build a list that displays two columns in\nportrait mode and three columns in landscape mode using the\nfollowing steps:", "First, create a list of items to work with.\nRather than using a normal list,\ncreate a list that displays items in a grid.\nFor now, create a grid with two columns.", "To learn more about working with GridViews,\nsee the Creating a grid list recipe.", "To determine the app\u2019s current Orientation, use the\nOrientationBuilder widget.\nThe OrientationBuilder calculates the current Orientation by\ncomparing the width and height available to the parent widget,\nand rebuilds when the size of the parent changes.", "Using the Orientation, build a list that displays two columns in portrait\nmode, or three columns in landscape mode.", "info Note:\n  If you\u2019re interested in the orientation of the screen,\n  rather than the amount of space available to the parent,\n  use MediaQuery.of(context).orientation instead of an\n  OrientationBuilder widget.", "In the previous section, you learned \nhow to adapt the app UI to device orientation changes.", "Flutter also allows you to specify the orientations your app supports \nusing the values of DeviceOrientation. You can either:", "In the application main() method,\ncall SystemChrome.setPreferredOrientations()\nwith the list of preferred orientations that your app supports.", "To lock the device to a single orientation, \nyou can pass a list with a single item.", "For a list of all the possible values, check out DeviceOrientation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/orientation", "base_url": "https://docs.flutter.dev/"}, {"title": "Tap, drag, and enter text | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Many widgets not only display information, but also respond\nto user interaction. This includes buttons that can be tapped,\nand TextField for entering text.", "To test these interactions, you need a way to simulate them\nin the test environment. For this purpose, use the\nWidgetTester library.", "The WidgetTester provides methods for entering text,\ntapping, and dragging.", "In many cases, user interactions update the state of the app. In the test\nenvironment, Flutter doesn\u2019t automatically rebuild widgets when the state\nchanges. To ensure that the widget tree is rebuilt after simulating a user\ninteraction, call the pump() or pumpAndSettle()\nmethods provided by the WidgetTester.\nThis recipe uses the following steps:", "For this example,\ncreate a basic todo app that tests three features:", "To keep the focus on testing,\nthis recipe won\u2019t provide a detailed guide on how to build the todo app.\nTo learn more about how this app is built,\nsee the relevant recipes:", "Now that you have a todo app, begin writing the test.\nStart by entering text into the TextField.", "Accomplish this task by:", "info Note:\n  This recipe builds upon previous widget testing recipes.\n  To learn the core concepts of widget testing,\n  see the following recipes:", "After entering text into the TextField, ensure that tapping\nthe FloatingActionButton adds the item to the list.", "This involves three steps:", "Finally, ensure that performing a swipe-to-dismiss action on the todo\nitem removes it from the list. This involves three steps:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/widget/tap-drag", "base_url": "https://docs.flutter.dev/"}, {"title": "Input & forms | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/interactivity/input", "base_url": "https://docs.flutter.dev/"}, {"title": "Plugins in Flutter tests | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  To learn how to avoid crashes from a plugin when\n  testing your Flutter app, read on.\n  To learn how to test your plugin code, check out\n  Testing plugins.", "Almost all Flutter plugins have two parts:", "In fact, the native (or host) language code distinguishes\na plugin package from a standard package.", "Building and registering the host portion of a plugin\nis part of the Flutter application build process,\nso plugins only work when your code is running\nin your application, such as with flutter run\nor when running integration tests.\nWhen running Dart unit tests or\nwidget tests, the host code isn\u2019t available.\nIf the code you are testing calls any plugins,\nthis often results in errors like the following:", "info Note:\n  Plugin implementations that only use Dart\n  will work in unit tests. This is an implementation\n  detail of the plugin, however,\n  so tests shouldn\u2019t rely on it.", "When unit testing code that uses plugins,\nthere are several options to avoid this exception.\nThe following solutions are listed in order of preference.", "In most cases, the best approach is to wrap plugin\ncalls in your own API,\nand provide a way of mocking your own API in tests.", "This has several advantages:", "If the plugin\u2019s API is already based on class instances,\nyou can mock it directly, with the following caveats:", "If the plugin is a federated plugin,\nit will include a platform interface that allows\nregistering implementations of its internal logic.\nYou can register a mock of that platform interface\nimplementation instead of the public API with the\nfollowing caveats:", "An example of when this might be necessary is\nmocking the implementation of a plugin used by\na package that you rely on,\nrather than your own code,\nso you can\u2019t change how it\u2019s called.\nHowever, if possible,\nyou should mock the dependency that uses the plugin instead.", "If the plugin uses platform channels,\nyou can mock the platform channels using\nTestDefaultBinaryMessenger.\nThis should only be used if, for some reason,\nnone of the methods above are available,\nas it has several drawbacks:", "Because of these limitations, TestDefaultBinaryMessenger\nis mainly useful in the internal tests\nof plugin implementations,\nrather than tests of code using plugins.", "You might also want to check out\nTesting plugins.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/plugins-in-tests", "base_url": "https://docs.flutter.dev/"}, {"title": "Debugging performance for web apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  Profiling Flutter web apps requires Flutter version 3.14 or later.", "The Flutter framework emits timeline events as it works to build frames,\ndraw scenes, and track other activity such as garbage collections.\nThese events are exposed in the \nChrome DevTools performance panel for debugging.", "You can also emit your own timeline events using the dart:developer\nTimeline and TimelineTask APIs for further performance analysis.", "To configure which timeline events are tracked, set any of the following top-level properties to true\nin your app\u2019s main method.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/web-performance", "base_url": "https://docs.flutter.dev/"}, {"title": "Create useful bug reports | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The instructions in this document detail the current steps\nrequired to provide the most actionable bug reports for\ncrashes and other bad behavior. Each step is optional but\nwill greatly improve how quickly issues are diagnosed and addressed.\nWe appreciate your effort in sending us as much feedback as possible.", "Create a minimal Flutter app that shows the problem you are facing,\nand paste it into the GitHub issue.", "To create it you can use flutter create bug command and update\nthe main.dart file.", "Alternatively, you can use DartPad, which is capable\nof creating and running small Flutter apps.", "If your problem goes out of what can be placed in a single file, for example\nyou have a problem with native channels, you can upload the full code of\nthe reproduction into a separate repository and link it.", "Follow these steps only if your issue is related to the\nflutter tool.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/bug-reports", "base_url": "https://docs.flutter.dev/"}, {"title": "Security | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter team takes the security of Flutter and the applications\ncreated with it seriously. This page describes how to report any\nvulnerabilities you might find, and lists best practices to minimize\nthe risk of introducing a vulnerability.", "Flutter security strategy is based on five key pillars:", "Before reporting a security vulnerability found\nby a static analysis tool,\nconsider checking our list of known false positives.", "To report a vulnerability, email security@flutter.dev\nwith a description of the issue,\nthe steps you took to create the issue,\naffected versions, and if known, mitigations for the issue.", "We should reply within three working days.", "We use GitHub\u2019s security advisory feature to track\nopen security issues. You should expect a close collaboration\nas we work to resolve the issue that you have reported.", "Please reach out to security@flutter.dev again if\nyou don\u2019t receive prompt attention and regular updates.\nYou might also reach out to the team using our public\nDiscord chat channels; however, when reporting an issue,\ne-mail security@flutter.dev.\nTo avoid revealing information about vulnerabilities\nin public that could put users at risk,\ndon\u2019t post to Discord or file a GitHub issue.", "For more details on how we handle security vulnerabilities,\nsee our security policy.", "If you believe that an existing issue is security-related,\nwe ask that you send an email to security@flutter.dev. \nThe email should include the issue ID and a short description\nof why it should be handled according to this security policy.", "We commit to publishing security updates for the version of\nFlutter currently on the stable branch.", "We treat security issues equivalent to a P0 priority level\nand release a beta or hotfix for any major security issues\nfound in the most recent stable version of our SDK.", "Any vulnerability reported for flutter websites like\ndocs.flutter.dev doesn\u2019t require a release and will be\nfixed in the website itself.", "Flutter doesn\u2019t have a bug bounty program.", "The best way to receive security updates is to subscribe to the \nflutter-announce mailing list or watch updates to the\nDiscord channel. We also announce security updates in the\ntechnical release blog post.", "Keep current with the latest Flutter SDK releases.\nWe regularly update Flutter, and these updates might fix security\ndefects discovered in previous versions. Check the Flutter\nchange log for security-related updates.", "Keep your application\u2019s dependencies up to date.\nMake sure you upgrade your package dependencies\nto keep the dependencies up to date.\nAvoid pinning to specific versions\nfor your dependencies and, if you do, make sure you check\nperiodically to see if your dependencies have had security updates,\nand update the pin accordingly.", "Keep your copy of Flutter up to date.\nPrivate, customized versions of Flutter tend\nto fall behind the current version and might not\ninclude important security fixes and enhancements.\nInstead, routinely update your copy of Flutter.\nIf you\u2019re making changes to improve Flutter,\nbe sure to update your fork and consider sharing your\nchanges with the community.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//security", "base_url": "https://docs.flutter.dev/"}, {"title": "Firebase | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Firebase is a Backend-as-a-Service (BaaS) app development platform\nthat provides hosted backend services such as a realtime database,\ncloud storage, authentication, crash reporting, machine learning,\nremote configuration, and hosting for your static files.", "Firebase supports Flutter. For more information, see:", "Also, the Flutter community has created docs and\nvideos that you might find useful. Here are a few:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/firebase", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter compatibility policy | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter team tries to balance the need for API stability with the\nneed to keep evolving APIs to fix bugs, improve API ergonomics,\nand provide new features in a coherent manner.", "To this end, we have created a test registry where you can provide\nunit tests for your own applications or libraries that we run\non every change to help us track changes that would break\nexisting applications. Our commitment is that we won\u2019t make any\nchanges that break these tests without working with the developers of\nthose tests to (a) determine if the change is sufficiently valuable,\nand (b) provide fixes for the code so that the tests continue to pass.", "If you would like to provide tests as part of this program, please\nsubmit a PR to the flutter/tests repository. \nThe README on that repository describes \nthe process in detail.", "If we do make a breaking change (defined as a change that caused one\nor more of these submitted tests to require changes), we will announce\nthe change on our flutter-announce\nmailing list as well as in our release notes.", "We provide a list of guides for migrating code affected by\nbreaking changes.", "We will, on occasion, deprecate certain APIs rather than outright\nbreak them overnight. This is independent of our compatibility policy\nwhich is exclusively based on whether submitted tests fail, as\ndescribed above.", "Deprecated APIs are removed after a migration grace period. This grace\nperiod is one calendar year after being released on the stable channel,\nor after 4 stable releases, whichever is longer.", "When a deprecation does reach end of life, we follow the same procedures\nlisted above for making breaking changes in removing the deprecated API.", "The Dart language itself has a separate breaking-change policy,\nwith announcements on Dart announce.", "In general, the Flutter team doesn\u2019t currently have any commitment\nregarding breaking changes for other dependencies.\nFor example, it\u2019s possible that a new version of\nFlutter using a new version of Skia\n(the graphics engine used by some platforms on Flutter)\nor Harfbuzz (the font shaping engine used by Flutter)\nwould have changes that affect contributed tests.\nSuch changes wouldn\u2019t necessarily be accompanied by a\nmigration guide.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/compatibility-policy", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter's fonts and typography | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Typography covers the style and appearance of\ntype or fonts: it specifies how heavy the font is,\nthe slant of the font, the spacing between\nthe letters, and other visual aspects of the text.", "All fonts are not created the same. Fonts are a huge\ntopic and beyond the scope of this site, however,\nthis page discusses Flutter\u2019s support for variable\nand static fonts.", "Variable fonts (also called OpenType fonts),\nallow you to control pre-defined aspects of text styling.\nVariable fonts support specific axes, such as width,\nweight, slant (to name a few).\nThe user can select any value along the continuous axis\nwhen specifying the type.", "However, the font must first define what axes are available,\nand that isn\u2019t always easy to figure out. If you are using\na Google Font, you can learn what axes are available using\nthe type tester feature, described in the next section.", "The Google Fonts site offers both variable and static fonts.\nUse the type tester to learn more about its variable fonts.", "In real time, move the slider on any of the axes to\nsee how it affects the font. When programming a variable font,\nuse the FontVariation class to modify the font\u2019s design axes.\nThe FontVariation class conforms to the\nOpenType font variables spec.", "Google Fonts also contains static fonts. As with variable fonts,\nyou need to know how the font is designed to know what options\nare available to you.\nOnce again, the Google Fonts site can help.", "Use the font\u2019s details page to learn more about its static fonts.", "Use the following API to programmatically alter a static font\n(but remember that this only works if the font was designed\nto support the feature):", "A FontFeature corresponds to an OpenType feature tag\nand can be thought of as a boolean flag to enable or disable\na feature of a given font.\nThe following example is for CSS, but illustrates the concept:", "The following video shows you some of the capabilities\nof Flutter\u2019s typography and combines it with the Material\nand Cupertino look and feel (depending on the platform\nthe app runs on), animation, and custom fragment shaders:", "Prototyping beautiful designs with Flutter", "To read one engineer\u2019s experience\ncustomizing variable fonts and animating them as they\nmorph (and was the basis for the above video),\ncheck out Playful typography with Flutter,\na free article on Medium. The associated example also\nuses a custom shader.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/design/text/typography", "base_url": "https://docs.flutter.dev/"}, {"title": "Display a snackbar | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "It can be useful to briefly inform your users when certain actions\ntake place. For example, when a user swipes away a message in a list,\nyou might want to inform them that the message has been deleted.\nYou might even want to give them an option to undo the action.", "In Material Design, this is the job of a SnackBar.\nThis recipe implements a snackbar using the following steps:", "When creating apps that follow the Material Design guidelines,\ngive your apps a consistent visual structure.\nIn this example, display the SnackBar at the bottom of the screen,\nwithout overlapping other important\nwidgets, such as the FloatingActionButton.", "The Scaffold widget, from the material library,\ncreates this visual structure and ensures that important\nwidgets don\u2019t overlap.", "With the Scaffold in place, display a SnackBar.\nFirst, create a SnackBar, then display it using ScaffoldMessenger.", "info Note:\n  To learn more, watch this short Widget of the Week video on the ScaffoldMessenger widget:", "You might want to provide an action to the user when\nthe SnackBar is displayed.\nFor example, if the user accidentally deletes a message,\nthey might use an optional action in the SnackBar to recover\nthe message.", "Here\u2019s an example of providing\nan additional action to the SnackBar widget:", "info Note:\n  In this example, the SnackBar displays when a user taps a button.\n  For more information on working with user input,\n  see the Gestures section of the cookbook.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/snackbars", "base_url": "https://docs.flutter.dev/"}, {"title": "macOS | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/macos", "base_url": "https://docs.flutter.dev/"}, {"title": "Install | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Select the operating system on which you are installing Flutter:", "error Important:\n  If you\u2019re in China, read Using Flutter in China.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/install", "base_url": "https://docs.flutter.dev/"}, {"title": "Start thinking declaratively | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "If you\u2019re coming to Flutter from an imperative framework\n(such as Android SDK or iOS UIKit), you need to start\nthinking about app development from a new perspective.", "Many assumptions that you might have don\u2019t apply to Flutter. For example, in\nFlutter it\u2019s okay to rebuild parts of your UI from scratch instead of modifying\nit. Flutter is fast enough to do that, even on every frame if needed.", "Flutter is declarative. This means that Flutter builds its user interface to\nreflect the current state of your app:", "When the state of your app changes\n(for example, the user flips a switch in the settings screen),\nyou change the state, and that triggers a redraw of the user interface.\nThere is no imperative changing of the UI itself\n(like widget.setText)\u2014you change the state,\nand the UI rebuilds from scratch.", "Read more about the declarative approach to UI programming\nin the get started guide.", "The declarative style of UI programming has many benefits.\nRemarkably, there is only one code path for any state of the UI.\nYou describe what the UI should look\nlike for any given state, once\u2014and that is it.", "At first,\nthis style of programming might not seem as intuitive as the\nimperative style. This is why this section is here. Read on.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt/declarative", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release a Linux app to the Snap Store | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "During a typical development cycle,\nyou test an app using flutter run at the command line,\nor by using the Run and Debug\noptions in your IDE. By default,\nFlutter builds a debug version of your app.", "When you\u2019re ready to prepare a release version of your app,\nfor example to publish to the Snap Store,\nthis page can help.", "To build and publish to the Snap Store, you need the\nfollowing components:", "Use the following instructions to set up your build environment.", "At the command line, run the following:", "To install LXD, use the following command:", "LXD is required during the snap build process. Once installed, LXD needs to be\nconfigured for use. The default answers are suitable for most use cases.", "On the first run, LXD might not be able to connect to its socket:", "This means you need to add your user name to the LXD\n(lxd) group, so log out of your session and then log back in:", "The snapcraft tool builds snaps based on the instructions\nlisted in a snapcraft.yaml file.\nTo get a basic understanding of snapcraft and its\ncore concepts, take a look at the Snap documentation\nand the Introduction to snapcraft.\nAdditional links and information are listed at the\nbottom of this page.", "Place the YAML file in your Flutter\nproject under <project root>/snap/snapcraft.yaml.\n(And remember that YAML files are sensitive to white space!)\nFor example:", "The following sections explain the various pieces of the YAML file.", "This section of the snapcraft.yaml file defines and\ndescribes the application. The snap version is\nderived (adopted) from the build section.", "This section defines how the snap is built.", "This section defines the application(s) that exist inside the snap.\nThere can be one or more applications per snap. This example\nhas a single application\u2014super_cool_app.", "When a providing snap is installed, snapd will \ngenerate security policy that will allow it to \nlisten on the well-known DBus name on the specified \nbus. If the system bus is specified, snapd will also \ngenerate DBus bus policy that allows \u2018root\u2019 to own \nthe name and any user to communicate with the \nservice. Non-snap processes are allowed to \ncommunicate with the providing snap following \ntraditional permissions checks. Other (consuming) \nsnaps might only communicate with the providing \nsnap by connecting the snaps\u2019 interface.", "This section defines the sources required to\nassemble the snap.", "Parts can be downloaded and built automatically using plugins.\nSimilar to extensions, snapcraft can use various plugins\n(like Python, C, Java, Ruby, etc) to assist in the\nbuilding process. Snapcraft also has some special plugins.", "Desktop entry files are used to add an application \nto the desktop menu. These files specify the name and \nicon of your application, the categories it belongs to,\nrelated search keywords and more. These files have the \nextension .desktop and follow the XDG Desktop Entry \nSpecification version 1.1.", "Place the .desktop file in your Flutter project \nunder <project root>/snap/gui/super-cool-app.desktop.", "Notice: icon and .desktop file name must be the same as your app name in\nyaml file!", "Place your icon with .png extension in your Flutter \nproject under <project root>/snap/gui/super-cool-app.png.", "Once the snapcraft.yaml file is complete,\nrun snapcraft as follows from the root directory\nof the project.", "To use the Multipass VM backend:", "To use the LXD container backend:", "Once the snap is built, you\u2019ll have a <name>.snap file\nin your root project directory.", "$ sudo snap install ./super-cool-app_0.1.0_amd64.snap \u2013dangerous", "You can now publish the snap.\nThe process consists of the following:", "The Snap Store uses channels to differentiate among\ndifferent versions of snaps.", "The snapcraft upload command uploads the snap file to\nthe store. However, before you run this command,\nyou need to learn about the different release channels.\nEach channel consists of three components:", "The Snap Store runs several automated checks against\nyour snap. There might also be a manual review,\ndepending on how the snap was built, and if there are\nany specific security concerns. If the checks pass\nwithout errors, the snap becomes available in the store.", "You can learn more from the following links on the\nsnapcraft.io site:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/linux", "base_url": "https://docs.flutter.dev/"}, {"title": "Debugging Flutter apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "There\u2019s a wide variety of tools and features to help debug\nFlutter applications. Here are some of the available tools:", "For debugging and profiling apps, DevTools might be\nthe first tool you reach for. DevTools runs in a\nbrowser and supports a variety of features:", "If you run your application in debug mode or\nprofile mode, while it\u2019s running you can open\nDevTools in the browser to connect to your app.\nDevTools doesn\u2019t work well with an app compiled to\nrelease mode, as the debugging and profiling\ninformation has been stripped away.", "If you use DevTools for profiling, make sure to\nrun your application in profile mode. Otherwise,\nthe main output that appears on your profile are the\ndebug asserts verifying the framework\u2019s various invariants\n(see Debug mode assertions).", "For more information, see the\nDevTools documentation.", "You can set breakpoints directly in your IDE/editor\n(such as Android Studio/IntelliJ and VS Code),\nin the DevTools debugger,\nor programmatically.", "If you\u2019re using a Flutter enabled IDE/editor,\nthe Dart analyzer is already checking your code\nand looking for possible mistakes.", "If you run from the command line,\ntest your code with flutter analyze.", "The Dart analyzer makes heavy use of type annotations that\nyou put in your code to help track problems down.\nYou are encouraged to use them everywhere (avoiding var,\nuntyped arguments, untyped list literals, and so on)\nas this is the quickest and least painful way of tracking\ndown problems.", "For more information, see Using the Dart analyzer.", "Another useful debugging tool is logging.\nYou set logging up programmatically\nthen view the output in the DevTools\nlogging view, or in the console.", "Flutter was designed with a layered architecture that includes\nwidget, rendering, and painting layers. For links to more\ninformation and videos, see The Framework architecture on the\nGitHub wiki, and the community article, The Layer Cake.", "The Flutter widget inspector provides a visual representation\nof the widget tree, but if you want a greater level of detail,\nor you want a verbose text-based dump of the widget,\nlayer, or render trees, see\nDebug flags: application layers\nin the Debugging Flutter apps programmatically page.", "During development, you are highly encouraged to use Flutter\u2019s\ndebug mode. This is the default if you use bug icon in\nAndroid Studio, or flutter run at the command line.\nSome tools support assert statements through the\ncommand-line flag --enable-asserts.", "In this mode, Dart assert statements are enabled,\nand the Flutter framework evaluates the argument\nto each assert statement encountered during execution,\nthrowing an exception if the result is false.\nThis allows developers to enable or disable invariant\nchecking, such that the associated performance cost\nis only paid during debugging sessions.", "When an invariant is violated, it\u2019s reported to the\nconsole, with some context information to help track\ndown the source of the problem.", "For more information, check out Assert in the\nDart language documentation.", "The easiest way to debug animations is to slow them down.\nThe Flutter inspector provides a Slow Animations button,\nor you can slow the animations programmatically.", "For more information on debugging janky (non-smooth)\napplications, see Flutter performance profiling.", "To gather detailed information about the time it takes for your\nFlutter app to start, you can run the flutter run command\nwith the trace-startup and profile options.", "The trace output is saved as a JSON file called start_up_info.json\nunder the build directory of your Flutter project.\nThe output lists the elapsed time from app startup to these trace\nevents (captured in microseconds):", "To perform a performance trace,\nyou can use the DevTools Timeline view.\nThe Timeline view also supports importing\nand exporting trace files. For more\ninformation, see the Timeline view docs.", "You can also\nperform traces programmatically,\nthough these traces can\u2019t be imported\ninto DevTool\u2019s Timeline view.", "Be sure to use run your app in profile mode\nbefore tracing to ensure that the runtime performance\ncharacteristics closely matches that of your final product.", "To get a graphical view of the performance of your application,\nturn on the performance overlay. You can do this in the\nby clicking the Performance Overlay button in the\nFlutter inspector.", "You can also turn on the overlay programmatically.", "For information on how to interpret the graphs in the overlay,\nsee The performance overlay in\nthe Flutter performance profiling guide.", "In most cases, you won\u2019t need to use the debug flags\ndirectly, as you\u2019ll find the most useful debugging\nfunctionality in the DevTools suite. But if you\nprefer to use the debug flags directly, see\nDebug flags: performance in the\nDebugging Flutter apps programmatically page.", "The following is a problem that some have encountered on MacOS.", "The default limit for Mac OS on how many files it can have open at a\ntime is rather low.  If you run into this limit,\nincrease the number of available\nfile handlers using the ulimit command:", "If you use Travis or Cirrus for testing, increase the number of\navailable file handlers that they can open by adding the same line to\nflutter/.travis.yml, or flutter/.cirrus.yml, respectively.", "In debug mode, you might find that two const widgets that should to all\nappearances be equal (because of Dart\u2019s constant deduplication) are not.", "For example, this code should print 1:", "It should print 1 (rather than 2) because the two constants are the same and sets\ncoalesce duplicate values (and indeed the analyzer complains that\n\u201cTwo elements in a set literal shouldn\u2019t be equal\u201d). As expected, in release\nbuilds, it does print 1. However, in debug builds it prints 2. This is because the\nflutter tool injects the source location of Widget constructors into the code at compile\ntime, so the code is effectively:", "This results in the instances being different, and so they are not deduplicated by the set.\nWe use this injected information to make the error messages clearer when\na widget is involved in an exception, by reporting where the relevant widget was created.\nUnfortunately, it has the visible side-effect of making otherwise-identical constants be\ndifferent at compile time.", "To disable this behavior, pass --no-track-widget-creation to the flutter run command.\nWith that flag set, the code above prints \u201c1\u201d in debug and release builds, and error messages\ninclude a message saying that they cannot provide all the information that they would otherwise\nbe able to provide if widget creation tracking was enabled.", "You might find the following docs useful:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/debugging", "base_url": "https://docs.flutter.dev/"}, {"title": "Casual Games Toolkit | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Flutter Casual Games Toolkit, announced at Google I/O 2022,\npulls together new and existing resources that enable you to\nspeed up development of casual games on mobile.", "This page outlines what resources are available and\nwhere you can find them.", "For instructions on how to use the game template, please review the game template readme.", "In the beginning, four engineers had a vision of\ndeveloping a framework for creating performant mobile apps\nwritten as a single application.\nWhat later became Flutter has grown in many ways,\nbut has always focused on writing apps.", "Games fall into roughly two categories: video games\nand app-like games. You are likely familiar with both\ntypes of games, though you might not have thought\nabout them in quite this way.", "Video games include arcade-style games: shooters,\nracing games, and so on.\nVideo games are generally action-based and use a\ncontinual input device, like a joystick.", "App-like games include casual games such as board games,\ncard games, puzzles, and strategy games.\nApp-like games tend to respond to user input,\nlike tapping on a card or entering a number or letter.", "Because these games are app-like, they are\nespecially well suited for Flutter.", "When we say casual games, we are primarily\nreferring to app-like games in this context.", "The Casual Games Toolkit provides the following free resources:", "The game template is opinionated (it pretty\nmuch has to be), so it uses specific packages,\nlike provider, google_mobile_ads, in_app_purchase,\naudioplayers, crashlytics, and games_services.\nFeel free to change the code\nto use other packages, if you prefer.", "And, yes, the game template assumes that you\u2019ll\nwant to earn money for your mobile game,\nso the ads and in-app purchase packages are already\nintegrated with the template and ready to be configured.", "As explained on the Games page,\nyou can also take advantage of up to $900\nin offers when you integrate Google services,\nsuch as Cloud, Firebase, and Ads,\ninto your game.\n(Terms and conditions apply: You must connect your\nFirebase and GCP accounts to use credits for\nFirebase services and verify your business\nemail during sign up to earn an additional $100\non top of the normal $300 credit. For the Ads offer,\ncheck your region\u2019s eligibility).", "Are you ready? To get started:", "Perhaps you want to write a video-style game?\nThe game template is still valuable for\nthe high-level structure of such games.", "For video games, you might want to look into the\nFlame package,\njoin the Flame community on Discord,\nand play with the Flame demo app on DartPad.\nYou might also check out the Flutter + Flame codelab.", "In fact, the people at Very Good Ventures wrote a\nPinball game for Google I/O 2022\nusing the Flame engine. For more information, check out\nI/O Pinball Powered by Flutter and Firebase,\na free article on Medium and play the game.", "Once you feel ready to go beyond the games template,\nyou might want to investigate other resources\nrecommended by the community.\nBolded items in the following table are used in the games template:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/games-toolkit", "base_url": "https://docs.flutter.dev/"}, {"title": "Building adaptive apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter provides new opportunities to build apps that can\nrun on mobile, desktop, and the web from a single codebase.\nHowever, with these opportunities, come new challenges.\nYou want your app to feel familiar to users,\nadapting to each platform by maximizing usability and\nensuring a comfortable and seamless experience.\nThat is, you need to build apps that are not just\nmultiplatform, but are fully platform adaptive.", "There are many considerations for developing platform-adaptive\napps, but they fall into three major categories:", "This page covers all three categories in detail\nusing code snippets to illustrate the concepts.\nIf you\u2019d like to see how these concepts come together,\ncheck out the Flokk and Folio examples that\nwere built using the concepts described here.", "Original demo code for adaptive app development techniques from flutter-adaptive-demo.", "One of the first things you must consider when writing\nyour app for multiple platforms is how to adapt\nit to the various sizes and shapes of the screens that\nit will run on.", "If you\u2019ve been building apps or websites,\nyou\u2019re probably familiar with creating responsive interfaces.\nLuckily for Flutter developers,\nthere are a large set of widgets to make this easier.", "Some of Flutter\u2019s most useful layout widgets include:", "Align\u2014Aligns a child within itself.\nIt takes a double value between -1 and 1,\nfor both the vertical and horizontal alignment.", "AspectRatio\u2014Attempts to size the\nchild to a specific aspect ratio.", "ConstrainedBox\u2014Imposes size constraints on its child,\noffering control over the minimum or maximum size.", "CustomSingleChildLayout\u2014Uses a delegate function\nto position a single child. The delegate can determine\nthe layout constraints and positioning for the child.", "Expanded and Flexible\u2014Allows a child of a\nRow or Column to shrink or grow to fill any available space.", "FractionallySizedBox\u2014Sizes its child to a fraction\nof the available space.", "LayoutBuilder\u2014Builds a widget that can reflow\nitself based on its parents size.", "SingleChildScrollView\u2014Adds scrolling to a single child.\nOften used with a Row or Column.", "Column, Row, and Flex\u2014Lays out children\nin a single horizontal or vertical run.\nBoth Column and Row extend the Flex widget.", "CustomMultiChildLayout\u2014Uses a delegate function to\nposition multiple children during the layout phase.", "Flow\u2014Similar to CustomMultiChildLayout,\nbut more efficient because it\u2019s performed during the\npaint phase rather than the layout phase.", "ListView, GridView, and\nCustomScrollView\u2014Provides scrollable\nlists of children.", "Stack\u2014Layers and positions multiple children\nrelative to the edges of the Stack.\nFunctions similarly to position-fixed in CSS.", "Table\u2014Uses a classic table layout algorithm for\nits children, combining multiple rows and columns.", "Wrap\u2014Displays its children in multiple horizontal\nor vertical runs.", "To see more available widgets and example code, see\nLayout widgets.", "Different input devices offer various levels of precision,\nwhich necessitate differently sized hit areas.\nFlutter\u2019s VisualDensity class makes it easy to adjust the\ndensity of your views across the entire application,\nfor example, by making a button larger\n(and therefore easier to tap) on a touch device.", "When you change the VisualDensity for your MaterialApp,\nMaterialComponents that support it animate their densities\nto match. By default, both horizontal and vertical densities\nare set to 0.0, but you can set the densities to any negative\nor positive value that you want. By switching between different\ndensities, you can easily adjust your UI:", "To set a custom visual density, inject the density into\nyour MaterialApp theme:", "To use VisualDensity inside your own views,\nyou can look it up:", "Not only does the container react automatically to changes\nin density, it also animates when it changes.\nThis ties together your custom components,\nalong with the built-in components,\nfor a smooth transition effect across the app.", "As shown, VisualDensity is unit-less,\nso it can mean different things to different views.\nIn this example, 1 density unit equals 6 pixels,\nbut this is totally up to your views to decide.\nThe fact that it is unit-less makes it quite versatile,\nand it should work in most contexts.", "It\u2019s worth noting that the Material Components generally\nuse a value of around 4 logical pixels for each\nvisual density unit. For more information about the\nsupported components, see VisualDensity API.\nFor more information about density principles in general,\nsee the Material Design guide.", "If you need more than density changes and can\u2019t find a\nwidget that does what you need, you can take a more\nprocedural approach to adjust parameters, calculate sizes,\nswap widgets, or completely restructure your UI to suit\na particular form factor.", "The simplest form of procedural layouts uses\nscreen-based breakpoints. In Flutter,\nthis can be done with the MediaQuery API.\nThere are no hard and fast rules for the sizes to use\nhere, but these are general values:", "Using breakpoints, you can set up a simple system\nto determine the device type:", "As an alternative, you could abstract it more\nand define it in terms of small to large:", "Screen-based breakpoints are best used for making\ntop-level decisions in your app. Changing things like\nvisual density, paddings, or font-sizes are best when\ndefined on a global basis.", "You can also use screen-based breakpoints to reflow your\ntop-level widget trees. For example, you could switch\nfrom a vertical to a horizontal layout when the user isn\u2019t on a handset:", "In another widget,\nyou might swap some of the children completely:", "Even though checking total screen size is great for\nfull-screen pages or making global layout decisions,\nit\u2019s often not ideal for nested subviews.\nOften, subviews have their own internal breakpoints\nand care only about the space that they have available to render.", "The simplest way to handle this in Flutter is using the\nLayoutBuilder class. LayoutBuilder allows a\nwidget to respond to incoming local size constraints,\nwhich can make the widget more versatile than if it\ndepended on a global value.", "The previous example could be rewritten using LayoutBuilder:", "This widget can now be composed within a side panel,\ndialog, or even a full-screen view,\nand adapt its layout to whatever space is provided.", "There are times when you want to make layout decisions\nbased on the actual platform you\u2019re running on,\nregardless of size. For example, when building a\ncustom title bar, you might need to check the operating\nsystem type and tweak the layout of your title bar, so\nit doesn\u2019t get covered by the native window buttons.", "To determine which combination of platforms you\u2019re on,\nyou can use the Platform API along with the kIsWeb value:", "The Platform API can\u2019t be accessed from web builds without \nthrowing an exception, because the dart.io package isn\u2019t\nsupported on the web target. As a result, this code checks \nfor web first, and because of short-circuiting,\nDart never calls Platform on web targets.", "You\u2019ll probably find it easier to maintain your views\nif you create a single source of truth for styling values\nlike padding, spacing, corner shape, font sizes, and so on.\nThis can be done easily with some helper classes:", "These constants can then be used in place of hard-coded numeric values:", "With all views referencing the same shared-design system rules,\nthey tend to look better and more consistent.\nMaking a change or adjusting a value for a specific platform\ncan be done in a single place, instead of using an error-prone\nsearch and replace. Using shared rules has the added benefit\nof helping enforce consistency on the design side.", "Some common design system categories that can be represented\nthis way are:", "Like most rules, there are exceptions:\none-off values that are used nowhere else in the app.\nThere is little point in cluttering up the styling rules\nwith these values, but it\u2019s worth considering if they\nshould be derived from an existing value (for example,\npadding + 1.0). You should also watch for reuse or duplication\nof the same semantic values. Those values should likely be\nadded to the global styling ruleset.", "Beyond screen size, you should also spend time\nconsidering the unique strengths and weaknesses\nof different form factors. It isn\u2019t always ideal\nfor your multiplatform app to offer identical\nfunctionality everywhere. Consider whether it makes\nsense to focus on specific capabilities,\nor even remove certain features, on some device categories.", "For example, mobile devices are portable and have cameras,\nbut they aren\u2019t well suited for detailed creative work.\nWith this in mind, you might focus more on capturing content\nand tagging it with location data for a mobile UI,\nbut focus on organizing or manipulating that content\nfor a tablet or desktop UI.", "Another example is leveraging the web\u2019s extremely low barrier\nfor sharing. If you\u2019re deploying a web app,\ndecide which deep links to support,\nand design your navigation routes with those in mind.", "The key takeaway here is to think about what each\nplatform does best and see if there are unique capabilities\nyou can leverage.", "One of the most effective ways to test adaptive\ninterfaces is to take advantage of the desktop build targets.", "When running on a desktop, you can easily resize the window\nwhile the app is running to preview various screen sizes.\nThis, combined with hot reload, can greatly accelerate the\ndevelopment of a responsive UI.", "Building a great touch UI can often be more difficult\nthan a traditional desktop UI due, in part,\nto the lack of input accelerators like right-click,\nscroll wheel, or keyboard shortcuts.", "One way to approach this challenge is to focus initially\non a great touch-oriented UI. You can still do most of\nyour testing using the desktop target for its iteration speed.\nBut, remember to switch frequently to a mobile device to\nverify that everything feels right.", "After you have the touch interface polished, you can tweak\nthe visual density for mouse users, and then layer on all\nthe additional inputs. Approach these other inputs as\naccelerator\u2014alternatives that make a task faster.\nThe important thing to consider is what a user expects\nwhen using a particular input device,\nand work to reflect that in your app.", "Of course, it isn\u2019t enough to just adapt how your app looks,\nyou also have to support varying user inputs.\nThe mouse and keyboard introduce input types beyond those\nfound on a touch device\u2014like scroll wheel, right-click,\nhover interactions, tab traversal, and keyboard shortcuts.", "Scrolling widgets like ScrollView or ListView\nsupport the scroll wheel by default, and because\nalmost every scrollable custom widget is built\nusing one of these, it works with them as well.", "If you need to implement custom scroll behavior,\nyou can use the Listener widget, which lets you\ncustomize how your UI reacts to the scroll wheel.", "Users with physical keyboards expect that they can use\nthe tab key to quickly navigate your application,\nand users with motor or vision differences often rely\ncompletely on keyboard navigation.", "There are two considerations for tab interactions:\nhow focus moves from widget to widget, known as traversal,\nand the visual highlight shown when a widget is focused.", "Most built-in components, like buttons and text fields,\nsupport traversal and highlights by default.\nIf you have your own widget that you want included in\ntraversal, you can use the FocusableActionDetector widget\nto create your own controls. It combines the functionality\nof Actions, Shortcuts, MouseRegion, and\nFocus widgets to create a detector that defines actions\nand key bindings, and provides callbacks for handling focus\nand hover highlights.", "To get more control over the order that\nwidgets are focused on when the user presses tab,\nyou can use FocusTraversalGroup to define sections\nof the tree that should be treated as a group when tabbing.", "For example, you might to tab through all the fields in\na form before tabbing to the submit button:", "Flutter has several built-in ways to traverse widgets and groups,\ndefaulting to the ReadingOrderTraversalPolicy class.\nThis class usually works well, but it\u2019s possible to modify this\nusing another predefined TraversalPolicy class or by creating\na custom policy.", "In addition to tab traversal, desktop and web users are accustomed\nto having various keyboard shortcuts bound to specific actions.\nWhether it\u2019s the Delete key for quick deletions or\nControl+N for a new document, be sure to consider the different\naccelerators your users expect. The keyboard is a powerful\ninput tool, so try to squeeze as much efficiency from it as you can.\nYour users will appreciate it!", "Keyboard accelerators can be accomplished in a few ways in Flutter\ndepending on your goals.", "If you have a single widget like a TextField or a Button that\nalready has a focus node, you can wrap it in a\nRawKeyboardListener and listen for keyboard events:", "If you\u2019d like to apply a set of keyboard shortcuts to a\nlarge section of the tree, you can use the Shortcuts widget:", "The Shortcuts widget is useful because it only\nallows shortcuts to be fired when this widget tree\nor one of its children has focus and is visible.", "The final option is a global listener. This listener\ncan be used for always-on, app-wide shortcuts or for\npanels that can accept shortcuts whenever they\u2019re visible\n(regardless of their focus state). Adding global listeners\nis easy with RawKeyboard:", "To check key combinations with the global listener,\nyou can use the RawKeyboard.instance.keysPressed map.\nFor example, a method like the following can check whether any\nof the provided keys are being held down:", "Putting these two things together,\nyou can fire an action when Shift+N is pressed:", "One note of caution when using the static listener,\nis that you often need to disable it when the user\nis typing in a field or when the widget it\u2019s associated with\nis hidden from view.\nUnlike with Shortcuts or RawKeyboardListener,\nthis is your responsibility to manage. This can be especially\nimportant when you\u2019re binding a Delete/Backspace accelerator for\nDelete, but then have child TextFields that the user\nmight be typing in.", "On desktop, it\u2019s common to change the mouse cursor\nto indicate the functionality about the content the\nmouse is hovering over. For example, you usually see\na hand cursor when you hover over a button,\nor an I cursor when you hover over text.", "The Material Component set has built-in support\nfor your standard button and text cursors.\nTo change the cursor from within your own widgets,\nuse MouseRegion:", "MouseRegion is also useful for creating custom\nrollover and hover effects:", "The final area to consider for adaptive apps is platform standards.\nEach platform has its own idioms and norms;\nthese nominal or de facto standards inform user expectations\nof how an application should behave. Thanks, in part to the web,\nusers are accustomed to more customized experiences,\nbut reflecting these platform standards can still provide\nsignificant benefits:", "Reduce cognitive load\u2014By matching the user\u2019s\nexisting mental model, accomplishing tasks becomes intuitive,\nwhich requires less thinking,\nboosts productivity, and reduces frustrations.", "Build trust\u2014Users can become wary or suspicious\nwhen applications don\u2019t adhere to their expectations.\nConversely, a UI that feels familiar can build user trust\nand can help improve the perception of quality.\nThis often has the added benefit of better app store\nratings\u2014something we can all appreciate!", "The first step is to spend some time considering what\nthe expected appearance, presentation, or behavior is on this platform.\nTry to forget any limitations of your current implementation,\nand just envision the ideal user experience.\nWork backwards from there.", "Another way to think about this is to ask,\n\u201cHow would a user of this platform expect to achieve this goal?\u201d\nThen, try to envision how that would work in your app\nwithout any compromises.", "This can be difficult if you aren\u2019t a regular user of the platform.\nYou might be unaware of the specific idioms and can easily miss\nthem completely. For example, a lifetime Android user is\nlikely unaware of platform conventions on iOS,\nand the same holds true for macOS, Linux, and Windows.\nThese differences might be subtle to you,\nbut be painfully obvious to an experienced user.", "If possible, assign someone as an advocate for each platform.\nIdeally, your advocate uses the platform as their primary device,\nand can offer the perspective of a highly opinionated user.\nTo reduce the number of people, combine roles.\nHave one advocate for Windows and Android,\none for Linux and the web, and one for Mac and iOS.", "The goal is to have constant, informed feedback so the app\nfeels great on each platform. Advocates should be encouraged\nto be quite picky, calling out anything they feel differs from\ntypical applications on their device. A simple example is how\nthe default button in a dialog is typically on the left on Mac\nand Linux, but is on the right on Windows.\nDetails like that are easy to miss if you aren\u2019t using a platform\non a regular basis.", "Important: Advocates don\u2019t need to be developers or\n  even full-time team members. They can be designers,\n  stakeholders, or external testers that are provided\n  with regular builds.", "Conforming to expected behaviors doesn\u2019t mean that your app\nneeds to use default components or styling.\nMany of the most popular multiplatform apps have very distinct\nand opinionated UIs including custom buttons, context menus,\nand title bars.", "The more you can consolidate styling and behavior across platforms,\nthe easier development and testing will be. \nThe trick is to balance creating a unique experience with a\nstrong identity, while respecting the norms of each platform.", "Take a quick look at a few specific norms and idioms\nyou might want to consider, and how you could approach\nthem in Flutter.", "Desktop and mobile users expect scrollbars,\nbut they expect them to behave differently on different platforms.\nMobile users expect smaller scrollbars that only appear\nwhile scrolling, whereas desktop users generally expect\nomnipresent, larger scrollbars that they can click or drag.", "Flutter comes with a built-in Scrollbar widget that already\nhas support for adaptive colors and sizes according to the\ncurrent platform. The one tweak you might want to make is to\ntoggle alwaysShown when on a desktop platform:", "This subtle attention to detail can make your app feel more\ncomfortable on a given platform.", "Dealing with multi-select within a list is another area\nwith subtle differences across platforms:", "To perform a platform-aware check for control or command,\nyou can write something like this:", "A final consideration for keyboard users is the Select All action.\nIf you have a large list of items of selectable items,\nmany of your keyboard users will expect that they can use\nControl+A to select all the items.", "On touch devices, multi-selection is typically simplified,\nwith the expected behavior being similar to having the\nisMultiSelectModifier down on the desktop.\nYou can select or deselect items using a single tap,\nand will usually have a button to Select All or\nClear the current selection.", "How you handle multi-selection on different devices depends\non your specific use cases, but the important thing is to\nmake sure that you\u2019re offering each platform the best\ninteraction model possible.", "A common expectation on the web (and to a lesser extent desktop)\nis that most visible text can be selected with the mouse cursor.\nWhen text is not selectable,\nusers on the web tend to have an adverse reaction.", "Luckily, this is easy to support with the SelectableText widget:", "To support rich text, then use TextSpan:", "On modern desktop applications, it\u2019s common to customize\nthe title bar of your app window, adding a logo for\nstronger branding or contextual controls to help save\nvertical space in your main UI.", "This isn\u2019t supported directly in Flutter, but you can use the\nbits_dojo package to disable the native title bars,\nand replace them with your own.", "This package lets you add whatever widgets you want to the\nTitleBar because it uses pure Flutter widgets under the hood.\nThis makes it easy to adapt the title bar as you navigate\nto different sections of the app.", "On desktop, there are several interactions that\nmanifest as a widget shown in an overlay,\nbut with differences in how they\u2019re triggered, dismissed,\nand positioned:", "Context menu\u2014Typically triggered by a right-click,\na context menu is positioned close to the mouse,\nand is dismissed by clicking anywhere,\nselecting an option from the menu, or clicking outside it.", "Tooltip\u2014Typically triggered by hovering for\n200-400ms over an interactive element,\na tooltip is usually anchored to a widget\n(as opposed to the mouse position) and is dismissed\nwhen the mouse cursor leaves that widget.", "Popup panel (also known as flyout)\u2014Similar to a tooltip,\na popup panel is usually anchored to a widget.\nThe main difference is that panels are most often\nshown on a tap event, and they usually don\u2019t hide\nthemselves when the cursor leaves.\nInstead, panels are typically dismissed by clicking\noutside the panel or by pressing a Close or Submit button.", "To show basic tooltips in Flutter,\nuse the built-in Tooltip widget:", "Flutter also provides built-in context menus when editing\nor selecting text.", "To show more advanced tooltips, popup panels,\nor create custom context menus,\nyou either use one of the available packages,\nor build it yourself using a Stack or Overlay.", "Some available packages include:", "While these controls can be valuable for touch users as accelerators,\nthey are essential for mouse users. These users expect\nto right-click things, edit content in place,\nand hover for more information. Failing to meet those expectations\ncan lead to disappointed users, or at least,\na feeling that something isn\u2019t quite right.", "On Windows, when presenting a row of buttons,\nthe confirmation button is placed at the start of\nthe row (left side). On all other platforms,\nit\u2019s the opposite. The confirmation button is\nplaced at the end of the row (right side).", "This can be easily handled in Flutter using the\nTextDirection property on Row:", "Another common pattern on desktop apps is the menu bar.\nOn Windows and Linux, this menu lives as part of the Chrome title bar,\nwhereas on macOS, it\u2019s located along the top of the primary screen.", "Currently, you can specify custom menu bar entries using\na prototype plugin, but it\u2019s expected that this functionality will\neventually be integrated into the main SDK.", "It\u2019s worth mentioning that on Windows and Linux,\nyou can\u2019t combine a custom title bar with a menu bar.\nWhen you create a custom title bar,\nyou\u2019re replacing the native one completely,\nwhich means you also lose the integrated native menu bar.", "If you need both a custom title bar and a menu bar,\nyou can achieve that by implementing it in Flutter,\nsimilar to a custom context menu.", "One of the core interactions for both touch-based and\npointer-based inputs is drag and drop. Although this\ninteraction is expected for both types of input,\nthere are important differences to think about when\nit comes to scrolling lists of draggable items.", "Generally speaking, touch users expect to see drag handles\nto differentiate draggable areas from scrollable ones,\nor alternatively, to initiate a drag by using a long\npress gesture. This is because scrolling and dragging\nare both sharing a single finger for input.", "Mouse users have more input options. They can use a wheel\nor scrollbar to scroll, which generally eliminates the need\nfor dedicated drag handles. If you look at the macOS\nFinder or Windows Explorer, you\u2019ll see that they work\nthis way: you just select an item and start dragging.", "In Flutter, you can implement drag and drop in many\nways. Discussing specific implementations is outside\nthe scope of this article, but some high level options\nare:", "Use the Draggable and DragTarget APIs\ndirectly for a custom look and feel.", "Hook into onPan gesture events,\nand move an object yourself within a parent Stack.", "Use one of the pre-made list packages on pub.dev.", "Of course, this page doesn\u2019t constitute an exhaustive list\nof the things you might consider. The more operating systems,\nform factors, and input devices you support,\nthe more difficult it becomes to spec out every permutation in design.", "Taking time to learn basic usability principles as a\ndeveloper empowers you to make better decisions,\nreduces back-and-forth iterations with design during production,\nand results in improved productivity with better outcomes.", "Here are some resources to get you started:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/responsive/building-adaptive-apps", "base_url": "https://docs.flutter.dev/"}, {"title": "Navigate to a new screen and back | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Most apps contain several screens for displaying different types of\ninformation.\nFor example, an app might have a screen that displays products.\nWhen the user taps the image of a product, a new screen displays\ndetails about the product.", "Terminology: In Flutter, screens and pages are called routes.\n  The remainder of this recipe refers to routes.", "In Android, a route is equivalent to an Activity.\nIn iOS, a route is equivalent to a ViewController.\nIn Flutter, a route is just a widget.", "This recipe uses the Navigator to navigate to a new route.", "The next few sections show how to navigate between two routes,\nusing these steps:", "First, create two routes to work with. Since this is a basic example,\neach route contains only a single button. Tapping the button on the\nfirst route navigates to the second route. Tapping the button on the\nsecond route returns to the first route.", "First, set up the visual structure:", "To switch to a new route, use the Navigator.push()\nmethod. The push() method adds a Route to the stack of routes managed by\nthe Navigator. Where does the Route come from?\nYou can create your own, or use a MaterialPageRoute,\nwhich is useful because it transitions to the\nnew route using a platform-specific animation.", "In the build() method of the FirstRoute widget,\nupdate the onPressed() callback:", "How do you close the second route and return to the first?\nBy using the Navigator.pop() method.\nThe pop() method removes the current Route from the stack of\nroutes managed by the Navigator.", "To implement a return to the original route, update the onPressed()\ncallback in the SecondRoute widget:", "In the previous example you learned how to navigate between screens\nusing the MaterialPageRoute from Material Components.\nHowever, in Flutter you are not limited to Material design language,\ninstead, you also have access to Cupertino (iOS-style) widgets.", "Implementing navigation with Cupertino widgets follows the same steps\nas when using MaterialPageRoute, \nbut instead you use CupertinoPageRoute\nwhich provides an iOS-style transition animation.", "In the following example, these widgets have been replaced:", "This way, the example follows the current iOS design language.", "You don\u2019t need to replace all Material widgets with Cupertino versions\n  to use CupertinoPageRoute\n  since Flutter allows you to mix and match Material and Cupertino widgets\n  depending on your needs.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/navigation/navigation-basics", "base_url": "https://docs.flutter.dev/"}, {"title": "Fetch data from the internet | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Fetching data from the internet is necessary for most apps.\nLuckily, Dart and Flutter provide tools, such as the\nhttp package, for this type of work.", "This recipe uses the following steps:", "The http package provides the\nsimplest way to fetch data from the internet.", "To add the http package as a dependency,\nrun flutter pub add:", "Import the http package.", "Additionally, in your AndroidManifest.xml file, \nadd the Internet permission.", "This recipe covers how to fetch a sample album from the\nJSONPlaceholder using the http.get() method.", "The http.get() method returns a Future that contains a Response.", "While it\u2019s easy to make a network request, working with a raw\nFuture<http.Response> isn\u2019t very convenient.\nTo make your life easier,\nconvert the http.Response into a Dart object.", "First, create an Album class that contains the data from the\nnetwork request. It includes a factory constructor that\ncreates an Album from JSON.", "Converting JSON by hand is only one option.\nFor more information, see the full article on\nJSON and serialization.", "Now, use the following steps to update the fetchAlbum()\nfunction to return a Future<Album>:", "Hooray!\nNow you\u2019ve got a function that fetches an album from the internet.", "Call the fetchAlbum() method in either the\ninitState() or didChangeDependencies()\nmethods.", "The initState() method is called exactly once and then never again.\nIf you want to have the option of reloading the API in response to an\nInheritedWidget changing, put the call into the\ndidChangeDependencies() method.\nSee State for more details.", "This Future is used in the next step.", "To display the data on screen, use the\nFutureBuilder widget.\nThe FutureBuilder widget comes with Flutter and\nmakes it easy to work with asynchronous data sources.", "You must provide two parameters:", "Note that snapshot.hasData only returns true\nwhen the snapshot contains a non-null data value.", "Because fetchAlbum can only return non-null values,\nthe function should throw an exception\neven in the case of a \u201c404 Not Found\u201d server response.\nThrowing an exception sets the snapshot.hasError to true\nwhich can be used to display an error message.", "Otherwise, the spinner will be displayed.", "Although it\u2019s convenient,\nit\u2019s not recommended to put an API call in a build() method.", "Flutter calls the build() method every time it needs\nto change anything in the view,\nand this happens surprisingly often.\nThe fetchAlbum() method, if placed inside build(), is repeatedly \ncalled on each rebuild causing the app to slow down.", "Storing the fetchAlbum() result in a state variable ensures that\nthe Future is executed only once and then cached for subsequent\nrebuilds.", "For information on how to test this functionality,\nsee the following recipes:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/fetch-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Integration testing | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page describes how to use the integration_test package to run\nintegration tests. Tests written using this package have the following\nproperties:", "info Note:\n  The integration_test package is part of the Flutter SDK itself. \n  To use it, make sure that you update your app\u2019s pubspec file\n  to include this package as one of your dev_dependencies. \n  For an example, see the Project setup section below.", "Unit tests, widget tests, and integration tests", "There are three types of tests that Flutter supports.\nA unit test verifies the behavior of a method or class.\nA widget test verifies the behavior of Flutter widgets\nwithout running the app itself. An integration test (also\ncalled end-to-end testing or GUI testing) runs the full app.", "During development, you are probably writing the code\non a desktop computer, called the host machine,\nand running the app on a mobile device, browser,\nor desktop application, called the target device.\n(If you are using a web\nbrowser or desktop application,\nthe host machine is also the target device.)", "Tests written with the integration_test package can:", "Existing projects using flutter_driver can be migrated to\nintegration_test by following the Migrating from flutter_drive\nguide.", "Add integration_test and flutter_test to your pubspec.yaml file:", "In your project, create a new directory\nintegration_test with a new file, <name>_test.dart:", "info Note:\n  Note: You should only use testWidgets\n  to declare your tests, or errors won\u2019t\n  be reported correctly.", "These tests can be launched with the\nflutter test command, where <DEVICE_ID>:\nis the optional device ID or pattern displayed\nin the output of the flutter devices command:", "This runs the tests in foo_test.dart. To run all tests in this directory on\nthe default device, run:", "First, Download and install ChromeDriver\nand run it on port 4444:", "To run tests with flutter drive, create a new directory containing a new file,\ntest_driver/integration_test.dart:", "Then add IntegrationTestWidgetsFlutterBinding.ensureInitialized() in your \nintegration_test/<name>_test.dart file:", "In a separate process, run flutter_drive:", "To learn more, see the\nRunning Flutter driver tests with web wiki page.", "You can use the Firebase Test Lab with both Android\nand iOS targets.", "Follow the instructions in the Android Device Testing\nsection of the README.", "Follow the instructions in the iOS Device Testing\nsection of the README.", "Go to the Firebase Console,\nand create a new project if you don\u2019t have one\nalready. Then navigate to Quality > Test Lab:", "Create an APK using Gradle:", "Where <name>_test.dart is the file created in the\nProject Setup section.", "info Note:\n  To use --dart-define with gradlew, you must base64 encode\n  all parameters, and pass them to gradle in a comma separated list:", "Drag the \u201cdebug\u201d APK from\n<flutter_project_directory>/build/app/outputs/apk/debug\ninto the Android Robo Test target on the web page.\nThis starts a Robo test and allows you to run\nother tests:", "Click Run a test,\nselect the Instrumentation test type and drag\nthe following two files:", "If a failure occurs,\nyou can view the output by selecting the red icon:", "See the Firebase Test Lab section of the README\nfor instructions on uploading the APKs from the command line.", "See the Firebase TestLab iOS instructions\nfor details on how to upload the .zip file\nto the Firebase TestLab section of the Firebase Console.", "See the iOS Device Testing section in the README\nfor instructions on how to upload the .zip file\nfrom the command line.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/integration-tests", "base_url": "https://docs.flutter.dev/"}, {"title": "Building a web application with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page covers the following steps for getting started with web support:", "To create a Flutter app with web support,\nyou need the following software:", "For more information, see the web FAQ.", "You can use the following steps\nto create a new project with web support.", "Run the following commands to use the latest version of the Flutter SDK:", "report_problem Warning:\n  Running flutter channel stable replaces your current version of Flutter\n  with the stable version and can take time if your connection is slow.\n  After this, running flutter upgrade upgrades your install to the latest\n stable.  Returning to another channel (beta or master) requires calling\n flutter channel <channel> explicitly.", "If Chrome is installed,\nthe flutter devices command outputs a Chrome device\nthat opens the Chrome browser with your app running,\nand a Web Server that provides the URL serving the app.", "In your IDE, you should see Chrome (web) in the device pulldown.", "Creating a new project with web support is no different\nthan creating a new Flutter project for other platforms.", "Create a new app in your IDE and it automatically\ncreates iOS, Android, desktop, and web versions of your app.\nFrom the device pulldown, select Chrome (web)\nand run your app to see it launch in Chrome.", "To create a new app that includes web support\n(in addition to mobile support), run the following commands,\nsubstituting my_app with the name of your project:", "To serve your app from localhost in Chrome,\nenter the following from the top of the package:", "info Note:\n  If there aren\u2019t any other connected devices,\n  the -d chrome is optional.", "The flutter run command launches the application using the\ndevelopment compiler in a Chrome browser.", "report_problem Warning:\nHot reload is not supported in a web browser\n  Currently, Flutter supports hot restart,\n  but not hot reload in a web browser.", "Run the following command to generate a release build:", "A release build uses dart2js\n(instead of the development compiler)\nto produce a single JavaScript file main.dart.js.\nYou can create a release build using release mode\n(flutter run --release) or by using flutter build web.\nThis populates a build/web directory\nwith built files, including an assets directory,\nwhich need to be served together.", "You can also include --web-renderer html  or --web-renderer canvaskit to\nselect between the HTML or CanvasKit renderers, respectively. For more\ninformation, see Web renderers.", "For more information, see\nBuild and release a web app.", "To add web support to an existing project\ncreated using a previous version of Flutter,\nrun the following command\nfrom your project\u2019s top-level directory:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web/building", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for web developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page is for users who are familiar with the HTML\nand CSS syntax for arranging components of an application\u2019s UI.\nIt maps HTML/CSS code snippets to their Flutter/Dart code equivalents.", "Flutter is a framework for building cross-platform applications\nthat uses the Dart programming language.\nTo understand some differences between programming with Dart\nand programming with Javascript, \nsee Learning Dart as a JavaScript Developer.", "One of the fundamental differences between\ndesigning a web layout and a Flutter layout,\nis learning how constraints work,\nand how widgets are sized and positioned.\nTo learn more, see Understanding constraints.", "The HTML document starts with <!DOCTYPE html>, and the CSS box model\nfor all HTML elements is set to border-box,\nfor consistency with the Flutter model.", "In Flutter, the default styling of the \u2018Lorem ipsum\u2019 text\nis defined by the bold24Roboto variable as follows,\nto keep the syntax simple:", "How is react-style, or declarative, programming different from the\n  traditional imperative style?\n  For a comparison, see Introduction to declarative UI.", "The following examples show how to perform the most common UI layout tasks.", "Font style, size, and other text attributes that CSS\nhandles with the font and color properties are individual\nproperties of a TextStyle child of a Text widget.", "For text-align property in CSS that is used for aligning text,\nthere is a textAlign property of a Text widget.", "In both HTML and Flutter, child elements or widgets\nare anchored at the top left, by default.", "In Flutter, you set the background color using the color property\nor the decoration property of a Container.\nHowever, you cannot supply both, since it would potentially\nresult in the decoration drawing over the background color.\nThe color property should be preferred\nwhen the background is a simple color.\nFor other cases, such as gradients or images,\nuse the decoration property.", "The CSS examples use the hex color equivalents to the Material color palette.", "A Center widget centers its child both horizontally\nand vertically.", "To accomplish a similar effect in CSS, the parent element uses either a flex\nor table-cell display behavior. The examples on this page show the flex\nbehavior.", "To specify the width of a Container\nwidget, use its width property.\nThis is a fixed width, unlike the CSS max-width property\nthat adjusts the container width up to a maximum value.\nTo mimic that effect in Flutter,\nuse the constraints property of the Container.\nCreate a new BoxConstraints widget with a minWidth or maxWidth.", "For nested Containers, if the parent\u2019s width is less than the child\u2019s width,\nthe child Container sizes itself to match the parent.", "The following examples show how to perform more complex operations\non widget position, size, and background.", "By default, widgets are positioned relative to their parent.", "To specify an absolute position for a widget as x-y coordinates,\nnest it in a Positioned widget that is,\nin turn, nested in a Stack widget.", "To rotate a widget, nest it in a Transform widget.\nUse the Transform widget\u2019s alignment and origin properties\nto specify the transform origin (fulcrum) in relative and absolute terms,\nrespectively.", "For a simple 2D rotation, in which the widget is rotated on the Z axis,\ncreate a new Matrix4 identity object\nand use its rotateZ() method to specify the rotation factor\nusing radians (degrees \u00d7 \u03c0 / 180).", "To scale a widget up or down, nest it in a Transform widget.\nUse the Transform widget\u2019s alignment and origin properties\nto specify the transform origin (fulcrum) in relative or absolute terms,\nrespectively.", "For a simple scaling operation along the x-axis,\ncreate a new Matrix4 identity object\nand use its scale() method to specify the scaling factor.", "When you scale a parent widget,\nits child widgets are scaled accordingly.", "To apply a linear gradient to a widget\u2019s background,\nnest it in a Container widget.\nThen use the Container widget\u2019s decoration property to create a\nBoxDecoration object, and use BoxDecoration\u2019s gradient\nproperty to transform the background fill.", "The gradient \u201cangle\u201d is based on the Alignment (x, y) values:", "The following examples show how to make and customize shapes.", "To round the corners of a rectangular shape,\nuse the borderRadius property of a BoxDecoration object.\nCreate a new BorderRadius\nobject that specifies the radius for rounding each corner.", "In CSS you can specify shadow offset and blur in shorthand,\nusing the box-shadow property. This example shows two box shadows,\nwith properties:", "In Flutter, each property and value is specified separately.\nUse the boxShadow property of BoxDecoration to create a list of\nBoxShadow widgets. You can define one or multiple\nBoxShadow widgets, which can be stacked\nto customize the shadow depth, color, and so on.", "Making a circle in CSS requires a workaround of applying a\nborder-radius of 50% to all four sides of a rectangle,\nthough there are basic shapes.", "While this approach is supported\nwith the borderRadius property of BoxDecoration,\nFlutter provides a shape property\nwith BoxShape enum for this purpose.", "The following examples show how to specify fonts and other\ntext attributes. They also show how to transform text strings,\ncustomize spacing, and create excerpts.", "In CSS, you specify the amount of white space\nbetween each letter or word by giving a length value\nfor the letter-spacing and word-spacing properties, respectively.\nThe amount of space can be in px, pt, cm, em, etc.", "In Flutter, you specify white space as logical pixels\n(negative values are allowed)\nfor the letterSpacing and wordSpacing properties\nof a TextStyle child of a Text widget.", "A Text widget lets you display text\nwith some formatting characteristics.\nTo display text that uses multiple styles\n(in this example, a single word with emphasis),\nuse a RichText widget instead.\nIts text property can specify one or more\nTextSpan objects that can be individually styled.", "In the following example, \u201cLorem\u201d is in a TextSpan\nwith the default (inherited) text styling,\nand \u201cipsum\u201d is in a separate TextSpan with custom styling.", "An excerpt displays the initial line(s) of text in a paragraph,\nand handles the overflow text, often using an ellipsis.", "In Flutter, use the maxLines property of a Text widget\nto specify the number of lines to include in the excerpt,\nand the overflow property for handling overflow text.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/web-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter and the pubspec file | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  This page is primarily aimed at folks who write\n  Flutter apps. If you write packages or plugins, \n  (perhaps you want to create a federated plugin),\n  you should check out the\n  Developing packages and plugins page.", "Every Flutter project includes a pubspec.yaml file,\noften referred to as the pubspec.\nA basic pubspec is generated when you create\na new Flutter project. It\u2019s located at the top\nof the project tree and contains metadata about\nthe project that the Dart and Flutter tooling\nneeds to know. The pubspec is written in\nYAML, which is human readable, but be aware\nthat white space (tabs v spaces) matters.", "The pubspec file specifies dependencies\nthat the project requires, such as particular packages\n(and their versions), fonts, or image files.\nIt also specifies other requirements, such as \ndependencies on developer packages (like\ntesting or mocking packages), or particular\nconstraints on the version of the Flutter SDK.", "Fields common to both Dart and Flutter projects\nare described in the pubspec file on dart.dev.\nThis page lists Flutter-specific fields\nthat are only valid for a Flutter project.", "info Note:\n  The first time you build your project, it\n  creates a pubspec.lock file that contains\n  specific versions of the included packages.\n  This ensures that you get the same version\n  the next time the project is built.", "When you create a new project with the\nflutter create command (or by using the\nequivalent button in your IDE), it creates\na pubspec for a basic Flutter app.", "Here is an example of a Flutter project pubspec file.\nThe Flutter only fields are highlighted.", "Common types of assets include static data\n(for example, JSON files), configuration files,\nicons, and images (JPEG, WebP, GIF,\nanimated WebP/GIF, PNG, BMP, and WBMP).", "Besides listing the images that are included in the\napp package, an image asset can also refer to one or more\nresolution-specific \u201cvariants\u201d. For more information,\nsee the resolution aware section of the\nAssets and images page.\nFor information on adding assets from package\ndependencies, see the\nasset images in package dependencies\nsection in the same page.", "As shown in the above example,\neach entry in the fonts section should have a\nfamily key with the font family name,\nand a fonts key with a list specifying the\nasset and other descriptors for the font.", "For examples of using fonts\nsee the Use a custom font and\nExport fonts from a package recipes in the\nFlutter cookbook.", "For more information on packages, plugins,\nand pubspec files, see the following:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/pubspec", "base_url": "https://docs.flutter.dev/"}, {"title": "Debug your add-to-app module | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Once you\u2019ve integrated the Flutter module to your project and used Flutter\u2019s\nplatform APIs to run the Flutter engine and/or UI,\nyou can then build and run your Android or iOS app the same way\nyou run normal Android or iOS apps.", "However, Flutter is now powering the UI in places where you\u2019re showing a\nFlutterActivity or FlutterViewController.", "You might be used to having your suite of favorite Flutter debugging tools\navailable to you automatically when running flutter run or an equivalent\ncommand from an IDE. But you can also use all your Flutter\ndebugging functionalities such as hot reload, performance\noverlays, DevTools, and setting breakpoints in add-to-app scenarios.", "These functionalities are provided by the flutter attach mechanism.\nflutter attach can be initiated through different pathways,\nsuch as through the SDK\u2019s CLI tools,\nthrough VS Code or IntelliJ/Android Studio.", "flutter attach can connect as soon as you run your FlutterEngine, and\nremains attached until your FlutterEngine is disposed. But you can invoke\nflutter attach before starting your engine. flutter attach waits for\nthe next available Dart VM that is hosted by your engine.", "Run flutter attach or flutter attach -d deviceId to attach from the terminal.", "To generate the needed iOS platform dependencies,\nrun the flutter build command.", "If you use VS Code to debug most of your code, start with this section.", "To open the Flutter app directory, go to\nFile >\nOpen Folder\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "If you can build an app for more than one device,\nyou must select the device first.", "Go to\nView >\nCommand Palette\u2026", "You can also press Ctrl / Cmd +\nShift + P.", "Click the Flutter: Select Device command.", "Choose your target device.", "Click the debug icon\n().\nThis opens the Debug pane and launches the app.\nWait for the app to launch on the device and for the debug pane to\nindicate Connected.\nThe debugger takes longer to launch the first time.\nSubsequent launches start faster.", "This Flutter app contains two buttons:", "To attach to the Flutter app, go to\nDebug >\nAttach to Process >\nRunner.", "Runner should be at the top of the Attach to Process menu\nunder the Likely Targets heading.", "If you use Xcode to debug most of your code, start with this section.", "Open ios/Runner.xcworkspace from your Flutter app directory.", "Select the correct device using the Scheme menu in the toolbar.", "If you have no preference, choose iPhone Pro 14.", "Run this Runner as a normal app in Xcode.", "When the run completes, the Debug area at the bottom of Xcode displays\n a message with the Dart VM service URI. It resembles the following response:", "Copy the Dart VM service URI.", "To open the command palette, go to\n View >\nCommand Palette\u2026", "You can also press Cmd + Shift + P.", "Click the Debug: Attach to Flutter on Device command.", "In the Paste an VM Service URI box, paste the URI you copied\n from Xcode and press Enter.", "You can also create a .vscode/launch.json file in your Flutter module project.\nThis enables you to attach using the Run > Start Debugging command or F5:", "Select the device on which the Flutter module runs so flutter attach filters for the right start signals.", "You can debug your app wirelessly on an iOS or Android device\nusing flutter attach.", "On iOS, you must follow the steps below:", "Ensure that your device is wirelessly connected to Xcode\nas described in the iOS setup guide.", "Open Xcode > Product > Scheme > Edit Scheme", "Select the Arguments tab", "Add either --vm-service-host=0.0.0.0 for IPv4, \nor --vm-service-host=::0 for IPv6 as a launch argument", "You can determine if you\u2019re on an IPv6 network by opening your Mac\u2019s \nSettings > Wi-Fi > Details (of the network you\u2019re connected to) > TCP/IP \nand check to see if there is an IPv6 address section.", "Ensure that your device is wirelessly connected to Android Studio \nas described in the Android setup guide.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/debugging", "base_url": "https://docs.flutter.dev/"}, {"title": "Return data from a screen | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In some cases, you might want to return data from a new screen.\nFor example, say you push a new screen that presents two options to a user.\nWhen the user taps an option, you want to inform the first screen\nof the user\u2019s selection so that it can act on that information.", "You can do this with the Navigator.pop()\nmethod using the following steps:", "The home screen displays a button. When tapped,\nit launches the selection screen.", "Now, create the SelectionButton, which does the following:", "Now, build a selection screen that contains two buttons.\nWhen a user taps a button,\nthat app closes the selection screen and lets the home\nscreen know which button was tapped.", "This step defines the UI.\nThe next step adds code to return data.", "Now, update the onPressed() callback for both of the buttons.\nTo return data to the first screen,\nuse the Navigator.pop() method,\nwhich accepts an optional second argument called result.\nAny result is returned to the Future in the SelectionButton.", "Now that you\u2019re launching a selection screen and awaiting the result,\nyou\u2019ll want to do something with the information that\u2019s returned.", "In this case, show a snackbar displaying the result by using the\n_navigateAndDisplaySelection() method in SelectionButton:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/navigation/returning-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Adding a launch screen to your iOS app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Launch screens provide a simple initial experience while your iOS app loads.\nThey set the stage for your application, while allowing time for the app engine\nto load and your app to initialize.", "All apps submitted to the Apple App Store\nmust provide a launch screen\nwith an Xcode storyboard.", "The default Flutter template includes an Xcode\nstoryboard named LaunchScreen.storyboard\nthat can be customized your own assets.\nBy default, the storyboard displays a blank image,\nbut you can change this. To do so,\nopen the Flutter app\u2019s Xcode project\nby typing open ios/Runner.xcworkspace\nfrom the root of your app directory.\nThen select Runner/Assets.xcassets\nfrom the Project Navigator and\ndrop in the desired images to the LaunchImage image set.", "Apple provides detailed guidance for launch screens as\npart of the Human Interface Guidelines.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/launch-screen", "base_url": "https://docs.flutter.dev/"}, {"title": "Make authenticated requests | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "To fetch data from most web services, you need to provide\nauthorization. There are many ways to do this,\nbut perhaps the most common uses the Authorization HTTP header.", "The http package provides a\nconvenient way to add headers to your requests.\nAlternatively, use the HttpHeaders\nclass from the dart:io library.", "This example builds upon the\nFetching data from the internet recipe.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/authenticated-requests", "base_url": "https://docs.flutter.dev/"}, {"title": "Displaying images on the web | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The web supports the standard Image widget to display images.\nHowever, because web browsers are built to run untrusted code safely,\nthere are certain limitations in what you can do with images compared\nto mobile and desktop platforms. This page explains these limitations\nand offers ways to work around them.", "This section summarizes the technologies available\nacross Flutter and the web,\non which the solutions below are based on.", "Flutter offers the Image widget as well as the low-level\ndart:ui/Image class for rendering images.\nThe Image widget has enough functionality for most use-cases.\nThe dart:ui/Image class can be used in\nadvanced situations where fine-grained control\nof the image is needed.", "The web offers several methods for displaying images.\nBelow are some of the common ones:", "Each option has its own benefits and drawbacks.\nFor example, the built-in elements fit nicely among\nother HTML elements, and they automatically take\nadvantage of browser caching, and built-in image\noptimization and memory management.\nThey allow you to safely display images from arbitrary sources\n(more on than in the CORS section below).\ndrawImage is great when the image must fit within\nother content rendered using the <canvas> element.\nYou also gain control over image sizing and,\nwhen the CORS policy allows it, read the pixels\nof the image back for further processing.\nFinally, WebGL gives you the highest degree of\ncontrol over the image. Not only can you read the pixels and\napply custom image algorithms, but you can also use GLSL for\nhardware-acceleration.", "CORS is a mechanism that browsers use to control\nhow one site accesses the resources of another site.\nIt is designed such that, by default, one web-site\nis not allowed to make HTTP requests to another site\nusing XHR or fetch.\nThis prevents scripts on another site from acting on behalf\nof the user and from gaining access to another\nsite\u2019s resources without permission.", "When using <img>, <picture>, or <canvas>,\nthe browser automatically blocks access to pixels\nwhen it knows that an image is coming from another site\nand the CORS policy disallows access to data.", "WebGL requires access to the image data in order\nto be able to render the image. Therefore,\nimages to be rendered using WebGL must only come from servers\nthat have a CORS policy configured to work with\nthe domain that serves your application.", "Flutter offers a choice of two renderers on the web:", "Because the HTML renderer uses the <img>\nelement it can display images from\narbitrary sources. However,\nthis places the following limitations on what you\ncan do with them:", "The CanvasKit renderer implements Flutter\u2019s image API fully.\nHowever, it requires access to image pixels to do so,\nand is therefore subject to the CORS policy.", "If the app has the bytes of the encoded image in memory,\nprovided as an asset, or stored on the\nsame server that serves the application\n(also known as same-origin), no extra effort is necessary.\nThe image can be displayed using\nImage.memory, Image.asset, and Image.network\nin both HTML and CanvasKit modes.", "The HTML renderer can load cross-origin images\nwithout extra configuration.", "CanvasKit requires that the app gets the bytes of the encoded image.\nThere are several ways to do this, discussed below.", "Typically, content delivery networks (CDN)\ncan be configured to customize what domains\nare allowed to access your content.\nFor example, Firebase site hosting allows\nspecifying a custom Access-Control-Allow-Origin\nheader in the firebase.json file.", "If the image server cannot be configured to allow CORS\nrequests from your application,\nyou might still be able to load images by proxying\nthe requests through another server. This requires that the\nintermediate server has sufficient access to load the images.", "This method can be used in situations when the original\nimage server serves images publicly,\nbut is not configured with the correct CORS headers.", "Flutter supports embedding HTML inside the app using\nHtmlElementView.  Use it to create an <img>\nelement to render the image from another domain.\nHowever, do keep in mind that this comes with the\nlimitations explained in the section\n\u201cFlutter renderers on the web\u201d above.", "As of today, using too many HTML elements\nwith the CanvasKit renderer might hurt performance.\nIf images interleave non-image content Flutter needs to\ncreate extra WebGL contexts between the <img> elements.\nIf your application needs to display a lot of images\non the same screen all at once, consider using\nthe HTML renderer instead of CanvasKit.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web/web-images", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the CPU profiler view | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  The CPU profiler view works with Dart CLI and mobile apps only.\n  Use Chrome DevTools to analyze performance\n  of a web app.", "The CPU profiler view allows you to record and profile a\nsession from your Dart or Flutter application.\nThe profiler can help you solve performance problems\nor generally understand your app\u2019s CPU activity.\nThe Dart VM collects CPU samples\n(a snapshot of the CPU call stack at a single point in time)\nand sends the data to DevTools for visualization.\nBy aggregating many CPU samples together,\nthe profiler can help you understand where the CPU\nspends most of its time.", "info Note:\nIf you are running a Flutter application,\n  use a profile build to analyze performance.\n  CPU profiles are not indicative of release performance\n  unless your Flutter application is run in profile mode.", "Start recording a CPU profile by clicking Record.\nWhen you are done recording, click Stop. At this point,\nCPU profiling data is pulled from the VM and displayed\nin the profiler views (Call tree, Bottom up, Method table,\nand Flame chart).", "To load all available CPU samples without manually\nrecording and stopping, you can click Load all CPU samples,\nwhich pulls all CPU samples that the VM has recorded and\nstored in its ring buffer, and then displays those\nCPU samples in the profiler views.", "This table provides a bottom-up representation\nof a CPU profile. This means that each top-level method,\nor root, in the bottom up table is actually the\ntop method in the call stack for one or more CPU samples.\nIn other words, each top-level method in a bottom up\ntable is a leaf node from the top down table\n(the call tree).\nIn this table, a method can be expanded to show its callers.", "This view is useful for identifying expensive methods\nin a CPU profile. When a root node in this table\nhas a high self time, that means that many CPU samples\nin this profile ended with that method on top of the call stack.", "\nSee the Guidelines section below to learn how to\nenable the blue and green vertical lines seen in this image.", "Tooltips can help you understand the values in each column:", "For top-level methods in the bottom-up tree\n    (stack frames that were at the top of at least one\n    CPU sample), this is the time the method spent executing\n    its own code, as well as the code for any methods that\n    it called.", "For top-level methods in the bottom-up tree\n    (stack frames that were at the top of at least one CPU\n    sample), this is the time the method spent executing only\n    its own code.\n    For children methods in the bottom-up tree (the callers),\n    this is the self time of the top-level method (the callee)\n    when called through the child method (the caller).", "Table element (self time)\n", "This table provides a top-down representation of a CPU profile.\nThis means that each top-level method in the call tree is a root\nof one or more CPU samples. In this table,\na method can be expanded to show its callees.", "This view is useful for identifying expensive paths in a CPU profile.\nWhen a root node in this table has a high total time,\nthat means that many CPU samples in this profile started\nwith that method on the bottom of the call stack.", "\nSee the Guidelines section below to learn how to\nenable the blue and green vertical lines seen in this image.", "Tooltips can help you understand the values in each column:", "The method table provides CPU statistics for each method\ncontained in a CPU profile. In the table on the left,\nall available methods are listed with their total and\nself time.", "Total time is the combined time that a method spent\nanywhere on the call stack, or in other words,\nthe time a method spent executing its own code and\nany code for methods that it called.", "Self time is the combined time that a method spent\non top of the call stack, or in other words,\nthe time a method spent executing only its own code.", "Selecting a method from the table on the left shows\nthe call graph for that method. The call graph shows\na method\u2019s callers and callees and their respective\ncaller / callee percentages.", "The flame chart view is a graphical representation of\nthe Call tree. This is a top-down view\nof a CPU profile, so in this chart,\nthe top-most method calls the one below it.\nThe width of each flame chart element represents the\namount of time that a method spent on the call stack.", "Like the Call tree, this view is useful for identifying\nexpensive paths in a CPU profile.", "The help menu, which can be opened by clicking the ? icon\nnext to the search bar, provides information about how to\nnavigate and zoom within the chart and a color-coded legend.\n", "DevTools sets a default rate at which the VM collects CPU samples:\n1 sample / 250 \u03bcs (microseconds). This is selected by default on\nthe CPU profiler page as \u201cCpu sampling rate: medium\u201d.\nThis rate can be modified using the selector at the top\nof the page.", "The low, medium, and high sampling rates are\n1,000 Hz, 4,000 Hz, and 20,000 Hz, respectively.\nIt\u2019s important to know the trade-offs\nof modifying this setting.", "A profile that was recorded with a higher sampling rate\nyields a more fine-grained CPU profile with more samples.\nThis might affect performance of your app since the VM\nis being interrupted more often to collect samples.\nThis also causes the VM\u2019s CPU sample buffer to overflow more quickly.\nThe VM has limited space where it can store CPU sample information.\nAt a higher sampling rate, the space fills up and begins\nto overflow sooner than it would have if a lower sampling\nrate was used.\nThis means that you might not have access to CPU samples\nfrom the beginning of the recorded profile, depending\non whether the buffer overflows during the time of recording.", "A profile that was recorded with a lower sampling rate\nyields a more coarse-grained CPU profile with fewer samples.\nThis affects your app\u2019s performance less,\nbut you might have access to less information about what\nthe CPU was doing during the time of the profile.\nThe VM\u2019s sample buffer also fills more slowly, so you can see\nCPU samples for a longer period of app run time.\nThis means that you have a better chance of viewing CPU\nsamples from the beginning of the recorded profile.", "When viewing a CPU profile, you can filter the data by\nlibrary, method name, or UserTag.", "When looking at a call tree or bottom up view,\nsometimes the trees can be very deep.\nTo help with viewing parent-child relationships in a deep tree,\nenable the Display guidelines option.\nThis adds vertical guidelines between parent and child in the tree.", "To learn how to use DevTools to analyze\nthe CPU usage of a compute-intensive Mandelbrot app,\ncheck out a guided CPU Profiler View tutorial.\nAlso, learn how to analyze CPU usage when the app\nuses isolates for parallel computing.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/cpu-profiler", "base_url": "https://docs.flutter.dev/"}, {"title": "Differentiate between ephemeral state and app state | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This doc introduces app state, ephemeral state,\nand how you might manage each in a Flutter app.", "In the broadest possible sense, the state of an app is everything that\nexists in memory when the app is running. This includes the app\u2019s assets,\nall the variables that the Flutter framework keeps about the UI,\nanimation state, textures, fonts, and so on. While this broadest\npossible definition of state is valid, it\u2019s not very useful for\narchitecting an app.", "First, you don\u2019t even manage some state (like textures).\nThe framework handles those for you. So a more useful definition of\nstate is \u201cwhatever data you need in order to rebuild your UI at any\nmoment in time\u201d. Second, the state that you do manage yourself can\nbe separated into two conceptual types: ephemeral state and app state.", "Ephemeral state (sometimes called UI state or local state)\nis the state you can neatly contain in a single widget.", "This is, intentionally, a vague definition, so here are a few examples.", "Other parts of the widget tree seldom need to access this kind of state.\nThere is no need to serialize it, and it doesn\u2019t change in complex ways.", "In other words, there is no need to use state management techniques\n(ScopedModel, Redux, etc.) on this kind of state.\nAll you need is a StatefulWidget.", "Below, you see how the currently selected item in a bottom navigation bar is\nheld in the _index field of the _MyHomepageState class.\nIn this example, _index is ephemeral state.", "Here, using setState() and a field inside the StatefulWidget\u2019s State\nclass is completely natural. No other part of your app needs to access\n_index. The variable only changes inside the MyHomepage widget.\nAnd, if the user closes and restarts the app,\nyou don\u2019t mind that _index resets to zero.", "State that is not ephemeral,\nthat you want to share across many parts of your app,\nand that you want to keep between user sessions,\nis what we call application state\n(sometimes also called shared state).", "Examples of application state:", "For managing app state, you\u2019ll want to research your options.\nYour choice depends on the complexity and nature of your app,\nyour team\u2019s previous experience, and many other aspects. Read on.", "To be clear, you can use State and setState() to manage all of\nthe state in your app. In fact, the Flutter team does this in many\nsimple app samples (including the starter app that you get with every\nflutter create).", "It goes the other way, too. For example, you might decide that\u2014in\nthe context of your particular app\u2014the selected tab in a bottom\nnavigation bar is not ephemeral state. You might need to change it\nfrom outside the class, keep it between sessions, and so on.\nIn that case, the _index variable is app state.", "There is no clear-cut, universal rule to distinguish\nwhether a particular variable is ephemeral or app state.\nSometimes, you\u2019ll have to refactor one into another.\nFor example, you\u2019ll start with some clearly ephemeral state,\nbut as your application grows in features,\nit might need to be moved to app state.", "For that reason, take the following diagram with a large grain of salt:", "When asked about React\u2019s setState versus Redux\u2019s store, the author of Redux,\nDan Abramov, replied:", "\u201cThe rule of thumb is: Do whatever is less awkward.\u201d", "In summary, there are two conceptual types of state in any Flutter app.\nEphemeral state can be implemented using State and setState(),\nand is often local to a single widget. The rest is your app state.\nBoth types have their place in any Flutter app, and the split between\nthe two depends on your own preference and the complexity of the app.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/state-mgmt/ephemeral-vs-app", "base_url": "https://docs.flutter.dev/"}, {"title": "Use themes to share colors and font styles | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  This recipe uses Flutter\u2019s support for Material 3 and\n  the google_fonts package.", "To share colors and font styles throughout an app, use themes.", "You can define app-wide themes.\nYou can extend a theme to change a theme style for one component.\nEach theme defines the colors, type style, and other parameters\napplicable for the type of Material component.", "Flutter applies styling in the following order:", "After you define a Theme, use it within your own widgets.\nFlutter\u2019s Material widgets use your theme to set the background\ncolors and font styles for app bars, buttons, checkboxes, and more.", "To share a Theme across your entire app, set the theme property\nto your MaterialApp constructor.\nThis property takes a ThemeData instance.", "To enable Material 3, set the useMaterial3 property\nto true in the ThemeData constructor.", "If you don\u2019t specify a theme in the constructor,\nFlutter creates a default theme for you.", "Most instances of ThemeData set values for the following two properties. These properties affect the entire app.", "To learn what colors, fonts, and other properties, you can define,\ncheck out the ThemeData documentation.", "To apply your new theme, use the Theme.of(context) method \nwhen specifying a widget\u2019s styling properties.\nThese can include, but are not limited to, style and color.", "The Theme.of(context) method looks up the widget tree and retrieves\nthe nearest Theme in the tree.\nIf you have a standalone Theme, that\u2019s applied.\nIf not, Flutter applies the app\u2019s theme.", "In the following example, the Container constructor uses this technique to set its color.", "To override the overall theme in part of an app,\nwrap that section of the app in a Theme widget.", "You can override a theme in two ways:", "If you want a component of your app to ignore the overall theme,\ncreate a ThemeData instance.\nPass that instance to the Theme widget.", "Instead of overriding everything, consider extending the parent theme.\nTo extend a theme, use the copyWith() method.", "To learn more, watch this short Widget of the Week video on the Theme widget:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/themes", "base_url": "https://docs.flutter.dev/"}, {"title": "Windows | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/windows", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter performance profiling | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  To learn how to use the Performance View\n  (part of Flutter DevTools)\n  for debugging performance issues,\n  see Using the Performance view.", "It\u2019s been said that \u201ca fast app is great,\nbut a smooth app is even better.\u201d\nIf your app isn\u2019t rendering smoothly,\nhow do you fix it? Where do you begin?\nThis guide shows you where to start,\nsteps to take, and tools that can help.", "To diagnose an app with performance problems, you\u2019ll enable\nthe performance overlay to look at the UI and raster threads.\n(The raster thread was previously known as the GPU thread.)\nBefore you begin, you want to make sure that you\u2019re running in\nprofile mode, and that you\u2019re not using an emulator.\nFor best results, you might choose the slowest device that\nyour users might use.", "Almost all performance debugging for Flutter applications\nshould be conducted on a physical Android or iOS device,\nwith your Flutter application running in profile mode.\nUsing debug mode, or running apps on simulators\nor emulators, is generally not indicative of the final\nbehavior of release mode builds.\nYou should consider checking performance\non the slowest device that your users might reasonably use.", "Flutter\u2019s profile mode compiles and launches your application\nalmost identically to release mode, but with just enough additional\nfunctionality to allow debugging performance problems.\nFor example, profile mode provides tracing information to the\nprofiling tools.", "info Note:\n  DevTools can\u2019t connect to a Flutter web app running\n  in profile mode. Use Chrome DevTools to\n  generate timeline events for a web app.", "Launch the app in profile mode as follows:", "In VS Code, open your launch.json file, and set the\nflutterMode property to profile\n(when done profiling, change it back to release or debug):", "From the command line, use the --profile flag:", "For more information on the different modes,\nsee Flutter\u2019s build modes.", "You\u2019ll begin by opening DevTools and viewing\nthe performance overlay, as discussed in the next section.", "DevTools provides features like profiling, examining the heap,\ndisplaying code coverage, enabling the performance overlay,\nand a step-by-step debugger.\nDevTools\u2019 Timeline view allows you to investigate the\nUI performance of your application on a frame-by-frame basis.", "Once your app is running in profile mode,\nlaunch DevTools.", "The performance overlay displays statistics in two graphs\nthat show where time is being spent in your app. If the UI\nis janky (skipping frames), these graphs help you figure out why.\nThe graphs display on top of your running app, but they aren\u2019t\ndrawn like a normal widget\u2014the Flutter engine itself\npaints the overlay and only minimally impacts performance.\nEach graph represents the last 300 frames for that thread.", "This section describes how to enable the performance overlay\nand use it to diagnose the cause of jank in your application.\nThe following screenshot shows the performance overlay running\non the Flutter Gallery example:", "\nPerformance overlay showing the raster thread (top),\nand UI thread (bottom).The vertical green bars\nrepresent the current frame.", "The top graph (marked \u201cGPU\u201d) shows the time spent by \nthe raster thread, the bottom one graph shows the time \nspent by the UI thread.\nThe white lines across the graphs show 16ms increments\nalong the vertical axis; if the graph ever goes over one\nof these lines then you are running at less than 60Hz.\nThe horizontal axis represents frames. The graph is\nonly updated when your application paints,\nso if it\u2019s idle the graph stops moving.", "The overlay should always be viewed in profile mode,\nsince debug mode performance is intentionally sacrificed\nin exchange for expensive asserts that are intended to aid\ndevelopment, and thus the results are misleading.", "Each frame should be created and displayed within 1/60th of\na second (approximately 16ms). A frame exceeding this limit\n(in either graph) fails to display, resulting in jank,\nand a vertical red bar appears in one or both of the graphs.\nIf a red bar appears in the UI graph, the Dart code is too\nexpensive. If a red vertical bar appears in the GPU graph,\nthe scene is too complicated to render quickly.", "\nThe vertical red bars indicate that the current frame is\nexpensive to both render and paint.When both graphs\ndisplay red, start by diagnosing the UI thread.", "Flutter uses several threads to do its work, though\nonly two of the threads are shown in the overlay.\nAll of your Dart code runs on the UI thread.\nAlthough you have no direct access to any other thread,\nyour actions on the UI thread have performance consequences\non other threads.", "The platform\u2019s main thread. Plugin code runs here.\n    For more information, see the UIKit documentation for iOS,\n    or the MainThread documentation for Android.\n    This thread is not shown in the performance overlay.", "The UI thread executes Dart code in the Dart VM.\n    This thread includes code that you wrote, and code executed by\n    Flutter\u2019s framework on your app\u2019s behalf.\n    When your app creates and displays a scene, the UI thread creates\n    a layer tree, a lightweight object containing device-agnostic\n    painting commands, and sends the layer tree to the raster thread to\n    be rendered on the device. Don\u2019t block this thread!\n    Shown in the bottom row of the performance overlay.", "The raster thread takes the layer tree and displays\n    it by talking to the GPU (graphic processing unit).\n    You cannot directly access the raster thread or its data but,\n    if this thread is slow, it\u2019s a result of something you\u2019ve done\n    in the Dart code. Skia and Impeller, the graphics libraries,\n    run on this thread.\n    Shown in the top row of the performance overlay.\n    This thread was previously known as the \u201cGPU thread\u201d because it\n    rasterizes for the GPU. But it is running on the CPU.\n    We renamed it to \u201craster thread\u201d because many developers wrongly\n    (but understandably)\n    assumed the thread runs on the GPU unit.", "Performs expensive tasks (mostly I/O) that would\n    otherwise block either the UI or raster threads.\n    This thread is not shown in the performance overlay.", "For links to more information and videos,\nsee The Framework architecture on the\nGitHub wiki, and the community article,\nThe Layer Cake.", "You can toggle display of the performance overlay as follows:", "The easiest way to enable the PerformanceOverlay widget is\nfrom the Flutter inspector, which is available in the\nInspector view in DevTools. Simply click the\nPerformance Overlay button to toggle the overlay\non your running app.", "Toggle the performance overlay using the P key from\nthe command line.", "To enable the overlay programmatically, see\nPerformance overlay, a section in the\nDebugging Flutter apps programmatically page.", "If the performance overlay shows red in the UI graph,\nstart by profiling the Dart VM, even if the GPU graph\nalso shows red.", "Sometimes a scene results in a layer tree that is easy to construct,\nbut expensive to render on the raster thread. When this happens,\nthe UI graph has no red, but the GPU graph shows red.\nIn this case, you\u2019ll need to figure out what your code is doing\nthat is causing rendering code to be slow. Specific kinds of workloads\nare more difficult for the GPU. They might involve unnecessary calls\nto saveLayer, intersecting opacities with multiple objects,\nand clips or shadows in specific situations.", "If you suspect that the source of the slowness is during an animation,\nclick the Slow Animations button in the Flutter inspector\nto slow animations down by 5x.\nIf you want more control on the speed, you can also do this\nprogrammatically.", "Is the slowness on the first frame, or on the whole animation?\nIf it\u2019s the whole animation, is clipping causing the slow down?\nMaybe there\u2019s an alternative way of drawing the scene that doesn\u2019t\nuse clipping. For example, overlay opaque corners onto a square\ninstead of clipping to a rounded rectangle.\nIf it\u2019s a static scene that\u2019s being faded, rotated, or otherwise\nmanipulated, a RepaintBoundary might help.", "The saveLayer method is one of the most expensive methods in\nthe Flutter framework. It\u2019s useful when applying post-processing\nto the scene, but it can slow your app and should be avoided if\nyou don\u2019t need it.  Even if you don\u2019t call saveLayer explicitly,\nimplicit calls might happen on your behalf. You can check whether\nyour scene is using saveLayer with the\nPerformanceOverlayLayer.checkerboardOffscreenLayers switch.", "Once the switch is enabled, run the app and look for any images\nthat are outlined with a flickering box. The box flickers from\nframe to frame if a new frame is being rendered.  For example,\nperhaps you have a group of objects with opacities that are rendered\nusing saveLayer. In this case, it\u2019s probably more performant to\napply an opacity to each individual widget, rather than a parent\nwidget higher up in the widget tree. The same goes for\nother potentially expensive operations, such as clipping or shadows.", "info Note:\n  Opacity, clipping, and shadows are not, in themselves,\n  a bad idea. However, applying them to the top of the\n  widget tree might cause extra calls to saveLayer,\n  and needless processing.", "When you encounter calls to saveLayer,\nask yourself these questions:", "Caching an image with RepaintBoundary is good,\nwhen it makes sense.", "One of the most expensive operations,\nfrom a resource perspective,\nis rendering a texture using an image file.\nFirst, the compressed image\nis fetched from persistent storage.\nThe image is decompressed into host memory (GPU memory),\nand transferred to device memory (RAM).", "In other words, image I/O can be expensive.\nThe cache provides snapshots of complex hierarchies so\nthey are easier to render in subsequent frames.\nBecause raster cache entries are expensive to\nconstruct and take up loads of GPU memory,\ncache images only where absolutely necessary.", "You can see which images are being cached by enabling the\nPerformanceOverlayLayer.checkerboardRasterCacheImages switch.", "Run the app and look for images rendered with a randomly colored\ncheckerboard, indicating that the image is cached.\nAs you interact with the scene, the checkerboarded images\nshould remain constant\u2014you don\u2019t want to see flickering,\nwhich would indicate that the cached image is being re-cached.", "In most cases, you want to see checkerboards on static images,\nbut not on non-static images.  If a static image isn\u2019t cached,\nyou can cache it by placing it into a RepaintBoundary\nwidget. Though the engine might still ignore a repaint\nboundary if it thinks the image isn\u2019t complex enough.", "The Flutter framework is designed to make it hard to create\napplications that are not 60fps and smooth. Often, if you have jank,\nit\u2019s because there is a simple bug causing more of the UI to be\nrebuilt each frame than required. The Widget rebuild profiler\nhelps you debug and fix performance problems due to these sorts\nof bugs.", "You can view the widget rebuilt counts for the current screen and\nframe in the Flutter plugin for Android Studio and IntelliJ.\nFor details on how to do this, see Show performance data", "You can measure and track your app\u2019s performance by writing\nbenchmark tests. The Flutter Driver library provides support\nfor benchmarking. Using this integration test framework,\nyou can generate metrics to track the following:", "Tracking these benchmarks allows you to be informed when a\nregression is introduced that adversely affects performance.", "For more information, check out Integration testing.", "The following resources provide more information on using\nFlutter\u2019s tools and debugging in Flutter:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/ui-performance", "base_url": "https://docs.flutter.dev/"}, {"title": "Persistence | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//data-and-backend/persistence", "base_url": "https://docs.flutter.dev/"}, {"title": "An introduction to integration testing | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Unit tests and widget tests are handy for testing individual classes,\nfunctions, or widgets. However, they generally don\u2019t test how\nindividual pieces work together as a whole, or capture the performance\nof an application running on a real device. These tasks are performed\nwith integration tests.", "Integration tests are written using the integration_test package, provided\nby the SDK.", "In this recipe, learn how to test a counter app. It demonstrates\nhow to setup integration tests, how to verify specific text is displayed\nby the app, how to tap specific widgets, and how to run integration tests.", "This recipe uses the following steps:", "First, create an app for testing. In this example,\ntest the counter app produced by the flutter create\ncommand. This app allows a user to tap on a button\nto increase a counter.", "Next, use the integration_test and flutter_test packages\nto write integration tests. Add these dependencies to the dev_dependencies\nsection of the app\u2019s pubspec.yaml file.", "Create a new directory, integration_test, with an empty app_test.dart file:", "Now you can write tests. This involves three steps:", "The process of running the integration tests varies depending on the platform\nyou are testing against. You can test against a mobile platform or the web.", "To test on a real iOS / Android device, first connect the device and run the\nfollowing command from the root of the project:", "Or, you can specify the directory to run all integration tests:", "This command runs the app and integration tests on the target device. For more\ninformation, see the Integration testing page.", "To get started testing in a web browser, Download ChromeDriver.", "Next, create a new directory named test_driver containing a new file\nnamed integration_test.dart:", "Launch chromedriver as follows:", "From the root of the project, run the following command:", "For a headless testing experience, you can also run flutter drive \nwith web-server as the target device identifier as follows:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/testing/integration/introduction", "base_url": "https://docs.flutter.dev/"}, {"title": "Load sequence, performance, and memory | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page describes the breakdown of the steps involved\nto show a Flutter UI. Knowing this, you can make better,\nmore informed decisions about when to pre-warm the Flutter engine,\nwhich operations are possible at which stage,\nand the latency and memory costs of those operations.", "Android and iOS apps (the two supported platforms for\nintegrating into existing apps), full Flutter apps,\nand add-to-app patterns have a similar sequence of\nconceptual loading steps when displaying the Flutter UI.", "Flutter\u2019s engine runtime and your application\u2019s compiled\nDart code are both bundled as shared libraries on Android\nand iOS. The first step of loading Flutter is to find those\nresources in your .apk/.ipa/.app (along with other Flutter\nassets such as images, fonts, and JIT code, if applicable).", "This happens when you construct a FlutterEngine for the\nfirst time on both Android\nand iOS APIs.", "After it\u2019s found, the engine\u2019s shared libraries are memory loaded\nonce per process.", "On Android, this also happens when the\nFlutterEngine is constructed because the\nJNI connectors need to reference the Flutter C++ library.\nOn iOS, this happens when the\nFlutterEngine is first run,\nsuch as by running runWithEntrypoint:.", "The Dart runtime is responsible for managing Dart memory and\nconcurrency for your Dart code. In JIT mode,\nit\u2019s additionally responsible for compiling\nthe Dart source code into machine code during runtime.", "A single Dart runtime exists per application session on\nAndroid and iOS.", "A one-time Dart VM start is done when constructing the\nFlutterEngine for the first time on\nAndroid and when running a Dart entrypoint\nfor the first time on iOS.", "At this point, your Dart code\u2019s snapshot\nis also loaded into memory from your application\u2019s files.", "This is a generic process that also occurs if you used the\nDart SDK directly, without the Flutter engine.", "The Dart VM never shuts down after it\u2019s started.", "After the Dart runtime is initialized,\nthe Flutter engine\u2019s usage of the Dart\nruntime is the next step.", "This is done by starting a Dart Isolate in the Dart runtime.\nThe isolate is Dart\u2019s container for memory and threads.\nA number of auxiliary threads on the host platform are\nalso created at this point to support the isolate, such\nas a thread for offloading GPU handling and another for image decoding.", "One isolate exists per FlutterEngine instance, and multiple isolates\ncan be hosted by the same Dart VM.", "On Android, this happens when you call\nDartExecutor.executeDartEntrypoint()\non a FlutterEngine instance.", "On iOS, this happens when you call runWithEntrypoint:\non a FlutterEngine.", "At this point, your Dart code\u2019s selected entrypoint\n(the main() function of your Dart library\u2019s main.dart file,\nby default) is executed. If you called the\nFlutter function runApp() in your main() function,\nthen your Flutter app or your library\u2019s widget tree is also created\nand built. If you need to prevent certain functionalities from executing\nin your Flutter code, then the AppLifecycleState.detached\nenum value indicates that the FlutterEngine isn\u2019t attached\nto any UI components such as a FlutterViewController\non iOS or a FlutterActivity on Android.", "A standard, full Flutter app moves to reach this state as\nsoon as the app is launched.", "In an add-to-app scenario,\nthis happens when you attach a FlutterEngine\nto a UI component such as by calling startActivity()\nwith an Intent built using FlutterActivity.withCachedEngine()\non Android. Or, by presenting a FlutterViewController\ninitialized by using initWithEngine: nibName: bundle:\non iOS.", "This is also the case if a Flutter UI component was launched without\npre-warming a FlutterEngine such as with\nFlutterActivity.createDefaultIntent() on Android,\nor with FlutterViewController initWithProject: nibName: bundle:\non iOS. An implicit FlutterEngine is created in these cases.", "Behind the scene, both platform\u2019s UI components provide the\nFlutterEngine with a rendering surface such as a\nSurface on Android or a CAEAGLLayer or CAMetalLayer\non iOS.", "At this point, the Layer tree generated by your Flutter\nprogram, per frame, is converted into\nOpenGL (or Vulkan or Metal) GPU instructions.", "Showing a Flutter UI has a non-trivial latency cost.\nThis cost can be lessened by starting the Flutter engine\nahead of time.", "The most relevant choice for add-to-app scenarios is for you\nto decide when to pre-load a FlutterEngine\n(that is, to load the Flutter library, start the Dart VM,\nand run entrypoint in an isolate), and what the memory and latency\ncost is of that pre-warm. You also need to know how the pre-warm\naffects the memory and latency cost of rendering a first Flutter\nframe when the UI component is subsequently attached\nto that FlutterEngine.", "As of Flutter v1.10.3, and testing on a low-end 2015 class device\nin release-AOT mode, pre-warming the FlutterEngine costs:", "A Flutter UI can be attached during the pre-warm.\nThe remaining time is joined to the time-to-first-frame latency.", "Memory-wise, a cost sample (variable,\ndepending on the use case) could be:", "Latency-wise,\na cost sample (variable, depending on the use case) could be:", "The FlutterEngine should be pre-warmed late enough to delay the\nmemory consumption needed but early enough to avoid combining the\nFlutter engine start-up time with the first frame latency of\nshowing Flutter.", "The exact timing depends on the app\u2019s structure and heuristics.\nAn example would be to load the Flutter engine in the screen\nbefore the screen is drawn by Flutter.", "Given an engine pre-warm, the first frame cost on UI attach is:", "Memory-wise, the cost is primarily the graphical memory buffer used for\nrendering and is dependent on the screen size.", "Latency-wise, the cost is primarily waiting for the OS callback to provide\nFlutter with a rendering surface and compiling the remaining shader programs\nthat are not pre-emptively predictable. This is a one-time cost.", "When the Flutter UI component is released, the UI-related memory is freed.\nThis doesn\u2019t affect the Flutter state, which lives in the FlutterEngine\n(unless the FlutterEngine is also released).", "For performance details on creating more than one FlutterEngine,\nsee multiple Flutters.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/performance", "base_url": "https://docs.flutter.dev/"}, {"title": "Animate a page route transition | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "A design language, such as Material, defines standard behaviors when\ntransitioning between routes (or screens). Sometimes, though, a custom\ntransition between screens can make an app more unique. To help,\nPageRouteBuilder provides an Animation object.\nThis Animation can be used with Tween and\nCurve objects to customize the transition animation.\nThis recipe shows how to transition between\nroutes by animating the new route into view from\nthe bottom of the screen.", "To create a custom page route transition, this recipe uses the following steps:", "To start, use a PageRouteBuilder to create a Route.\nPageRouteBuilder has two callbacks, one to build the content of the route\n(pageBuilder), and one to build the route\u2019s transition (transitionsBuilder).", "info Note:\n  The child parameter in transitionsBuilder is the widget returned from\n  pageBuilder. The pageBuilder function is only called the first time the\n  route is built. The framework can avoid extra work because child stays the\n  same throughout the transition.", "The following example creates two routes: a home route with a \u201cGo!\u201d button, and\na second route titled \u201cPage 2\u201d.", "To make the new page animate in from the bottom, it should animate from\nOffset(0,1) to Offset(0, 0) (usually defined using the Offset.zero\nconstructor). In this case, the Offset is a 2D vector for the\n\u2018FractionalTranslation\u2019 widget.\nSetting the dy argument to 1 represents a vertical translation one\nfull height of the page.", "The transitionsBuilder callback has an animation parameter. It\u2019s an\nAnimation<double> that produces values between 0 and 1. Convert the\nAnimation into an Animation using a Tween:", "Flutter has a set of widgets extending AnimatedWidget\nthat rebuild themselves when the value of the animation changes. For instance,\nSlideTransition takes an Animation<Offset> and translates its child (using a\nFractionalTranslation widget) whenever the value of the animation changes.", "AnimatedWidget Return a SlideTransition\nwith the Animation<Offset> and the child widget:", "Flutter provides a selection of easing curves that\nadjust the rate of the animation over time.\nThe Curves class\nprovides a predefined set of commonly used curves.\nFor example, Curves.easeOut\nmakes the animation start quickly and end slowly.", "To use a Curve, create a new CurveTween\nand pass it a Curve:", "This new Tween still produces values from 0 to 1. In the next step, it will be\ncombined the Tween<Offset> from step 2.", "To combine the tweens,\nuse chain():", "Then use this tween by passing it to animation.drive(). This creates a new\nAnimation<Offset> that can be given to the SlideTransition widget:", "This new Tween (or Animatable) produces Offset values by first evaluating the\nCurveTween, then evaluating the Tween<Offset>. When the animation runs, the\nvalues are computed in this order:", "Another way to create an Animation<Offset> with an easing curve is to use a\nCurvedAnimation:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/animation/page-route-animation", "base_url": "https://docs.flutter.dev/"}, {"title": "Store key-value data on disk | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "If you have a relatively small collection of key-values\nto save, you can use the shared_preferences plugin.", "Normally,\nyou would have to write native platform integrations for storing\ndata on both iOS and Android. Fortunately,\nthe shared_preferences plugin can be used to persist\nkey-value data on disk. The shared preferences plugin\nwraps NSUserDefaults on iOS and SharedPreferences on Android,\nproviding a persistent store for simple data.", "This recipe uses the following steps:", "info Note:\n  To learn more, watch this short Package of the Week video on the shared_preferences package:", "Before starting, add the shared_preferences package as a dependency.", "To add the shared_preferences package as a dependency,\nrun flutter pub add:", "To persist data, use the setter methods provided by the\nSharedPreferences class. Setter methods are available for\nvarious primitive types, such as setInt, setBool, and setString.", "Setter methods do two things: First, synchronously update the\nkey-value pair in-memory. Then, persist the data to disk.", "To read data, use the appropriate getter method provided by the\nSharedPreferences class. For each setter there is a corresponding getter.\nFor example, you can use the getInt, getBool, and getString methods.", "To delete data, use the remove() method.", "Although key-value storage is easy and convenient to use,\nit has limitations:", "For more information about shared preferences on Android,\nsee the shared preferences documentation\non the Android developers website.", "It\u2019s a good idea to test code that persists data using\nshared_preferences. You can do this by mocking out the\nMethodChannel used by the shared_preferences library.", "Populate SharedPreferences with initial values in your tests\nby running the following code in a setupAll() method in\nyour test files:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/persistence/key-value", "base_url": "https://docs.flutter.dev/"}, {"title": "Work with long lists | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The standard ListView constructor works well\nfor small lists. To work with lists that contain\na large number of items, it\u2019s best to use the\nListView.builder constructor.", "In contrast to the default ListView constructor, which requires\ncreating all items at once, the ListView.builder() constructor\ncreates items as they\u2019re scrolled onto the screen.", "First, you need a data source. For example, your data source\nmight be a list of messages, search results, or products in a store.\nMost of the time, this data comes from the internet or a database.", "For this example, generate a list of 10,000 Strings using the\nList.generate constructor.", "To display the list of strings, render each String as a widget\nusing ListView.builder().\nIn this example, display each String on its own line.", "To specify each item\u2019s extent, you can use either itemExtent or prototypeItem.\nSpecifying either is more efficient than letting the children determine their own extent\nbecause the scrolling machinery can make use of the foreknowledge of the children\u2019s\nextent to save work, for example when the scroll position changes drastically.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/long-lists", "base_url": "https://docs.flutter.dev/"}, {"title": "Fade a widget in and out | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "UI developers often need to show and hide elements on screen.\nHowever, quickly popping elements on and off the screen can\nfeel jarring to end users. Instead,\nfade elements in and out with an opacity animation to create\na smooth experience.", "The AnimatedOpacity widget makes it easy to perform opacity\nanimations. This recipe uses the following steps:", "First, create something to fade in and out. For this example,\ndraw a green box on screen.", "Now that you have a green box to animate,\nyou need a way to know whether the box should be visible.\nTo accomplish this, use a StatefulWidget.", "A StatefulWidget is a class that creates a State object.\nThe State object holds some data about the app and provides a way to\nupdate that data. When updating the data,\nyou can also ask Flutter to rebuild the UI with those changes.", "In this case, you have one piece of data:\na boolean representing whether the button is visible.", "To construct a StatefulWidget, create two classes: A\nStatefulWidget and a corresponding State class.\nPro tip: The Flutter plugins for Android Studio and VSCode include\nthe stful snippet to quickly generate this code.", "Now that you have some data to determine whether the green box\nshould be visible, you need a way to update that data.\nIn this example, if the box is visible, hide it.\nIf the box is hidden, show it.", "To handle this, display a button. When a user presses the button,\nflip the boolean from true to false, or false to true.\nMake this change using setState(),\nwhich is a method on the State class.\nThis tells Flutter to rebuild the widget.", "For more information on working with user input,\nsee the Gestures section of the cookbook.", "You have a green box on screen and a button to toggle the visibility\nto true or false. How to fade the box in and out? With an\nAnimatedOpacity widget.", "The AnimatedOpacity widget requires three arguments:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/animation/opacity-animation", "base_url": "https://docs.flutter.dev/"}, {"title": "Deep linking | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter supports deep linking on iOS, Android, and web browsers.\nOpening a URL displays that screen in your app. With the following\nsteps, you can launch and display routes by using named routes\n(either with the routes parameter or\nonGenerateRoute), or by\nusing the Router widget.", "info Note:\n  Named routes are no longer recommended for most\n  applications. For more information, see\n  Limitations in the navigation overview page.", "If you\u2019re running the app in a web browser, there\u2019s no additional setup\nrequired. Route paths are handled in the same way as an iOS or Android deep\nlink. By default, web apps read the deep link path from the url fragment using\nthe pattern: /#/path/to/app/screen, but this can be changed by\nconfiguring the URL strategy for your app.", "If you are a visual learner, check out the following video:", "Deep linking in Flutter", "To get started, see our cookbooks for Android and iOS:", "If you have written a plugin to handle deep links, as described in\nDeep Links and Flutter applications\n(a free article on Medium),\nit will continue to work until you opt-in to this behavior by adding\nFlutterDeepLinkingEnabled to Info.plist or\nflutter_deeplinking_enabled to AndroidManifest.xml, respectively.", "The behavior varies slightly based on the platform and whether the app is\nlaunched and running.", "When using the Router widget,\nyour app has the ability to replace the\ncurrent set of pages when a new deep link\nis opened while the app is running.", "Learning Flutter\u2019s new navigation and routing system provides an \nintroduction to the Router system.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/navigation/deep-linking", "base_url": "https://docs.flutter.dev/"}, {"title": "Inside Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This document describes the inner workings of the Flutter toolkit that make\nFlutter\u2019s API possible. Because Flutter widgets are built using aggressive\ncomposition, user interfaces built with Flutter have a large number of\nwidgets.  To support this workload, Flutter uses sublinear algorithms for\nlayout and building widgets as well as data structures that make tree\nsurgery efficient and that have a number of constant-factor optimizations.\nWith some additional details, this design also makes it easy for developers\nto create infinite scrolling lists using callbacks that build exactly those\nwidgets that are visible to the user.", "One of the most distinctive aspects of Flutter is its aggressive\ncomposability. Widgets are built by composing other widgets,\nwhich are themselves built out of progressively more basic widgets.\nFor example, Padding is a widget rather than a property of other widgets.\nAs a result, user interfaces built with Flutter consist of many,\nmany widgets.", "The widget building recursion bottoms out in RenderObjectWidgets,\nwhich are widgets that create nodes in the underlying render tree.\nThe render tree is a data structure that stores the geometry of the user\ninterface, which is computed during layout and used during painting and\nhit testing. Most Flutter developers do not author render objects directly\nbut instead manipulate the render tree using widgets.", "In order to support aggressive composability at the widget layer,\nFlutter uses a number of efficient algorithms and optimizations at\nboth the widget and render tree layers, which are described in the\nfollowing subsections.", "With a large number of widgets and render objects, the key to good\nperformance is efficient algorithms. Of paramount importance is the\nperformance of layout, which is the algorithm that determines the\ngeometry (for example, the size and position) of the render objects.\nSome other toolkits use layout algorithms that are O(N\u00b2) or worse\n(for example, fixed-point iteration in some constraint domain).\nFlutter aims for linear performance for initial layout, and sublinear\nlayout performance in the common case of subsequently updating an\nexisting layout. Typically, the amount of time spent in layout should\nscale more slowly than the number of render objects.", "Flutter performs one layout per frame, and the layout algorithm works\nin a single pass. Constraints are passed down the tree by parent\nobjects calling the layout method on each of their children.\nThe children recursively perform their own layout and then return\ngeometry up the tree by returning from their layout method. Importantly,\nonce a render object has returned from its layout method, that render\nobject will not be visited again1\nuntil the layout for the next frame. This approach combines what might\notherwise be separate measure and layout passes into a single pass and,\nas a result, each render object is visited at most\ntwice2 during layout: once on the way\ndown the tree, and once on the way up the tree.", "Flutter has several specializations of this general protocol.\nThe most common specialization is RenderBox, which operates in\ntwo-dimensional, cartesian coordinates. In box layout, the constraints\nare a min and max width and a min and max height. During layout,\nthe child determines its geometry by choosing a size within these bounds.\nAfter the child returns from layout, the parent decides the child\u2019s\nposition in the parent\u2019s coordinate system3.\nNote that the child\u2019s layout cannot depend on its position,\nas the position is not determined until after the child\nreturns from the layout. As a result, the parent is free to reposition\nthe child without needing to recompute its layout.", "More generally, during layout, the only information that flows from\nparent to child are the constraints and the only information that\nflows from child to parent is the geometry. These invariants can reduce\nthe amount of work required during layout:", "If the child has not marked its own layout as dirty, the child can\nreturn immediately from layout, cutting off the walk, as long as the\nparent gives the child the same constraints as the child received\nduring the previous layout.", "Whenever a parent calls a child\u2019s layout method, the parent indicates\nwhether it uses the size information returned from the child. If,\nas often happens, the parent does not use the size information,\nthen the parent need not recompute its layout if the child selects\na new size because the parent is guaranteed that the new size will\nconform to the existing constraints.", "Tight constraints are those that can be satisfied by exactly one\nvalid geometry. For example, if the min and max widths are equal to\neach other and the min and max heights are equal to each other,\nthe only size that satisfies those constraints is one with that\nwidth and height. If the parent provides tight constraints,\nthen the parent need not recompute its layout whenever the child\nrecomputes its layout, even if the parent uses the child\u2019s size\nin its layout, because the child cannot change size without new\nconstraints from its parent.", "A render object can declare that it uses the constraints provided\nby the parent only to determine its geometry. Such a declaration\ninforms the framework that the parent of that render object does\nnot need to recompute its layout when the child recomputes its layout\neven if the constraints are not tight and even if the parent\u2019s\nlayout depends on the child\u2019s size, because the child cannot change\nsize without new constraints from its parent.", "As a result of these optimizations, when the render object tree contains\ndirty nodes, only those nodes and a limited part of the subtree around\nthem are visited during layout.", "Similar to the layout algorithm, Flutter\u2019s widget building algorithm\nis sublinear. After being built, the widgets are held by the element\ntree, which retains the logical structure of the user interface.\nThe element tree is necessary because the widgets themselves are\nimmutable, which means (among other things), they cannot remember their\nparent or child relationships with other widgets. The element tree also\nholds the state objects associated with stateful widgets.", "In response to user input (or other stimuli), an element can become dirty,\nfor example if the developer calls setState() on the associated state\nobject. The framework keeps a list of dirty elements and jumps directly\nto them during the build phase, skipping over clean elements. During\nthe build phase, information flows unidirectionally down the element\ntree, which means each element is visited at most once during the build\nphase.  Once cleaned, an element cannot become dirty again because,\nby induction, all its ancestor elements are also\nclean4.", "Because widgets are immutable, if an element has not marked itself as\ndirty, the element can return immediately from build, cutting off the walk,\nif the parent rebuilds the element with an identical widget. Moreover,\nthe element need only compare the object identity of the two widget\nreferences in order to establish that the new widget is the same as\nthe old widget. Developers exploit this optimization to implement the\nreprojection pattern, in which a widget includes a prebuilt child\nwidget stored as a member variable in its build.", "During build, Flutter also avoids walking the parent chain using\nInheritedWidgets. If widgets commonly walked their parent chain,\nfor example to determine the current theme color, the build phase\nwould become O(N\u00b2) in the depth of the tree, which can be quite\nlarge due to aggressive composition. To avoid these parent walks,\nthe framework pushes information down the element tree by maintaining\na hash table of InheritedWidgets at each element. Typically, many\nelements will reference the same hash table, which changes only at\nelements that introduce a new InheritedWidget.", "Contrary to popular belief, Flutter does not employ a tree-diffing\nalgorithm. Instead, the framework decides whether to reuse elements by\nexamining the child list for each element independently using an O(N)\nalgorithm. The child list reconciliation algorithm optimizes for the\nfollowing cases:", "The general approach is to match up the beginning and end of both child\nlists by comparing the runtime type and key of each widget,\npotentially finding a non-empty range in the middle of each list\nthat contains all the unmatched children. The framework then places\nthe children in the range in the old child list into a hash table\nbased on their keys. Next, the framework walks the range in the new\nchild list and queries the hash table by key for matches. Unmatched\nchildren are discarded and rebuilt from scratch whereas matched children\nare rebuilt with their new widgets.", "Reusing elements is important for performance because elements own\ntwo critical pieces of data: the state for stateful widgets and the\nunderlying render objects. When the framework is able to reuse an element,\nthe state for that logical part of the user interface is preserved\nand the layout information computed previously can be reused,\noften avoiding entire subtree walks. In fact, reusing elements is\nso valuable that Flutter supports non-local tree mutations that\npreserve state and layout information.", "Developers can perform a non-local tree mutation by associating a GlobalKey\nwith one of their widgets. Each global key is unique throughout the\nentire application and is registered with a thread-specific hash table.\nDuring the build phase, the developer can move a widget with a global\nkey to an arbitrary location in the element tree. Rather than building\na fresh element at that location, the framework will check the hash\ntable and reparent the existing element from its previous location to\nits new location, preserving the entire subtree.", "The render objects in the reparented subtree are able to preserve\ntheir layout information because the layout constraints are the only\ninformation that flows from parent to child in the render tree.\nThe new parent is marked dirty for layout because its child list has\nchanged, but if the new parent passes the child the same layout\nconstraints the child received from its old parent, the child can\nreturn immediately from layout, cutting off the walk.", "Global keys and non-local tree mutations are used extensively by\ndevelopers to achieve effects such as hero transitions and navigation.", "In addition to these algorithmic optimizations, achieving aggressive\ncomposability also relies on several important constant-factor\noptimizations. These optimizations are most important at the leaves of\nthe major algorithms discussed above.", "Child-model agnostic. Unlike most toolkits, which use child lists,\nFlutter\u2019s render tree does not commit to a specific child model.\nFor example, the RenderBox class has an abstract visitChildren()\nmethod rather than a concrete firstChild and nextSibling interface.\nMany subclasses support only a single child, held directly as a member\nvariable, rather than a list of children. For example, RenderPadding\nsupports only a single child and, as a result, has a simpler layout\nmethod that takes less time to execute.", "Visual render tree, logical widget tree. In Flutter, the render\ntree operates in a device-independent, visual coordinate system,\nwhich means smaller values in the x coordinate are always towards\nthe left, even if the current reading direction is right-to-left.\nThe widget tree typically operates in logical coordinates, meaning\nwith start and end values whose visual interpretation depends\non the reading direction. The transformation from logical to visual\ncoordinates is done in the handoff between the widget tree and the\nrender tree. This approach is more efficient because layout and\npainting calculations in the render tree happen more often than the\nwidget-to-render tree handoff and can avoid repeated coordinate conversions.", "Text handled by a specialized render object. The vast majority\nof render objects are ignorant of the complexities of text. Instead,\ntext is handled by a specialized render object, RenderParagraph,\nwhich is a leaf in the render tree. Rather than subclassing a\ntext-aware render object, developers incorporate text into their\nuser interface using composition. This pattern means RenderParagraph\ncan avoid recomputing its text layout as long as its parent supplies\nthe same layout constraints, which is common, even during tree surgery.", "Observable objects. Flutter uses both the model-observation and\nthe reactive paradigms. Obviously, the reactive paradigm is dominant,\nbut Flutter uses observable model objects for some leaf data structures.\nFor example, Animations notify an observer list when their value changes.\nFlutter hands off these observable objects from the widget tree to the\nrender tree, which observes them directly and invalidates only the\nappropriate stage of the pipeline when they change. For example,\na change to an Animation<Color> might trigger only the paint phase\nrather than both the build and paint phases.", "Taken together and summed over the large trees created by aggressive\ncomposition, these optimizations have a substantial effect on performance.", "The RenderObject and Element (Widget) trees in Flutter are isomorphic\n(strictly speaking, the RenderObject tree is a subset of the Element\ntree). An obvious simplification would be to combine these trees into\none tree. However, in practice there are a number of benefits to having\nthese trees be separate:", "Performance. When the layout changes, only the relevant parts of\nthe layout tree need to be walked. Due to composition, the element\ntree frequently has many additional nodes that would have to be skipped.", "Clarity. The clearer separation of concerns allows the widget\nprotocol and the render object protocol to each be specialized to\ntheir specific needs, simplifying the API surface and thus lowering\nthe risk of bugs and the testing burden.", "Type safety. The render object tree can be more type safe since it\ncan guarantee at runtime that children will be of the appropriate type\n(each coordinate system, e.g. has its own type of render object).\nComposition widgets can be agnostic about the coordinate system used\nduring layout (for example, the same widget exposing a part of the app\nmodel could be used in both a box layout and a sliver layout), and thus\nin the element tree, verifying the type of render objects would require\na tree walk.", "Infinite scrolling lists are notoriously difficult for toolkits.\nFlutter supports infinite scrolling lists with a simple interface\nbased on the builder pattern, in which a ListView uses a callback\nto build widgets on demand as they become visible to the user during\nscrolling. Supporting this feature requires viewport-aware layout\nand building widgets on demand.", "Like most things in Flutter, scrollable widgets are built using\ncomposition. The outside of a scrollable widget is a Viewport,\nwhich is a box that is \u201cbigger on the inside,\u201d meaning its children\ncan extend beyond the bounds of the viewport and can be scrolled into\nview. However, rather than having RenderBox children, a viewport has\nRenderSliver children, known as slivers, which have a viewport-aware\nlayout protocol.", "The sliver layout protocol matches the structure of the box layout\nprotocol in that parents pass constraints down to their children and\nreceive geometry in return. However, the constraint and geometry data\ndiffers between the two protocols. In the sliver protocol, children\nare given information about the viewport, including the amount of\nvisible space remaining. The geometry data they return enables a\nvariety of scroll-linked effects, including collapsible headers and\nparallax.", "Different slivers fill the space available in the viewport in different\nways. For example, a sliver that produces a linear list of children lays\nout  each child in order until the sliver either runs out of children or\nruns out of space. Similarly, a sliver that produces a two-dimensional\ngrid of children fills only the portion of its grid that is visible.\nBecause they are aware of how much space is visible, slivers can produce\na finite number of children even if they have the potential to produce\nan unbounded number of children.", "Slivers can be composed to create bespoke scrollable layouts and effects.\nFor example, a single viewport can have a collapsible header followed\nby a linear list and then a grid. All three slivers will cooperate through\nthe sliver layout protocol to produce only those children that are actually\nvisible through the viewport, regardless of whether those children belong\nto the header, the list, or the grid6.", "If Flutter had a strict build-then-layout-then-paint pipeline,\nthe foregoing would be insufficient to implement an infinite scrolling\nlist because the information about how much space is visible through\nthe viewport is available only during the layout phase. Without\nadditional machinery, the layout phase is too late to build the\nwidgets necessary to fill the space. Flutter solves this problem\nby interleaving the build and layout phases of the pipeline. At any\npoint in the layout phase, the framework can start building new\nwidgets on demand as long as those widgets are descendants of the\nrender object currently performing layout.", "Interleaving build and layout is possible only because of the strict\ncontrols on information propagation in the build and layout algorithms.\nSpecifically, during the build phase, information can propagate only\ndown the tree. When a render object is performing layout, the layout\nwalk has not visited the subtree below that render object, which means\nwrites generated by building in that subtree cannot invalidate any\ninformation that has entered the layout calculation thus far. Similarly,\nonce layout has returned from a render object, that render object will\nnever be visited again during this layout, which means any writes\ngenerated by subsequent layout calculations cannot invalidate the\ninformation used to build the render object\u2019s subtree.", "Additionally, linear reconciliation and tree surgery are essential\nfor efficiently updating elements during scrolling and for modifying\nthe render tree when elements are scrolled into and out of view at\nthe edge of the viewport.", "Being fast only matters if the framework can actually be used effectively.\nTo guide Flutter\u2019s API design towards greater usability, Flutter has been\nrepeatedly tested in extensive UX studies with developers. These studies\nsometimes confirmed pre-existing design decisions, sometimes helped guide\nthe prioritization of features, and sometimes changed the direction of the\nAPI design. For instance, Flutter\u2019s APIs are heavily documented; UX\nstudies confirmed the value of such documentation, but also highlighted\nthe need specifically for sample code and illustrative diagrams.", "This section discusses some of the decisions made in Flutter\u2019s API design\nin aid of usability.", "The base class for nodes in Flutter\u2019s Widget, Element, and RenderObject\ntrees does not define a child model. This allows each node to be\nspecialized for the child model that is applicable to that node.", "Most Widget objects have a single child Widget, and therefore only expose\na single child parameter. Some widgets support an arbitrary number of\nchildren, and expose a children parameter that takes a list.\nSome widgets don\u2019t have any children at all and reserve no memory,\nand have no parameters for them. Similarly, RenderObjects expose APIs\nspecific to their child model. RenderImage is a leaf node, and has no\nconcept of children. RenderPadding takes a single child, so it has storage\nfor a single pointer to a single child. RenderFlex takes an arbitrary\nnumber of children and manages it as a linked list.", "In some rare cases, more complicated child models are used. The\nRenderTable render object\u2019s constructor takes an array of arrays of\nchildren, the class exposes getters and setters that control the number\nof rows and columns, and there are specific methods to replace\nindividual children by x,y coordinate, to add a row, to provide a\nnew array of arrays of children, and to replace the entire child list\nwith a single array and a column count. In the implementation,\nthe object does not use a linked list like most render objects but\ninstead uses an indexable array.", "The Chip widgets and InputDecoration objects have fields that match\nthe slots that exist on the relevant controls. Where a one-size-fits-all\nchild model would force semantics to be layered on top of a list of\nchildren, for example, defining the first child to be the prefix value\nand the second to be the suffix, the dedicated child model allows for\ndedicated named properties to be used instead.", "This flexibility allows each node in these trees to be manipulated in\nthe way most idiomatic for its role. It\u2019s rare to want to insert a cell\nin a table, causing all the other cells to wrap around; similarly,\nit\u2019s rare to want to remove a child from a flex row by index instead\nof by reference.", "The RenderParagraph object is the most extreme case: it has a child of\nan entirely different type, TextSpan. At the RenderParagraph boundary,\nthe RenderObject tree transitions into being a TextSpan tree.", "The overall approach of specializing APIs to meet the developer\u2019s\nexpectations is applied to more than just child models.", "Some rather trivial widgets exist specifically so that developers\nwill find them when looking for a solution to a problem. Adding a\nspace to a row or column is easily done once one knows how, using\nthe Expanded widget and a zero-sized SizedBox child, but discovering\nthat pattern is unnecessary because searching for space\nuncovers the Spacer widget, which uses Expanded and SizedBox directly\nto achieve the effect.", "Similarly, hiding a widget subtree is easily done by not including the\nwidget subtree in the build at all. However, developers typically expect\nthere to be a widget to do this, and so the Visibility widget exists\nto wrap this pattern in a trivial reusable widget.", "UI frameworks tend to have many properties, such that a developer is\nrarely able to remember the semantic meaning of each constructor\nargument of each class. As Flutter uses the reactive paradigm,\nit is common for build methods in Flutter to have many calls to\nconstructors. By leveraging Dart\u2019s support for named arguments,\nFlutter\u2019s API is able to keep such build methods clear and understandable.", "This pattern is extended to any method with multiple arguments,\nand in particular is extended to any boolean argument, so that isolated\ntrue or false literals in method calls are always self-documenting.\nFurthermore, to avoid confusion commonly caused by double negatives\nin APIs, boolean arguments and properties are always named in the\npositive form (for example, enabled: true rather than disabled: false).", "A technique used in a number of places in the Flutter framework is to\ndefine the API such that error conditions don\u2019t exist. This removes\nentire classes of errors from consideration.", "For example, interpolation functions allow one or both ends of the\ninterpolation to be null, instead of defining that as an error case:\ninterpolating between two null values is always null, and interpolating\nfrom a null value or to a null value is the equivalent of interpolating\nto the zero analog for the given type. This means that developers\nwho accidentally pass null to an interpolation function will not hit\nan error case, but will instead get a reasonable result.", "A more subtle example is in the Flex layout algorithm. The concept of\nthis layout is that the space given to the flex render object is\ndivided among its children, so the size of the flex should be the\nentirety of the available space. In the original design, providing\ninfinite space would fail: it would imply that the flex should be\ninfinitely sized, a useless layout configuration. Instead, the API\nwas adjusted so that when infinite space is allocated to the flex\nrender object, the render object sizes itself to fit the desired\nsize of the children, reducing the possible number of error cases.", "The approach is also used to avoid having constructors that allow\ninconsistent data to be created. For instance, the PointerDownEvent\nconstructor does not allow the down property of PointerEvent to\nbe set to false (a situation that would be self-contradictory);\ninstead, the constructor does not have a parameter for the down\nfield and always sets it to true.", "In general, the approach is to define valid interpretations for all\nvalues in the input domain. The simplest example is the Color constructor.\nInstead of taking four integers, one for red, one for green,\none for blue, and one for alpha, each of which could be out of range,\nthe default constructor takes a single integer value, and defines\nthe meaning of each bit (for example, the bottom eight bits define the\nred component), so that any input value is a valid color value.", "A more elaborate example is the paintImage() function. This function\ntakes eleven arguments, some with quite wide input domains, but they\nhave been carefully designed to be mostly orthogonal to each other,\nsuch that there are very few invalid combinations.", "Not all error conditions can be designed out. For those that remain,\nin debug builds, Flutter generally attempts to catch the errors very\nearly and immediately reports them. Asserts are widely used.\nConstructor arguments are sanity checked in detail. Lifecycles are\nmonitored and when inconsistencies are detected they immediately\ncause an exception to be thrown.", "In some cases, this is taken to extremes: for example, when running\nunit tests, regardless of what else the test is doing, every RenderBox\nsubclass that is laid out aggressively inspects whether its intrinsic\nsizing methods fulfill the intrinsic sizing contract. This helps catch\nerrors in APIs that might otherwise not be exercised.", "When exceptions are thrown, they include as much information as\nis available. Some of Flutter\u2019s error messages proactively probe the\nassociated stack trace to determine the most likely location of the\nactual bug. Others walk the relevant trees to determine the source\nof bad data. The most common errors include detailed instructions\nincluding in some cases sample code for avoiding the error, or links\nto further documentation.", "Mutable tree-based APIs suffer from a dichotomous access pattern:\ncreating the tree\u2019s original state typically uses a very different\nset of operations than subsequent updates. Flutter\u2019s rendering layer\nuses this paradigm, as it is an effective way to maintain a persistent tree,\nwhich is key for efficient layout and painting. However, it means\nthat direct interaction with the rendering layer is awkward at best\nand bug-prone at worst.", "Flutter\u2019s widget layer introduces a composition mechanism using the\nreactive paradigm7 to manipulate the\nunderlying rendering tree.\nThis API abstracts out the tree manipulation by combining the tree\ncreation and tree mutation steps into a single tree description (build)\nstep, where, after each change to the system state, the new configuration\nof the user interface is described by the developer and the framework\ncomputes the series of tree mutations necessary to reflect this new\nconfiguration.", "Since Flutter\u2019s framework encourages developers to describe the interface\nconfiguration matching the current application state, a mechanism exists\nto implicitly animate between these configurations.", "For example, suppose that in state S1 the interface consists\nof a circle, but in state S2 it consists of a square.\nWithout an animation mechanism, the state change would have a jarring\ninterface change. An implicit animation allows the circle to be smoothly\nsquared over several frames.", "Each feature that can be implicitly animated has a stateful widget that\nkeeps a record of the current value of the input, and begins an animation\nsequence whenever the input value changes, transitioning from the current\nvalue to the new value over a specified duration.", "This is implemented using lerp (linear interpolation) functions using\nimmutable objects. Each state (circle and square, in this case)\nis represented as an immutable object that is configured with\nappropriate settings (color, stroke width, etc) and knows how to paint\nitself. When it is time to draw the intermediate steps during the animation,\nthe start and end values are passed to the appropriate lerp function\nalong with a t value representing the point along the animation,\nwhere 0.0 represents the start and 1.0 represents the\nend8,\nand the function returns a third immutable object representing the\nintermediate stage.", "For the circle-to-square transition, the lerp function would return\nan object representing a \u201crounded square\u201d with a radius described as\na fraction derived from the t value, a color interpolated using the\nlerp function for colors, and a stroke width interpolated using the\nlerp function for doubles. That object, which implements the\nsame interface as circles and squares, would then be able to paint\nitself when requested to.", "This technique allows the state machinery, the mapping of states to\nconfigurations, the animation machinery, the interpolation machinery,\nand the specific logic relating to how to paint each frame to be\nentirely separated from each other.", "This approach is broadly applicable. In Flutter, basic types like\nColor and Shape can be interpolated, but so can much more elaborate\ntypes such as Decoration, TextStyle, or Theme. These are\ntypically constructed from components that can themselves be interpolated,\nand interpolating the more complicated objects is often as simple as\nrecursively interpolating all the values that describe the complicated\nobjects.", "Some interpolatable objects are defined by class hierarchies. For example,\nshapes are represented by the ShapeBorder interface, and there exists a\nvariety of shapes, including BeveledRectangleBorder, BoxBorder,\nCircleBorder, RoundedRectangleBorder, and StadiumBorder. A single\nlerp function can\u2019t anticipate all possible types,\nand therefore the interface instead defines lerpFrom and lerpTo methods,\nwhich the static lerp method defers to. When told to interpolate from\na shape A to a shape B, first B is asked if it can lerpFrom A, then,\nif it cannot, A is instead asked if it can lerpTo B. (If neither is\npossible, then the function returns A from values of t less than 0.5,\nand returns B otherwise.)", "This allows the class hierarchy to be arbitrarily extended, with later\nadditions being able to interpolate between previously-known values\nand themselves.", "In some cases, the interpolation itself cannot be described by any of\nthe available classes, and a private class is defined to describe the\nintermediate stage. This is the case, for instance, when interpolating\nbetween a CircleBorder and a RoundedRectangleBorder.", "This mechanism has one further added advantage: it can handle interpolation\nfrom intermediate stages to new values. For example, half-way through\na circle-to-square transition, the shape could be changed once more,\ncausing the animation to need to interpolate to a triangle. So long as\nthe triangle class can lerpFrom the rounded-square intermediate class,\nthe transition can be seamlessly performed.", "Flutter\u2019s slogan, \u201ceverything is a widget,\u201d revolves around building\nuser interfaces by composing widgets that are, in turn, composed of\nprogressively more basic widgets. The result of this aggressive\ncomposition is a large number of widgets that require carefully\ndesigned algorithms and data structures to process efficiently.\nWith some additional design, these data structures also make it\neasy for developers to create infinite scrolling lists that build\nwidgets on demand when they become visible.", "1 For layout, at least. It might be revisited\n  for painting, for building the accessibility tree if necessary,\n  and for hit testing if necessary.", "2 Reality, of course, is a bit more\n  complicated. Some layouts involve intrinsic dimensions or baseline\n  measurements, which do involve an additional walk of the relevant subtree\n  (aggressive caching is used to mitigate the potential for quadratic\n  performance in the worst case). These cases, however, are surprisingly\n  rare. In particular, intrinsic dimensions are not required for the\n  common case of shrink-wrapping.", "3 Technically, the child\u2019s position is not\n  part of its RenderBox geometry and therefore need not actually be\n  calculated during layout. Many render objects implicitly position\n  their single child at 0,0 relative to their own origin, which\n  requires no computation or storage at all. Some render objects\n  avoid computing the position of their children until the last\n  possible moment (for example, during the paint phase), to avoid\n  the computation entirely if they are not subsequently painted.", "4  There exists one exception to this rule.\n  As discussed in the Building widgets on demand\n  section, some widgets can be rebuilt as a result of a change in layout\n  constraints. If a widget marked itself dirty for unrelated reasons in\n  the same frame that it also is affected by a change in layout constraints,\n  it will be updated twice. This redundant build is limited to the\n  widget itself and does not impact its descendants.", "5 A key is an opaque object optionally\n  associated with a widget whose equality operator is used to influence\n  the reconciliation algorithm.", "6  For accessibility, and to give applications\n  a few extra milliseconds between when a widget is built and when it\n  appears on the screen, the viewport creates (but does not paint)\n  widgets for a few hundred pixels before and after the visible widgets.", "7  This approach was first made popular by\n  Facebook\u2019s React library.", "8  In practice, the t value is allowed\n  to extend past the 0.0-1.0 range, and does so for some curves. For\n  example, the \u201celastic\u201d curves overshoot briefly in order to represent\n  a bouncing effect. The interpolation logic typically can extrapolate\n  past the start or end as appropriate. For some types, for example,\n  when interpolating colors, the t value is effectively clamped to\n  the 0.0-1.0 range.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/inside-flutter", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release a Windows desktop app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "One convenient approach to distributing Windows apps\nis the Microsoft Store.\nThis guide provides a step-by-step walkthrough\nof packaging and deploying a Flutter app in this way.", "info Note:\n  You are not required to publish Windows apps through the\n  Microsoft Store, particularly if you prefer more control\n  over the distribution experience or don\u2019t want to deal\n  with the certification process. The Microsoft documentation\n  includes more information about traditional installation\n  approaches, including Windows Installer.", "Before beginning the process of releasing\na Flutter Windows desktop app to the Microsoft Store,\nfirst confirm that it satisfies Microsoft Store Policies.", "Also, you must join the\nMicrosoft Partner Network to be able to submit apps.", "Manage an application\u2019s life cycle in the\nMicrosoft Partner Center.", "First, reserve the application name and\nensure that the required rights to the name exist.\nOnce the name is reserved, the application\nwill be provisioned for services (such as\npush notifications), and you can start adding add-ons.", "Options such as pricing, availability,\nage ratings, and category have to be\nconfigured together with the first submission\nand are automatically retained\nfor the subsequent submissions.", "In order to publish an application to Microsoft Store,\nyou must first package it.\nThe valid formats are .msix, .msixbundle,\n.msixupload, .appx, .appxbundle,\n.appxupload, and .xap.", "Check out MSIX packaging\nto learn about packaging\nFlutter Windows desktop applications.", "Note that each product has a unique identity,\nwhich the Store assigns.", "If the package is being built manually,\nyou have to include its identity details\nmanually during the packaging.\nThe essential information can be retrieved\nfrom the Partner Center using the following instructions:", "After manually packaging the application,\nmanually submit it to the\nMicrosoft Partner Center.\nYou can do this by creating a new submission,\nnavigating to Packages,\nand uploading the created application package.", "In addition to manually creating and deploying the package,\nyou can automate the build, package, versioning,\nand deployment process using CI/CD tooling after having submitted\nthe application to the Microsoft Store for the first time.", "Codemagic CI/CD uses the\nmsix pub package to package\nFlutter Windows desktop applications.", "For Flutter applications, use either the\nCodemagic Workflow Editor\nor codemagic.yaml\nto package the application and deploy it\nto the Microsoft Partner Center.\nAdditional options (such as the list of\ncapabilites and language resources\ncontained in the package)\ncan be configured using this package.", "For publishing, Codemagic uses the\nPartner Center submission API;\nso, Codemagic requires\nassociating the Azure Active Directory\nand Partner Center accounts.", "GitHub Actions can use the\nMicrosoft Dev Store CLI\nto package applications into an MSIX and publish them to the Microsoft Store.\nThe setup-msstore-cli\nGitHub Action installs the cli so that the Action can use it for packaging\nand publishing.", "As packaging the MSIX uses the\nmsix pub package, the project\u2019s pubspec.yaml\nmust contain an appropriate msix_config node.", "You must create an Azure AD directory from the Dev Center with\nglobal administrator permission.", "The GitHub Action requires environment secrets from the partner center.\nAZURE_AD_TENANT_ID, AZURE_AD_ClIENT_ID, and AZURE_AD_CLIENT_SECRET\nare visible on the Dev Center following the instructions for the\nWindows Store Publish Action.\nYou also need the SELLER_ID secret, which can be found in the Dev Center\nunder Account Settings > Organization Profile > Legal Info.", "The application must already be present in the Microsoft Dev Center with at\nleast one complete submission, and msstore init must be run once within\nthe repository before the Action can be performed. Once complete, running\nmsstore package .\nand\nmsstore publish\nin a GitHub Action packages the\napplication into an MSIX and uploads it to a new submission on the dev center.", "An example Action YAML file for continuous deployment can be found\nin the Flutter Gallery.\nThe steps necessary for MSIX publishing are excerpted below:", "For apps published to the Microsoft Store,\nthe version number must be set during the\npackaging process.", "The default version number of the app is 1.0.0.0.", "info Note:\n  Microsoft Store apps are not allowed to have a\n  Version with a revision number other than zero.\n  Therefore, the last number of the version must\n  remain zero for all releases.\n  Ensure that you follow Microsoft\u2019s\n  versioning guidelines.", "For apps not published to the Microsoft Store, you\ncan set the app\u2019s executable\u2019s file and product versions.\nThe executable\u2019s default file version is 1.0.0.1,\nand its default product version is 1.0.0+1. To update these,\nnavigate to the pubspec.yaml file and update the\nfollowing line:", "The build name is three numbers separated by dots,\nfollowed by an optional build number that is separated\nby a +. In the example above, the build name is 1.0.0\nand the build number is 1.", "The build name becomes the first three numbers of the\nfile and product versions, while the build number becomes\nthe fourth number of the file and product versions.", "Both the build name and number can be overridden in\nflutter build windows by specifying --build-name and\n--build-number, respectively.", "info Note:\n  Flutter projects created before Flutter 3.3\n  need to be updated to set the executable\u2019s version\n  information. For more information,\n  refer to the version migration guide.", "To update the icon of a Flutter Windows\ndesktop application before packaging use the\nfollowing instructions:", "When packaging with the msix pub package,\nthe logo path can also be configured inside the pubspec.yaml file.", "To update the application image in the Store listing,\nnavigate to the Store listing step of the submission\nand select Store logos.\nFrom there, you can upload the logo with\nthe size of 300 x 300 pixels.", "All uploaded images are retained for subsequent submissions.", "Before publication to the Microsoft Store,\nfirst validate the application package locally.", "Windows App Certification Kit\nis a tool included in the\nWindows Software Development Kit (SDK).", "To validate the application:", "The report might contain important warnings and information,\neven if the certification passes.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/windows", "base_url": "https://docs.flutter.dev/"}, {"title": "Improving rendering performance | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  To learn how to use the Performance View\n  (part of Flutter DevTools)\n  for debugging performance issues,\n  see Using the Performance view.", "Rendering animations in your app is one of the most cited\ntopics of interest when it comes to measuring performance.\nThanks in part to Flutter\u2019s Skia engine and its ability\nto quickly create and dispose of widgets,\nFlutter applications are performant by default,\nso you only need to avoid common pitfalls to achieve\nexcellent performance.", "If you see janky (non smooth) animations, make\nsure that you are profiling performance with an\napp built in profile mode.\nThe default Flutter build creates an app in debug mode,\nwhich is not indicative of release performance.\nFor information,\nsee Flutter\u2019s build modes.", "A couple common pitfalls:", "For more information on evaluating performance\nincluding information on common pitfalls,\nsee the following docs:", "Do you see noticeable jank on your mobile app, but only on\nthe first run of an animation? If so, see\nReduce shader animation jank on mobile.", "The following series of articles cover what the Flutter Material\nteam learned when improving performance of the Flutter Gallery\napp on the web:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/rendering-performance", "base_url": "https://docs.flutter.dev/"}, {"title": "Testing Flutter apps | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The more features your app has, the harder it is to test manually.\nAutomated tests help ensure that your app performs correctly before\nyou publish it, while retaining your feature and bug fix velocity.", "info Note:\n  For hands-on practice of testing Flutter apps, see the\n  How to test a Flutter app codelab.", "Automated testing falls into a few categories:", "Generally speaking, a well-tested app has many unit and widget tests,\ntracked by code coverage, plus enough integration tests\nto cover all the important use cases. This advice is based on\nthe fact that there are trade-offs between different kinds of testing,\nseen below.", "A unit test tests a single function, method, or class.\nThe goal of a unit test is to verify the correctness of a\nunit of logic under a variety of conditions.\nExternal dependencies of the unit under test are generally\nmocked out.\nUnit tests generally don\u2019t read from or write\nto disk, render to screen, or receive user actions from\noutside the process running the test.\nFor more information regarding unit tests, \nyou can view the following recipes \nor run flutter test --help in your terminal.", "info Note:\n  If you\u2019re writing unit tests for code that\n  uses plugins and you want to avoid crashes,\n  check out Plugins in Flutter tests.\n  If you want to test your Flutter plugin,\n  check out Testing plugins.", "An introduction to unit testing", "Mock dependencies using Mockito", "A widget test (in other UI frameworks referred to as component test)\ntests a single widget. The goal of a widget test is to verify that the\nwidget\u2019s UI looks and interacts as expected. Testing a widget involves\nmultiple classes and requires a test environment that provides the\nappropriate widget lifecycle context.", "For example, the Widget being tested should be able to receive and\nrespond to user actions and events, perform layout, and instantiate child\nwidgets. A widget test is therefore more comprehensive than a unit test.\nHowever, like a unit test, a widget test\u2019s environment is replaced with\nan implementation much simpler than a full-blown UI system.", "An introduction to widget testing", "Tap, drag, and enter text", "An integration test tests a complete app or a large part of an app.\nThe goal of an integration test is to verify that all the widgets\nand services being tested work together as expected.\nFurthermore, you can use integration\ntests to verify your app\u2019s performance.", "Generally, an integration test runs on a real device or an OS emulator,\nsuch as iOS Simulator or Android Emulator.\nThe app under test is typically isolated\nfrom the test driver code to avoid skewing the results.", "For more information on how to write integration tests, see the integration\ntesting page.", "An introduction to integration testing", "Continuous integration (CI) services allow you to run your\ntests automatically when pushing new code changes.\nThis provides timely feedback on whether the code\nchanges work as expected and do not introduce bugs.", "For information on running tests on various continuous\nintegration services, see the following:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/overview", "base_url": "https://docs.flutter.dev/"}, {"title": "Add a Flutter Fragment to an Android app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide describes how to add a Flutter Fragment to an existing\nAndroid app.  In Android, a Fragment represents a modular\npiece of a larger UI. A Fragment might be used to present\na sliding drawer, tabbed content, a page in a ViewPager,\nor it might simply represent a normal screen in a\nsingle-Activity app. Flutter provides a FlutterFragment\nso that developers can present a Flutter experience any place\nthat they can use a regular Fragment.", "If an Activity is equally applicable for your application needs,\nconsider using a FlutterActivity instead of a\nFlutterFragment, which is quicker and easier to use.", "FlutterFragment allows developers to control the following\ndetails of the Flutter experience within the Fragment:", "FlutterFragment also comes with a number of calls that\nmust be forwarded from its surrounding Activity.\nThese calls allow Flutter to react appropriately to OS events.", "All varieties of FlutterFragment, and its requirements,\nare described in this guide.", "The first thing to do to use a FlutterFragment is to add it to a host\nActivity.", "To add a FlutterFragment to a host Activity, instantiate and\nattach an instance of FlutterFragment in onCreate() within the\nActivity, or at another time that works for your app:", "The previous code is sufficient to render a Flutter UI\nthat begins with a call to your main() Dart entrypoint,\nan initial Flutter route of /, and a new FlutterEngine.\nHowever, this code is not sufficient to achieve all expected\nFlutter behavior. Flutter depends on various OS signals that\nmust  be forwarded from your host Activity to FlutterFragment.\nThese calls are shown in the following example:", "With the OS signals forwarded to Flutter,\nyour FlutterFragment works as expected.\nYou have now added a FlutterFragment to your existing Android app.", "The simplest integration path uses a new FlutterEngine,\nwhich comes with a non-trivial initialization time,\nleading to a blank UI until Flutter is\ninitialized and rendered the first time.\nMost of this time overhead can be avoided by using\na cached, pre-warmed FlutterEngine, which is discussed next.", "By default, a FlutterFragment creates its own instance\nof a FlutterEngine, which requires non-trivial warm-up time.\nThis means your user sees a blank Fragment for a brief moment.\nYou can mitigate most of this warm-up time by\nusing an existing, pre-warmed instance of FlutterEngine.", "To use a pre-warmed FlutterEngine in a FlutterFragment,\ninstantiate a FlutterFragment with the withCachedEngine()\nfactory method.", "FlutterFragment internally knows about FlutterEngineCache\nand retrieves the pre-warmed FlutterEngine based on the ID\ngiven to withCachedEngine().", "By providing a pre-warmed FlutterEngine,\nas previously shown, your app renders the\nfirst Flutter frame as quickly as possible.", "The concept of an initial route is available when configuring a\nFlutterActivity or a FlutterFragment with a new FlutterEngine.\nHowever, FlutterActivity and FlutterFragment don\u2019t offer the\nconcept of an initial route when using a cached engine.\nThis is because a cached engine is expected to already be\nrunning Dart code, which means it\u2019s too late to configure the\ninitial route.", "Developers that would like their cached engine to begin\nwith a custom initial route can configure their cached\nFlutterEngine to use a custom initial route just before\nexecuting the Dart entrypoint. The following example\ndemonstrates the use of an initial route with a cached engine:", "By setting the initial route of the navigation channel, the associated\nFlutterEngine displays the desired route upon initial execution of the\nrunApp() Dart function.", "Changing the initial route property of the navigation channel\nafter the initial execution of runApp() has no effect.\nDevelopers who would like to use the same FlutterEngine\nbetween different Activitys and Fragments and switch\nthe route between those displays need to setup a method channel and\nexplicitly instruct their Dart code to change Navigator routes.", "The initial display of Flutter content requires some wait time,\neven if a pre-warmed FlutterEngine is used.\nTo help improve the user experience around\nthis brief waiting period, Flutter supports the\ndisplay of a splash screen (also known as \u201claunch screen\u201d) until Flutter\nrenders its first frame. For instructions about how to show a launch\nscreen, see the splash screen guide.", "An Android app might contain many independent Flutter experiences,\nrunning in different FlutterFragments, with different\nFlutterEngines. In these scenarios,\nit\u2019s common for each Flutter experience to begin with different\ninitial routes (routes other than /).\nTo facilitate this, FlutterFragment\u2019s Builder\nallows you to specify a desired initial route, as shown:", "info Note:\nFlutterFragment\u2019s initial route property has no effect when a pre-warmed\n  FlutterEngine is used because the pre-warmed FlutterEngine already\n  chose an initial route. The initial route can be chosen explicitly when\n  pre-warming a FlutterEngine.", "Similar to varying initial routes, different\nFlutterFragments might want to execute different\nDart entrypoints. In a typical Flutter app, there is only one\nDart entrypoint: main(), but you can define other entrypoints.", "FlutterFragment supports specification of the desired\nDart entrypoint to execute for the given Flutter experience.\nTo specify an entrypoint, build FlutterFragment, as shown:", "The FlutterFragment configuration results in the execution\nof a Dart entrypoint called mySpecialEntrypoint().\nNotice that the parentheses () are\nnot included in the dartEntrypoint String name.", "info Note:\nFlutterFragment\u2019s Dart entrypoint property has no effect\n  when a pre-warmed FlutterEngine is used because the\n  pre-warmed FlutterEngine already executed a Dart entrypoint.\n  The Dart entrypoint can be chosen explicitly when pre-warming\n  a FlutterEngine.", "FlutterFragment can either use a SurfaceView to render its\nFlutter content, or it can use a TextureView.\nThe default is SurfaceView, which is significantly\nbetter for performance than TextureView. However, SurfaceView\ncan\u2019t be interleaved in the middle of an Android View hierarchy.\nA SurfaceView must either be the bottommost View in the hierarchy,\nor the topmost View in the hierarchy.\nAdditionally, on Android versions before Android N,\nSurfaceViews can\u2019t be animated because their layout and rendering\naren\u2019t synchronized with the rest of the View hierarchy.\nIf either of these use cases are requirements for your app,\nthen you need to use TextureView instead of SurfaceView.\nSelect a TextureView by building a FlutterFragment with a\ntexture RenderMode:", "Using the configuration shown, the resulting FlutterFragment\nrenders its UI to a TextureView.", "By default, FlutterFragment renders with an opaque background,\nusing a SurfaceView. (See \u201cControl FlutterFragment\u2019s render\nmode.\u201d) That background is black for any pixels that aren\u2019t\n painted by Flutter. Rendering with an opaque background is\nthe preferred rendering mode for performance reasons.\nFlutter rendering with transparency on Android negatively\naffects performance. However, there are many designs that\nrequire transparent pixels in the Flutter experience that\nshow through to the underlying Android UI. For this reason,\nFlutter supports translucency in a FlutterFragment.", "info Note:\n  Both SurfaceView and TextureView support transparency.\n  However, when a SurfaceView is instructed to render with\n  transparency, it positions itself at a higher z-index than\n  all other Android Views, which means it appears\n  above all other Views. This is a limitation of SurfaceView.\n  If it\u2019s acceptable to render your Flutter experience on top\n  of all other content, then FlutterFragment\u2019s default\n  RenderMode of surface is the RenderMode that you\n  should use. However, if you need to display Android Views both\n  above and below your Flutter experience, then you must specify a\n  RenderMode of texture.\n  See \u201cControl FlutterFragment\u2019s render mode\u201d\n  for information about controlling the RenderMode.", "To enable transparency for a FlutterFragment,\nbuild it with the following configuration:", "Some apps choose to use Fragments as entire Android screens.\nIn these apps, it would be reasonable for a Fragment to\ncontrol system chrome like Android\u2019s status bar,\nnavigation bar, and orientation.", "In other apps, Fragments are used to represent only\na portion of a UI. A FlutterFragment might be used to\nimplement the inside of a drawer, a video player,\nor a single card. In these situations, it would be\ninappropriate for the FlutterFragment to affect\nAndroid\u2019s system chrome because there are other UI\npieces within the same Window.", "FlutterFragment comes with a concept that helps\ndifferentiate between the case when a FlutterFragment\nshould be able to control its host Activity, and the\ncases when a FlutterFragment should only affect its\nown behavior. To prevent a FlutterFragment from\nexposing its Activity to Flutter plugins, and to\nprevent Flutter from controlling the Activity\u2019s system UI,\nuse the shouldAttachEngineToActivity() method in\nFlutterFragment\u2019s Builder, as shown:", "Passing false to the shouldAttachEngineToActivity()\nBuilder method prevents Flutter from interacting with\nthe surrounding Activity. The default value is true,\nwhich allows Flutter and Flutter plugins to interact with the\nsurrounding Activity.", "info Note:\n  Some plugins might expect or require an Activity reference.\n  Ensure that none of your plugins require an Activity\n  before you disable access.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android/add-flutter-fragment", "base_url": "https://docs.flutter.dev/"}, {"title": "Install and run DevTools from the command line | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "To run Dart DevTools from the CLI, you must have dart on your path. Then\nyou can run the following command to launch DevTools:", "To upgrade DevTools, upgrade your Dart SDK. If a newer Dart SDK\nincludes a newer version of DevTools, dart devtools will automatically\nlaunch this version. If which dart points to the Dart SDK included in\nyour Flutter SDK, then DevTools will be upgraded when you upgrade your\nFlutter SDK to a newer version.", "When you run DevTools from the command line, you should see output that\nlooks something like:", "Next, start an app to connect to.\nThis can be either a Flutter application\nor a Dart command-line application.\nThe command below specifies a Flutter app:", "You need to have a device connected, or a simulator open,\nfor flutter run to work. Once the app starts, you\u2019ll see a\nmessage in your terminal that looks like the following:", "Open the DevTools instance connected to your app\nby opening the second link in Chrome.", "This URL contains a security token, \nso it\u2019s different for each run of your app. \nThis means that if you stop your application and re-run it, \nyou need to connect to DevTools again with the new URL.", "If your app stops running\nor you opened DevTools manually,\nyou should see a Connect dialog:", "You can manually connect DevTools to a new app instance\nby copying the Observatory link you got from running your app,\nsuch as http://127.0.0.1:52129/QjqebSY4lQ8=/\nand pasting it into the connect dialog:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/cli", "base_url": "https://docs.flutter.dev/"}, {"title": "Android Studio and IntelliJ | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Follow the Set up an editor\ninstructions to install the Dart and Flutter plugins.", "Updates to the plugins are shipped on a regular basis.\nYou should be prompted in the IDE when an update is available.", "To check for updates manually:", "You can create a new project in one of several ways.", "Creating a new Flutter project from the Flutter starter app template\ndiffers between Android Studio and IntelliJ.", "When creating a new app, some Flutter IDE plugins ask for an\n  organization name in reverse domain order,\n  something like com.example. Along with the name of the app,\n  this is used as the package name for Android, and the Bundle ID for iOS\n  when the app is released. If you think you might ever release this app,\n  it is better to specify these now. They cannot be changed once the app\n  is released. Your organization name should be unique.", "To open an existing Flutter project:", "error Important:\n  Do not use the New > Project from existing sources\n  option for Flutter projects.", "The Flutter plugin performs code analysis that enables the following:", "info Note:\n  You can debug your app in a few ways.", "The instructions below describe features available in Android\n  Studio and IntelliJ. For information on launching DevTools,\n  see Running DevTools from Android Studio in the\n  DevTools docs.", "Running and debugging are controlled from the main toolbar:", "When a Flutter project is open in the IDE, you should see a set of\nFlutter-specific buttons on the right-hand side of the toolbar.", "info Note:\n  If the Run and Debug buttons are disabled, and no targets are listed,\n  Flutter has not been able to discover any connected iOS or\n  Android devices or simulators.\n  You need to connect a device, or start a simulator, to proceed.", "Flutter offers a best-in-class developer cycle enabling you to see the effect\nof your changes almost instantly with the Stateful Hot Reload feature.\nTo learn more, check out Hot reload.", "info Note:\n  To examine performance issues in Flutter, see the\n  Timeline view.", "To view the performance data, including the widget rebuild\ninformation, start the app in Debug mode, and then open\nthe Performance tool window using\nView > Tool Windows > Flutter Performance.", "To see the stats about which widgets are being rebuilt, and how often,\nclick Show widget rebuild information in the Performance pane.\nThe exact count of the rebuilds for this frame displays in the second\ncolumn from the right. For a high number of rebuilds, a yellow spinning\ncircle displays. The column to the far right shows how many times a\nwidget was rebuilt since entering the current screen.\nFor widgets that aren\u2019t rebuilt, a solid grey circle displays.\nOtherwise, a grey spinning circle displays.", "The app shown in this screenshot has been designed to deliver\n  poor performance, and the rebuild profiler gives you a clue\n  about what is happening in the frame that might cause poor\n  performance. The widget rebuild profiler is not a diagnostic\n  tool, by itself, about poor performance.", "The purpose of this feature is to make you aware when widgets are\nrebuilding\u2014you might not realize that this is happening when just\nlooking at the code. If widgets are rebuilding that you didn\u2019t expect,\nit\u2019s probably a sign that you should refactor your code by splitting\nup large build methods into multiple widgets.", "This tool can help you debug at least four common performance issues:", "The whole screen (or large pieces of it) are built by a single\nStatefulWidget, causing unnecessary UI building. Split up the\nUI into smaller widgets with smaller build() functions.", "Offscreen widgets are being rebuilt. This can happen, for example,\nwhen a ListView is nested in a tall Column that extends offscreen.\nOr when the RepaintBoundary is not set for a list that extends\noffscreen, causing the whole list to be redrawn.", "The build() function for an AnimatedBuilder draws a subtree that\ndoes not need to be animated, causing unnecessary rebuilds of static\nobjects.", "An Opacity widget is placed unnecessarily high in the widget tree.\nOr, an Opacity animation is created by directly manipulating the\nopacity property of the Opacity widget, causing the widget itself\nand its subtree to rebuild.", "You can click on a line in the table to navigate to the line\nin the source where the widget is created. As the code runs,\nthe spinning icons also display in the code pane to help you\nvisualize which rebuilds are happening.", "Note that numerous rebuilds doesn\u2019t necessarily indicate a problem.\nTypically you should only worry about excessive rebuilds if you have\nalready run the app in profile mode and verified that the performance\nis not what you want.", "And remember, the widget rebuild information is only available in\na debug build. Test the app\u2019s performance on a real device in a profile\nbuild, but debug performance issues in a debug build.", "If you have additional tips we should share, let us know!", "Assists are code changes related to a certain code identifier.\nA number of these are available when the cursor is placed on a\nFlutter widget identifier, as indicated by the yellow lightbulb icon.\nThe assist can be invoked by clicking the lightbulb, or by using the\nkeyboard shortcut (Alt+Enter on Linux and Windows,\nOption+Return on macOS), as illustrated here:", "Quick Fixes are similar, only they are shown with a piece of code has an error\nand they can assist in correcting it. They are indicated with a red lightbulb.", "This can be used when you have a widget that you want to wrap in a surrounding\nwidget, for example if you want to wrap a widget in a Row or Column.", "Similar to the assist above, but for wrapping an existing list of\nwidgets rather than an individual widget.", "Changes a child argument to a children argument,\nand wraps the argument value in a list.", "Live templates can be used to speed up entering typical code structures.\nThey are invoked by typing their prefix, and then selecting it in the code\ncompletion window:", "The Flutter plugin includes the following templates:", "You can also define custom templates in Settings > Editor > Live Templates.", "On Linux (keymap Default for XWin) and Windows the keyboard shortcuts\nare Control+Alt+; and Control+Backslash.", "On macOS (keymap Mac OS X 10.5+ copy) the keyboard shortcuts are\nCommand+Option and Command+Backslash.", "Keyboard mappings can be changed in the IDE Preferences/Settings: Select\nKeymap, then enter flutter into the search box in the upper right corner.\nRight click the binding you want to change and Add Keyboard Shortcut.", "Hot reload works by injecting updated source code files into the running\nDart VM (Virtual Machine). This includes not only adding new classes,\nbut also adding methods and fields to existing classes,\nand changing existing functions.\nA few types of code changes cannot be hot reloaded though:", "For these changes you can fully restart your application,\nwithout having to end your debugging session. To perform a hot restart,\ndon\u2019t click the Stop button, simply re-click the Run button (if in a run\nsession) or Debug button (if in a debug session), or shift-click the \u2018hot\nreload\u2019 button.", "Opening the root directory of a Flutter project doesn\u2019t expose all the Android\nfiles to the IDE. Flutter apps contain a subdirectory named android. If you\nopen this subdirectory as its own separate project in Android Studio, the IDE\nwill be able to fully support editing and refactoring all Android files (like\nGradle scripts).", "If you already have the entire project opened as a Flutter app in Android\nStudio, there are two equivalent ways to open the Android files on their own\nfor editing in the IDE. Before trying this, make sure that you\u2019re on the latest\nversion of Android Studio and the Flutter plugins.", "For both options, Android Studio gives you the option to use separate windows or\nto replace the existing window with the new project when opening a second\nproject. Either option is fine.", "If you don\u2019t already have the Flutter project opened in Android studio,\nyou can open the Android files as their own project from the start:", "If you haven\u2019t run your Flutter app yet, you might see Android Studio report a\nbuild error when you open the android project. Run flutter pub get in\nthe app\u2019s root directory and rebuild the project by selecting Build > Make\nto fix it.", "To enable editing of Android code in IntelliJ IDEA, you need to configure the\nlocation of the Android SDK:", "Important known issues that might impact your experience are documented\nin the Flutter plugin README file.", "All known bugs are tracked in the issue trackers:", "We welcome feedback, both on bugs/issues and feature requests.\nPrior to filing new issues:", "When filing new issues, include the output of flutter doctor.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/android-studio", "base_url": "https://docs.flutter.dev/"}, {"title": "List with spaced items | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Perhaps you want to create a list where all list items\nare spaced evenly, so that the items take up the visible space.\nFor example, the four items in the following image are spaced evenly,\nwith \u201cItem 0\u201d at the top, and \u201cItem 3\u201d at the bottom.", "At the same time, you might want to allow users\nto scroll through the list when the list of items won\u2019t fit,\nmaybe because a device is too small, a user resized a window,\nor the number of items exceeds the screen size.", "Typically, you use Spacer to tune the spacing between widgets,\nor Expanded to expand a widget to fill the available space.\nHowever, these solutions are not possible inside scrollable widgets,\nbecause they need a finite height constraint.", "This recipe demonstrates how to use LayoutBuilder and ConstrainedBox\nto space out list items evenly when there is enough space, and to allow\nusers to scroll when there is not enough space,\nusing the following steps:", "Start by creating a LayoutBuilder. You need to provide\na builder callback function with two parameters:", "In this recipe, you won\u2019t be using the BuildContext,\nbut you will need the BoxConstraints in the next step.", "Inside the builder function, return a SingleChildScrollView.\nThis widget ensures that the child widget can be scrolled,\neven when the parent container is too small.", "In this step, add a ConstrainedBox\nas the child of the SingleChildScrollView.", "The ConstrainedBox widget imposes aditional constraints to its child.", "Configure the constraint by setting the minHeight parameter to be\nthe maxHeight of the LayoutBuilder constraints.", "This ensures that the child widget \nis constrained to have a minimum height equal to the available\nspace provided by the LayoutBuilder constraints,\nnamely the maximum height of the BoxConstraints.", "However, you don\u2019t set the maxHeight parameter,\nbecause you need to allow the child to be larger\nthan the LayoutBuilder size,\nin case the items don\u2019t fit the screen.", "Finally, add a Column as the child of the ConstrainedBox.", "To space the items evenly, \nset the mainAxisAlignment to MainAxisAlignment.spaceBetween.", "Alternatively, you can use the Spacer widget \nto tune the spacing between the items,\nor the Expanded widget, if you want one widget to take more space than others.", "For that, you have to wrap the Column with an IntrinsicHeight widget,\nwhich forces the Column widget to size itself to a minimum height,\ninstead of expanding infinitely.", "tips_and_updates Tip:\n  Play around with different devices, resizing the app,\n  or resizing the browser window, and see how the item list adapts\n  to the available space.", "This example shows a list of items that are spaced evenly within a column.\nThe list can be scrolled up and down when the items don\u2019t fit the screen.\nThe number of items is defined by the variable items,\nchange this value to see what happens when the items won\u2019t fit the screen.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/spaced-items", "base_url": "https://docs.flutter.dev/"}, {"title": "Building Linux apps with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page discusses considerations unique to building\nLinux apps with Flutter, including shell integration\nand preparation of apps for distribution.", "The Linux programming interface,\ncomprising library functions and system calls,\nis designed around the C language and ABI.\nFortunately, Dart provides dart:ffi,\nwhich is designed to enable Dart programs\nto efficiently call into C libraries.\nFFI provides Flutter apps with the ability to\nallocate native memory with malloc or calloc,\nsupport for pointers, structs and callbacks,\nand ABI types like long and size_t.", "For more information about calling C libraries\nfrom Flutter, see C interop using dart:ffi.", "Many apps will benefit from using a package that\nwraps the underlying library\ncalls in a more convenient, idiomatic Dart API.\nCanonical has built a series of packages\nwith a focus on enabling Dart and Flutter on Linux,\nincluding support for desktop notifications,\ndbus, network management, and Bluetooth.", "More generally, many other packages support Linux,\nincluding common packages such as url_launcher,\nshared_preferences, file_selector, and\npath_provider.", "The executable binary can be found in your project under\nbuild/linux/<build mode>/bundle/. Alongside your\nexecutable binary in the bundle directory there are\ntwo directories:", "In addition to these files, your application also\nrelies on various operating system libraries that\nit\u2019s been compiled against.\nYou can see the full list by running ldd\nagainst your application. For example,\nassuming you have a Flutter desktop application\ncalled linux_desktop_test, you could inspect\nthe system libraries it depends upon as follows:", "To wrap up this application for distribution\nyou need to include everything in the bundle directory,\nand make sure the Linux system you are installing\nit on has all of the system libraries required.\nThis could be as simple as:", "For information on publishing a Linux application\nto the Snap Store, see\nBuild and release a Linux application to the Snap Store.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/linux/building", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release an Android app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "During a typical development cycle,\nyou test an app using flutter run at the command line,\nor by using the Run and Debug\noptions in your IDE. By default,\nFlutter builds a debug version of your app.", "When you\u2019re ready to prepare a release version of your app,\nfor example to publish to the Google Play Store,\nthis page can help. Before publishing,\nyou might want to put some finishing touches on your app.\nThis page covers the following topics:", "info Note:\n   Throughout this page, [project] refers to \n   the directory that your application is in. While following\n   these instructions, substitute [project] with \n   your app\u2019s directory.", "When a new Flutter app is created, it has a default launcher icon.\nTo customize this icon, you might want to check out the\nflutter_launcher_icons package.", "Alternatively, you can do it manually using the following steps:", "Review the Material Design product\nicons guidelines for icon design.", "In the [project]/android/app/src/main/res/ directory,\nplace your icon files in folders named using\nconfiguration qualifiers.\nThe default mipmap- folders demonstrate the correct\nnaming convention.", "In AndroidManifest.xml, update the\napplication tag\u2019s android:icon\nattribute to reference icons from the previous\nstep (for example,\n<application android:icon=\"@mipmap/ic_launcher\" ...).", "To verify that the icon has been replaced,\nrun your app and inspect the app icon in the Launcher.", "If your app uses Platform Views, you might want to enable\nMaterial Components by following the steps described in the\nGetting Started guide for Android.", "To find out the latest version, visit Google Maven.", "To publish on the Play Store, you need to give your app a digital\nsignature. Use the following instructions to sign your app.", "On Android, there are two signing keys: deployment and upload. The end-users \ndownload the .apk signed with the \u2018deployment key\u2019. An \u2018upload key\u2019 is used to \nauthenticate the .aab / .apk uploaded by developers onto the Play Store and is \nre-signed with the deployment key once in the Play Store.", "If you have an existing keystore, skip to the next step.\nIf not, create one by either:", "Running the following at the command line:", "On macOS or Linux, use the following command:", "On Windows, use the following command in PowerShell:", "This command stores the upload-keystore.jks file in your home\n  directory. If you want to store it elsewhere, change\n  the argument you pass to the -keystore parameter.\n  However, keep the keystore file private;\n  don\u2019t check it into public source control!", "The keytool command might not be in your path\u2014it\u2019s\npart of Java, which is installed as part of\nAndroid Studio.  For the concrete path,\nrun flutter doctor -v and locate the path printed after\n\u2018Java binary at:\u2019. Then use that fully qualified path\nreplacing java (at the end) with keytool.\nIf your path includes space-separated names,\nsuch as Program Files, use platform-appropriate\nnotation for the names. For example, on Mac/Linux\nuse Program\\ Files, and on Windows use\n\"Program Files\".", "The -storetype JKS tag is only required for Java 9\nor newer. As of the Java 9 release,\nthe keystore type defaults to PKS12.", "Create a file named [project]/android/key.properties\nthat contains a reference to your keystore.\nDon\u2019t include the angle brackets (< >).\nThey indicate that the text serves as a placeholder for your values.", "The storeFile might be located at\n/Users/<user name>/upload-keystore.jks on macOS\nor C:\\\\Users\\\\<user name>\\\\upload-keystore.jks on Windows.", "report_problem Warning:\n  Keep the key.properties file private;\n  don\u2019t check it into public source control.", "Configure gradle to use your upload key when building your app in release mode \nby editing the [project]/android/app/build.gradle file.", "Add the keystore information from your properties file before the android block:", "Load the key.properties file into the keystoreProperties object.", "Find the buildTypes block:", "And replace it with the following signing configuration info:", "Release builds of your app will now be signed automatically.", "info Note:\n  You might need to run flutter clean after changing the gradle file.\n  This prevents cached builds from affecting the signing process.", "For more information on signing your app, check out\nSign your app on developer.android.com.", "R8 is the new code shrinker from Google, and it\u2019s enabled by default\nwhen you build a release APK or AAB. To disable R8, pass the --no-shrink\nflag to flutter build apk or flutter build appbundle.", "info Note:\n  Obfuscation and minification can considerably extend compile time\n  of the Android application.", "When writing large apps or making use of large plugins,\nyou might encounter Android\u2019s dex limit of 64k methods\nwhen targeting a minimum API of 20 or below.\nThis might also be encountered when running debug versions of your app\nusing flutter run that does not have shrinking enabled.", "Flutter tool supports easily enabling multidex. The simplest way is to\nopt into multidex support when prompted. The tool detects multidex build errors\nand asks before making changes to your Android project.\nOpting in allows Flutter to automatically depend on\nandroidx.multidex:multidex and use a generated\nFlutterMultiDexApplication as the project\u2019s application.", "When you try to build and run your app with the Run and Debug\noptions in your IDE, your build might fail with the following message:", "To enable multidex from the command line,\nrun flutter run --debug and select an Android device:", "When prompted, enter y.\nThe Flutter tool enables multidex support and retries the build:", "info Note:\n  Multidex support is natively included when targeting\n  Android SDK 21 or later. However, we don\u2019t recommend\n  targeting API 21+ purely to resolve the multidex issue\n  as this might inadvertently exclude users running older devices.", "You might also choose to manually support multidex by following Android\u2019s guides\nand modifying your project\u2019s Android directory configuration.\nA multidex keep file must be specified to include:", "Also, include any other classes used in app startup.\nFor more detailed guidance on adding multidex support manually,\ncheck out the official Android documentation.", "Review the default App Manifest file, AndroidManifest.xml.\nThis file is located in [project]/android/app/src/main.\nVerify the following values:", "Review the default Gradle build file\n(build.gradle, located in [project]/android/app),\nto verify that the values are correct.", "For more information, check out the module-level build\nsection in the Gradle build file.", "You have two possible release formats when publishing to\nthe Play Store.", "info Note:\n  The Google Play Store prefers the app bundle format.\n  For more information, check out\n  About Android App Bundles.", "This section describes how to build a release app bundle.\nIf you completed the signing steps,\nthe app bundle will be signed.\nAt this point, you might consider obfuscating your Dart code\nto make it more difficult to reverse engineer. Obfuscating\nyour code involves adding a couple flags to your build command,\nand maintaining additional files to de-obfuscate stack traces.", "From the command line:", "The release bundle for your app is created at\n[project]/build/app/outputs/bundle/release/app.aab.", "By default, the app bundle contains your Dart code and the Flutter\nruntime compiled for armeabi-v7a (ARM 32-bit), arm64-v8a\n(ARM 64-bit), and x86-64 (x86 64-bit).", "An app bundle can be tested in multiple ways.\nThis section describes two.", "Although app bundles are preferred over APKs, there are stores\nthat don\u2019t yet support app bundles. In this case, build a release\nAPK for each target ABI (Application Binary Interface).", "If you completed the signing steps, the APK will be signed.\nAt this point, you might consider obfuscating your Dart code\nto make it more difficult to reverse engineer. Obfuscating\nyour code involves adding a couple flags to your build command.", "From the command line:", "Run flutter build apk --split-per-abi.\n(The flutter build command defaults to --release.)", "This command results in three APK files:", "Removing the --split-per-abi flag results in a fat APK that contains\nyour code compiled for all the target ABIs. Such APKs are larger in\nsize than their split counterparts, causing the user to download\nnative binaries that are not applicable to their device\u2019s architecture.", "Follow these steps to install the APK on a connected Android device.", "From the command line:", "For detailed instructions on publishing your app to the Google Play Store,\ncheck out the Google Play launch documentation.", "The default version number of the app is 1.0.0.\nTo update it, navigate to the pubspec.yaml file\nand update the following line:", "The version number is three numbers separated by dots,\nsuch as 1.0.0 in the example above, followed by an optional\nbuild number such as 1 in the example above, separated by a +.", "Both the version and the build number can be overridden in Flutter\u2019s\nbuild by specifying --build-name and --build-number, respectively.", "In Android, build-name is used as versionName while\nbuild-number used as versionCode. For more information,\ncheck out Version your app in the Android documentation.", "When you rebuild the app for Android, any updates in the version number\nfrom the pubspec file will update the versionName and versionCode \nin the local.properties file.", "Here are some commonly asked questions about deployment for\nAndroid apps.", "The Google Play Store recommends that you deploy app bundles\nover APKs because they allow a more efficient delivery of the\napplication to your users. However, if you\u2019re distributing\nyour application by means other than the Play Store,\nan APK might be your only option.", "A fat APK is a single APK that contains binaries for multiple\nABIs embedded within it. This has the benefit that the single APK\nruns on multiple architectures and thus has wider compatibility,\nbut it has the drawback that its file size is much larger,\ncausing users to download and store more bytes when installing\nyour application. When building APKs instead of app bundles,\nit is strongly recommended to build split APKs,\nas described in build an APK using the\n--split-per-abi flag.", "When building your application in release mode,\nFlutter apps can be compiled for armeabi-v7a (ARM 32-bit),\narm64-v8a (ARM 64-bit), and x86-64 (x86 64-bit).\nFlutter supports building for x86 Android through ARM emulation.", "See Signing the app.", "In Android Studio, open the existing android/\nfolder under your app\u2019s folder. Then,\nselect build.gradle (Module: app) in the project panel:", "Next, select the build variant. Click Build > Select Build Variant\nin the main menu. Select any of the variants in the Build Variants\npanel (debug is the default):", "The resulting app bundle or APK files are located in\nbuild/app/outputs within your app\u2019s folder.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/android", "base_url": "https://docs.flutter.dev/"}, {"title": "Linux | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/linux", "base_url": "https://docs.flutter.dev/"}, {"title": "Implement swipe to dismiss | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The \u201cswipe to dismiss\u201d pattern is common in many mobile apps.\nFor example, when writing an email app,\nyou might want to allow a user to swipe away\nemail messages to delete them from a list.", "Flutter makes this task easy by providing the\nDismissible widget.\nLearn how to implement swipe to dismiss with the following steps:", "First, create a list of items. For detailed\ninstructions on how to create a list,\nfollow the Working with long lists recipe.", "In this example,\nyou want 20 sample items to work with.\nTo keep it simple, generate a list of strings.", "Display each item in the list on screen. Users won\u2019t\nbe able to swipe these items away just yet.", "In this step,\ngive users the ability to swipe an item off the list by using the\nDismissible widget.", "After the user has swiped away the item,\nremove the item from the list and display a snackbar.\nIn a real app, you might need to perform more complex logic,\nsuch as removing the item from a web service or database.", "Update the itemBuilder() function to return a Dismissible widget:", "As it stands,\nthe app allows users to swipe items off the list, but it doesn\u2019t\ngive a visual indication of what happens when they do.\nTo provide a cue that items are removed,\ndisplay a \u201cleave behind\u201d indicator as they\nswipe the item off the screen. In this case,\nthe indicator is a red background.", "To add the indicator,\nprovide a background parameter to the Dismissible.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/gestures/dismissible", "base_url": "https://docs.flutter.dev/"}, {"title": "Lists & grids | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/lists", "base_url": "https://docs.flutter.dev/"}, {"title": "Build and release a macOS app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide provides a step-by-step walkthrough of releasing a\nFlutter app to the App Store.", "Before beginning the process of releasing your app,\nensure that it meets\nApple\u2019s App Review Guidelines.", "In order to publish your app to the App Store,\nyou must first enroll in the\nApple Developer Program.\nYou can read more about the various\nmembership options in Apple\u2019s\nChoosing a Membership guide.", "Manage your app\u2019s life cycle on\nApp Store Connect (formerly iTunes Connect).\nYou define your app name and description, add screenshots,\nset pricing, and manage releases to the App Store and TestFlight.", "Registering your app involves two steps: registering a unique\nBundle ID, and creating an application record on App Store Connect.", "For a detailed overview of App Store Connect, see the\nApp Store Connect guide.", "Every macOS application is associated with a Bundle ID,\na unique identifier registered with Apple.\nTo register a Bundle ID for your app, follow these steps:", "Register your app on App Store Connect:", "For a detailed overview,\nsee Add an app to your account.", "This step covers reviewing the most important settings\nin the Xcode workspace.\nFor detailed procedures and descriptions, see\nPrepare for app distribution.", "Navigate to your target\u2019s settings in Xcode:", "Verify the most important settings.", "In the Identity section:", "In the Deployment info section:", "In the Signing & Capabilities section:", "The General tab of your project settings should resemble\nthe following:", "For a detailed overview of app signing, see\nCreate, export, and delete signing certificates.", "The configuration for the product identifiers are centralized \nin macos/Runner/Configs/AppInfo.xcconfig. For the app\u2019s name,\nset PRODUCT_NAME, for the copyright set PRODUCT_COPYRIGHT,\nand finally set PRODUCT_BUNDLE_IDENTIFIER for the app\u2019s\nbundle identifier.", "The default version number of the app is 1.0.0.\nTo update it, navigate to the pubspec.yaml file\nand update the following line:", "The version number is three numbers separated by dots,\nsuch as 1.0.0 in the example above, followed by an optional\nbuild number such as 1 in the example above, separated by a +.", "Both the version and the build number can be overridden in Flutter\u2019s\nbuild by specifying --build-name and --build-number,\nrespectively.", "In macOS, build-name uses CFBundleShortVersionString\nwhile build-number uses CFBundleVersion.\nRead more about iOS versioning at Core Foundation Keys\non the Apple Developer\u2019s site.", "When a new Flutter app is created, a placeholder icon set is created.\nThis step covers replacing these placeholder icons with your\napp\u2019s icons:", "This step covers creating a build archive and uploading\nyour build to App Store Connect using Xcode.", "During development, you\u2019ve been building, debugging, and testing\nwith debug builds. When you\u2019re ready to ship your app to users\non the App Store or TestFlight, you need to prepare a release build.\nAt this point, you might consider obfuscating your Dart code\nto make it more difficult to reverse engineer. Obfuscating\nyour code involves adding a couple flags to your build command.", "In Xcode, configure the app version and build:", "Finally, create a build archive and upload it to App Store Connect:", "You should receive an email within 30 minutes notifying you that\nyour build has been validated and is available to release to testers\non TestFlight. At this point you can choose whether to release\non TestFlight, or go ahead and release your app to the App Store.", "For more details, see\nUpload an app to App Store Connect.", "This step covers creating a build archive and uploading\nyour build to App Store Connect using Flutter build commands \nand Codemagic CLI Tools executed in a terminal\nin the Flutter project directory.", "Install the Codemagic CLI tools:", "You\u2019ll need to generate an App Store Connect API Key\nwith App Manager access to automate operations with App Store Connect. To make\nsubsequent commands more concise, set the following environment variables from\nthe new key: issuer id, key id, and API key file.", "You need to export or create a Mac App Distribution and a Mac Installer\nDistribution certificate to perform code signing and package a build archive.", "If you have existing certificates, you can export the\nprivate keys by executing the following command for each certificate:", "Or you can create a new private key by executing the following command:", "Later, you can have CLI tools automatically create a new Mac App Distribution and\nMac Installer Distribution certificate. You can use the same private key for\neach new certificate.", "Fetch the code signing files from App Store Connect:", "Where cert_key is either your exported Mac App Distribution certificate private key\nor a new private key which automatically generates a new certificate.", "If you do not have a Mac Installer Distribution certificate,\nyou can create a new certificate by executing the following:", "Use cert_key of the private key you created earlier.", "Fetch the Mac Installer Distribution certificates:", "Set up a new temporary keychain to be used for code signing:", "Restore Login Keychain!\n  After running keychain initialize you must run the following:", "This sets your login keychain as the default to avoid potential\n  authentication issues with apps on your machine.", "Now add the fetched certificates to your keychain:", "Update the Xcode project settings to use fetched code signing profiles:", "Build the Flutter macOS project:", "Publish the packaged app to App Store Connect:", "As mentioned earlier, don\u2019t forget to set your login keychain\nas the default to avoid authentication issues\nwith apps on your machine:", "TestFlight allows developers to push their apps\nto internal and external testers. This optional step\ncovers releasing your build on TestFlight.", "See distribution guide \nto prepare an archive for distribution to designated Mac computers.", "When you\u2019re ready to release your app to the world,\nfollow these steps to submit your app for review and\nrelease to the App Store:", "Apple notifies you when their app review process is complete.\nYour app is released according to the instructions you\nspecified in the Version Release section.", "For more details, see\nDistribute an app through the App Store.", "The Distribute your app guide provides a\ndetailed overview of the process of releasing an app to the App Store.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//deployment/macos", "base_url": "https://docs.flutter.dev/"}, {"title": "Animate the properties of a container | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "The Container class provides a convenient way\nto create a widget with specific properties:\nwidth, height, background color, padding, borders, and more.", "Simple animations often involve changing these properties over time.\nFor example,\nyou might want to animate the background color from grey to green to\nindicate that an item has been selected by the user.", "To animate these properties,\nFlutter provides the AnimatedContainer widget.\nLike the Container widget, AnimatedContainer allows you to define\nthe width, height, background colors, and more. However, when the\nAnimatedContainer is rebuilt with new properties, it automatically\nanimates between the old and new values. In Flutter, these types of\nanimations are known as \u201cimplicit animations.\u201d", "This recipe describes how to use an AnimatedContainer to animate the size,\nbackground color, and border radius when the user taps a button\nusing the following steps:", "To start, create StatefulWidget and State classes.\nUse the custom State class to define the properties that change over\ntime. In this example, that includes the width, height, color, and border\nradius. You can also define the default value of each property.", "These properties belong to a custom State class so they\ncan be updated when the user taps a button.", "Next, build the AnimatedContainer using the properties defined in the\nprevious step. Furthermore, provide a duration that defines how long\nthe animation should run.", "Finally, start the animation by rebuilding the\nAnimatedContainer with the new properties.\nHow to trigger a rebuild?\nUse the setState() method.", "Add a button to the app. When the user taps the button, update\nthe properties with a new width, height, background color and border radius\ninside a call to setState().", "A real app typically transitions between fixed values (for example,\nfrom a grey to a green background). For this app,\ngenerate new values each time the user taps the button.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/animation/animated-container", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the Flutter inspector | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  The inspector works with all Flutter applications.", "The Flutter widget inspector is a powerful tool for visualizing and\nexploring Flutter widget trees. The Flutter framework uses widgets\nas the core building block for anything from controls\n(such as text, buttons, and toggles),\nto layout (such as centering, padding, rows, and columns).\nThe inspector helps you visualize and explore Flutter widget\ntrees, and can be used for the following:", "To debug a layout issue, run the app in debug mode and\nopen the inspector by clicking the Flutter Inspector\ntab on the DevTools toolbar.", "info Note:\n  You can still access the Flutter inspector directly from\n  Android Studio/IntelliJ, but you might prefer the\n  more spacious view when running it from DevTools\n  in a browser.", "The following is a guide to the features available in the\ninspector\u2019s toolbar. When space is limited, the icon is\nused as the visual version of the label.", "Enable this button in order to select\n    a widget on the device to inspect it. For more information,\n    see Inspecting a widget.", "You can browse the interactive widget tree to view nearby\nwidgets and see their field values.", "To locate individual UI elements in the widget tree,\nclick the Select Widget Mode button in the toolbar.\nThis puts the app on the device into a \u201cwidget select\u201d mode.\nClick any widget in the app\u2019s UI; this selects the widget on the\napp\u2019s screen, and scrolls the widget tree to the corresponding node.\nToggle the Select Widget Mode button again to exit\nwidget select mode.", "When debugging layout issues, the key fields to look at are the\nsize and constraints fields. The constraints flow down the tree,\nand the sizes flow back up. For more information on how this works,\nsee Understanding constraints.", "The Flutter Layout Explorer helps you to better understand\nFlutter layouts.", "For an overview of what you can do with this tool, see\nthe Flutter Explorer video:", "You might also find the following step-by-step article useful:", "From the Flutter Inspector, select a widget. The Layout Explorer\nsupports both flex layouts and fixed size layouts, and has\nspecific tooling for both kinds.", "When you select a flex widget (for example, Row, Column, Flex)\nor a direct child of a flex widget, the flex layout tool will\nappear in the Layout Explorer.", "The Layout Explorer visualizes how Flex widgets and their\nchildren are laid out. The explorer identifies the main axis\nand cross axis, as well as the current alignment for each\n(for example, start, end, and spaceBetween).\nIt also shows details like flex factor, flex fit, and layout\nconstraints.", "Additionally, the explorer shows layout constraint violations\nand render overflow errors. Violated layout constraints\nare colored red, and overflow errors are presented in the\nstandard  \u201cyellow-tape\u201d pattern, as you might see on a running\ndevice. These visualizations aim to improve understanding of\nwhy overflow errors occur as well as how to fix them.", "Clicking a widget in the layout explorer mirrors\nthe selection on the on-device inspector. Select Widget Mode\nneeds to be enabled for this. To enable it,\nclick on the Select Widget Mode button in the inspector.", "For some properties, like flex factor, flex fit, and alignment,\nyou can modify the value via dropdown lists in the explorer.\nWhen modifying a widget property, you see the new value reflected\nnot only in the Layout Explorer, but also on the\ndevice running your Flutter app. The explorer animates\non property changes so that the effect of the change is clear.\nWidget property changes made from the layout explorer don\u2019t\nmodify your source code and are reverted on hot reload.", "Layout Explorer supports modifying mainAxisAlignment,\ncrossAxisAlignment, and FlexParentData.flex.\nIn the future, we may add support for additional properties\nsuch as mainAxisSize, textDirection, and\nFlexParentData.fit.", "Layout Explorer supports 7 flex options in the UI\n(null, 0, 1, 2, 3, 4, 5), but technically the flex\nfactor of a flex widget\u2019s child can be any int.", "Layout Explorer supports the two different types of\nFlexFit: loose and tight.", "When you select a fixed size widget that is not a child\nof a flex widget, fixed size layout information will appear\nin the Layout Explorer. You can see size, constraint, and padding\ninformation for both the selected widget and its nearest upstream\nRenderObject.", "The Flutter Inspector provides several options for visually debugging your app.", "When enabled, this option runs animations 5 times slower for easier visual\ninspection.\nThis can be useful if you want to carefully observe and tweak an animation that\ndoesn\u2019t look quite right.", "This can also be set in code:", "This slows the animations by 5x.", "The following links provide more info.", "The following screen recordings show before and after slowing an animation.", "This feature draws guidelines over your app that display render boxes, alignments,\npaddings, scroll views, clippings and spacers.", "This tool can be used for better understanding your layout. For instance,\nby finding unwanted padding or understanding widget alignment.", "You can also enable this in code:", "Widgets that draw to the screen create a render box, the \nbuilding blocks of Flutter layouts. They\u2019re shown with a bright blue border:", "Alignments are shown with yellow arrows. These arrows show the vertical\nand horizontal offsets of a widget relative to its parent.\nFor example, this button\u2019s icon is shown as being centered by the four arrows:", "Padding is shown with a semi-transparent blue background:", "Widgets with scrolling contents (such as list views) are shown with green arrows:", "Clipping, for example when using the ClipRect widget, are shown\nwith a dashed pink line with a scissors icon:", "Spacer widgets are shown with a grey background,\nsuch as this SizedBox without a child:", "This option makes all baselines visible.\nBaselines are horizontal lines used to position text.", "This can be useful for checking whether text is precisely aligned vertically.\nFor example, the text baselines in the following screenshot are slightly misaligned:", "The Baseline widget can be used to adjust baselines.", "A line is drawn on any render box that has a baseline set;\nalphabetic baselines are shown as green and ideographic as yellow.", "You can also enable this in code:", "This option draws a border around all render boxes\nthat changes color every time that box repaints.", "This rotating rainbow of colors is useful for finding parts of your app\nthat are repainting too often and potentially harming performance.", "For example, one small animation could be causing an entire page\nto repaint on every frame.\nWrapping the animation in a RepaintBoundary widget limits\nthe repainting to just the animation.", "Here the progress indicator causes its container to repaint:", "Wrapping the progress indicator in a RepaintBoundary causes\nonly that section of the screen to repaint:", "RepaintBoundary widgets have tradeoffs. They can help with performance,\nbut they also have an overhead of creating a new canvas,\nwhich uses additional memory.", "You can also enable this option in code:", "This option highlights images that are too large by both inverting their colors\nand flipping them vertically:", "The highlighted images use more memory than is required;\nfor example, a large 5MB image displayed at 100 by 100 pixels.", "Such images can cause poor performance, especially on lower-end devices\nand when you have many images, as in a list view,\nthis performance hit can add up.\nInformation about each image is printed in the debug console:", "Images are deemed too large if they use at least 128KB more than required.", "Wherever possible, the best way to fix this problem is resizing\nthe image asset file so it\u2019s smaller.", "If this isn\u2019t possible, you can use the cacheHeight and cacheWidth\nparameters on the Image constructor:", "This makes the engine decode this image at the specified size,\nand reduces memory usage (decoding and storage is still more expensive\nthan if the image asset itself was shrunk).\nThe image is rendered to the constraints of the layout or width and height\nregardless of these parameters.", "This property can also be set in code:", "You can learn more at the following link:", "Select the Widget Details Tree tab to display the details tree for the\nselected widget. From here, you can gather useful information about a\nwidget\u2019s properties, render object, and children.", "Part of the functionality of the Flutter inspector is based on\ninstrumenting the application code in order to better understand\nthe source locations where widgets are created. The source\ninstrumentation allows the Flutter inspector to present the\nwidget tree in a manner similar to how the UI was defined\nin your source code. Without it, the tree of nodes in the\nwidget tree are much deeper, and it can be more difficult to\nunderstand how the runtime widget hierarchy corresponds to\nyour application\u2019s UI.", "You can disable this feature by passing --no-track-widget-creation to\nthe flutter run command.", "Here are examples of what your widget tree might look like\nwith and without track widget creation enabled.", "Track widget creation enabled (default):", "Track widget creation disabled (not recommended):", "This feature prevents otherwise-identical const Widgets from\nbeing considered equal in debug builds. For more details, see\nthe discussion on common problems when debugging.", "For a demonstration of what\u2019s generally possible with the inspector,\nsee the DartConf 2018 talk demonstrating the IntelliJ version\nof the Flutter inspector.", "To learn how to visually debug layout issues\nusing DevTools, check out a guided\nFlutter Inspector tutorial.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/inspector", "base_url": "https://docs.flutter.dev/"}, {"title": "Using Actions and Shortcuts | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page describes how to bind physical keyboard events to actions in the user\ninterface. For instance, to define keyboard shortcuts in your application, this\npage is for you.", "For a GUI application to do anything, it has to have actions: users want to tell\nthe application to do something. Actions are often simple functions that\ndirectly perform the action (such as set a value or save a file). In a larger\napplication, however, things are more complex: the code for invoking the action,\nand the code for the action itself might need to be in different places.\nShortcuts (key bindings) might need definition at a level that knows nothing\nabout the actions they invoke.", "That\u2019s where Flutter\u2019s actions and shortcuts system comes in. It allows\ndevelopers to define actions that fulfill intents bound to them. In this\ncontext, an intent is a generic action that the user wishes to perform, and an\nIntent class instance represents these user intents in Flutter. An\nIntent can be general purpose, fulfilled by different actions in different\ncontexts. An Action can be a simple callback (as in the case of\nthe CallbackAction) or something more complex that integrates with entire\nundo/redo architectures (for example) or other logic.", "Shortcuts are key bindings that activate by pressing a key or combination\nof keys. The key combinations reside in a table with their bound intent. When\nthe Shortcuts widget invokes them, it sends their matching intent to the\nactions subsystem for fulfillment.", "To illustrate the concepts in actions and shortcuts, this article creates a\nsimple app that allows a user to select and copy text in a text field using both\nbuttons and shortcuts.", "You might wonder: why not just map a key combination directly to an action?  Why\nhave intents at all? This is because it is useful to have a separation of\nconcerns between where the key mapping definitions are (often at a high level),\nand where the action definitions are (often at a low level), and because it is\nimportant to be able to have a single key combination map to an intended\noperation in an app, and have it adapt automatically to whichever action\nfulfills that intended operation for the focused context.", "For instance, Flutter has an ActivateIntent widget that maps each type of\ncontrol to its corresponding version of an ActivateAction (and that executes\nthe code that activates the control). This code often needs fairly private\naccess to do its work. If the extra layer of indirection that Intents provide\ndidn\u2019t exist, it would be necessary to elevate the definition of the actions to\nwhere the defining instance of the Shortcuts widget could see them, causing\nthe shortcuts to have more knowledge than necessary about which action to\ninvoke, and to have access to or provide state that it wouldn\u2019t necessarily have\nor need otherwise. This allows your code to separate the two concerns to be more\nindependent.", "Intents configure an action so that the same action can serve multiple uses. An\nexample of this is DirectionalFocusIntent, which takes a direction to move\nthe focus in, allowing the DirectionalFocusAction to know which direction to\nmove the focus. Just be careful: don\u2019t pass state in the Intent that applies\nto all  invocations of an Action: that kind of state should be passed to the\nconstructor of the Action itself, to keep the Intent from needing to know\ntoo much.", "You also might wonder: why not just use a callback instead of an Action\nobject? The main reason is that it\u2019s useful for actions to decide whether they\nare enabled by implementing isEnabled. Also, it is often helpful if the key\nbindings, and the implementation of those bindings, are in different places.", "If all you need are callbacks without the flexibility of Actions and\nShortcuts, you can use the CallbackShortcuts widget:", "As you\u2019ll see below, actions are useful on their own, but the most common use\ncase involves binding them to a keyboard shortcut. This is what the Shortcuts\nwidget is for.", "It is inserted into the widget hierarchy to define key combinations that\nrepresent the user\u2019s intent when that key combination is pressed. To convert\nthat intended purpose for the key combination into a concrete action, the\nActions widget used to map the Intent to an Action. For instance, you can\ndefine a SelectAllIntent, and bind it to your own SelectAllAction or to your\nCanvasSelectAllAction, and from that one key binding, the system invokes\neither one, depending on which part of your application has focus. Let\u2019s see how\nthe key binding part works:", "The map given to a Shortcuts widget maps a LogicalKeySet (or a\nShortcutActivator, see note below) to an Intent instance. The logical key\nset defines a set of one or more keys, and the intent indicates the intended\npurpose of the keypress. The Shortcuts widget looks up keypresses in the map,\nto find an Intent instance, which it gives to the action\u2019s invoke() method.", "info Note:\nShortcutActivator is a replacement (as of Flutter 2.3.0) for\n  LogicalKeySet. It allows for more flexible and correct activation of\n  shortcuts. LogicalKeySet is a ShortcutActivator, of course, but there is\n  also SingleActivator, which takes a single key and the optional modifiers to\n  be pressed before the key, and CharacterActivator, which activates a shortcut\n  based on the character produced by a key sequence, instead of the logical keys\n  themselves. ShortcutActivator is also meant to be subclassed to allow for\n  custom ways of activating shortcuts from key events.", "The shortcut manager, a longer-lived object than the Shortcuts widget, passes\non key events when it receives them. It contains the logic for deciding how to\nhandle the keys, the logic for walking up the tree to find other shortcut\nmappings, and maintains a map of key combinations to intents.", "While the default behavior of the ShortcutManager is usually desirable, the\nShortcuts widget takes a ShortcutManager that you can subclass to customize\nits functionality.", "For example, if you wanted to log each key that a Shortcuts widget handled,\nyou could make a LoggingShortcutManager:", "Now, every time the Shortcuts widget handles a shortcut, it prints out the key\nevent and relevant context.", "Actions allow for the definition of operations that the application can\nperform by invoking them with an Intent. Actions can be enabled or disabled,\nand receive the intent instance that invoked them as an argument to allow\nconfiguration by the intent.", "Actions, in their simplest form, are just subclasses of Action<Intent> with an\ninvoke() method. Here\u2019s a simple action that simply invokes a function on the\nprovided model:", "Or, if it\u2019s too much of a bother to create a new class, use a CallbackAction:", "Once you have an action, you add it to your application using the Actions\nwidget, which takes a map of Intent types to Actions:", "The Shortcuts widget uses the Focus widget\u2019s context and Actions.invoke to\nfind which action to invoke. If the Shortcuts widget doesn\u2019t find a matching\nintent type in the first Actions widget encountered, it considers the next\nancestor Actions widget, and so on, until it reaches the root of the widget\ntree, or finds a matching intent type and invokes the corresponding action.", "The actions system has several ways to invoke actions.  By far the most common\nway is through the use of a Shortcuts widget covered in the previous section,\nbut there are other ways to interrogate the actions subsystem and invoke an\naction. It\u2019s possible to invoke actions that are not bound to keys.", "For instance, to find an action associated with an intent, you can use:", "This returns an Action associated with the SelectAllIntent type if one is\navailable in the given context.  If one isn\u2019t available, it returns null. If\nan associated Action should always be available, then use find instead of\nmaybeFind, which throws an exception when it doesn\u2019t find a matching Intent\ntype.", "To invoke the action (if it exists), call:", "Combine that into one call with the following:", "Sometimes you want to invoke an action as a result of pressing a button or\nanother control. Do this with the Actions.handler function, which creates a\nhandler closure if the intent has a mapping to an enabled action, and returns\nnull if it doesn\u2019t, so that the button is disabled if there is no matching\nenabled action in the context:", "The Actions widget only invokes actions when isEnabled(Intent intent)\nreturns true, allowing the action to decide if the dispatcher should consider it\nfor invocation.  If the action isn\u2019t enabled, then the Actions widget gives\nanother enabled action higher in the widget hierarchy (if it exists) a chance to\nexecute.", "The previous example uses a Builder because Actions.handler and\nActions.invoke (for example) only finds actions in the provided context, and\nif the example passes the context given to the build function, the framework\nstarts looking above the current widget.  Using a Builder allows the\nframework to find the actions defined in the same build function.", "You can invoke an action without needing a BuildContext, but since the\nActions widget requires a context to find an enabled action to invoke, you\nneed to provide one, either by creating your own Action instance, or by\nfinding one in an appropriate context with Actions.find.", "To invoke the action, pass the action to the invoke method on an\nActionDispatcher, either one you created yourself, or one retrieved from an\nexisting Actions widget using the Actions.of(context) method. Check whether\nthe action is enabled before calling invoke. Of course, you can also just call\ninvoke on the action itself, passing an Intent, but then you opt out of any\nservices that an action dispatcher might provide (like logging, undo/redo, and\nso on).", "Most of the time, you just want to invoke an action, have it do its thing, and\nforget about it. Sometimes, however, you might want to log the executed actions.", "This is where replacing the default ActionDispatcher with a custom dispatcher\ncomes in.  You pass your ActionDispatcher to the Actions widget, and it\ninvokes actions from any Actions widgets below that one that doesn\u2019t set a\ndispatcher of its own.", "The first thing Actions does when invoking an action is look up the\nActionDispatcher and pass the action to it for invocation. If there is none,\nit creates a default ActionDispatcher that simply invokes the action.", "If you want a log of all the actions invoked, however, you can create your own\nLoggingActionDispatcher to do the job:", "Then you pass that to your top-level Actions widget:", "This logs every action as it executes, like so:", "The combination of Actions and Shortcuts is powerful: you can define generic\nintents that map to specific actions at the widget level. Here\u2019s a simple app\nthat illustrates the concepts described above. The app creates a text field that\nalso has \u201cselect all\u201d and \u201ccopy to clipboard\u201d buttons next to it. The buttons\ninvoke actions to accomplish their work. All the invoked actions and\nshortcuts are logged.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/interactivity/actions-and-shortcuts", "base_url": "https://docs.flutter.dev/"}, {"title": "Adding assets and images | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter apps can include both code and assets\n(sometimes called resources). An asset is a file\nthat is bundled and deployed with your app,\nand is accessible at runtime. Common types of assets include\nstatic data (for example, JSON files),\nconfiguration files, icons, and images\n(JPEG, WebP, GIF, animated WebP/GIF, PNG, BMP, and WBMP).", "Flutter uses the pubspec.yaml file,\nlocated at the root of your project,\nto identify assets required by an app.", "Here is an example:", "To include all assets under a directory,\nspecify the directory name with the / character at the end:", "info Note:\n Only files located directly in the directory are included.\n Resolution-aware asset image variants are the only exception.\n To add files located in subdirectories, create an entry per directory.", "The assets subsection of the flutter section\nspecifies files that should be included with the app.\nEach asset is identified by an explicit path\n(relative to the pubspec.yaml file) where the asset\nfile is located. The order in which the assets are\ndeclared doesn\u2019t matter. The actual directory name used\n(assets in first example or directory in the above\nexample) doesn\u2019t matter.", "During a build, Flutter places assets into a special\narchive called the asset bundle that apps read\nfrom at runtime.", "Your app can access its assets through an\nAssetBundle object.", "The two main methods on an asset bundle allow you to load a\nstring/text asset (loadString()) or an image/binary asset (load())\nout of the bundle, given a logical key. The logical key maps to the path\nto the asset specified in the pubspec.yaml file at build time.", "Each Flutter app has a rootBundle\nobject for easy access to the main asset bundle.\nIt is possible to load assets directly using the\nrootBundle global static from\npackage:flutter/services.dart.", "However, it\u2019s recommended to obtain the AssetBundle\nfor the current BuildContext using\nDefaultAssetBundle, rather than the default\nasset bundle that was built with the app; this\napproach enables a parent widget to substitute a\ndifferent AssetBundle at run time,\nwhich can be useful for localization or testing\nscenarios.", "Typically, you\u2019ll use DefaultAssetBundle.of()\nto indirectly load an asset, for example a JSON file,\nfrom the app\u2019s runtime rootBundle.", "Outside of a Widget context, or when a handle\nto an AssetBundle is not available,\nyou can use rootBundle to directly load such assets.\nFor example:", "To load an image, use the AssetImage\nclass in a widget\u2019s build() method.", "For example, your app can load the background\nimage from the asset declarations in the previous example:", "Flutter can load resolution-appropriate images for\nthe current device pixel ratio.", "AssetImage will map a logical requested\nasset onto one that most closely matches the current\ndevice pixel ratio.", "For this mapping to work, assets should be arranged\naccording to a particular directory structure:", "Where M and N are numeric identifiers that correspond\nto the nominal resolution of the images contained within.\nIn other words, they specify the device pixel ratio that\nthe images are intended for.", "In this example, image.png is considered the main asset,\nwhile Mx/image.png and Nx/image.png are considered to be\nvariants.", "The main asset is assumed to correspond to a resolution of 1.0.\nFor example, consider the following asset layout for an\nimage named my_icon.png:", "On devices with a device pixel ratio of 1.8, the asset\n.../2.0x/my_icon.png is chosen.\nFor a device pixel ratio of 2.7, the asset\n.../3.0x/my_icon.png is chosen.", "If the width and height of the rendered image are not specified\non the Image widget, the nominal resolution is used to scale\nthe asset so that it occupies the same amount of screen space\nas the main asset would have, just with a higher resolution.\nThat is, if .../my_icon.png is 72px by 72px, then\n.../3.0x/my_icon.png should be 216px by 216px;\nbut they both render into 72px by 72px (in logical pixels),\nif width and height are not specified.", "info Note:\nDevice pixel ratio depends on MediaQueryData.size, which requires having either\n  MaterialApp or CupertinoApp as an ancestor of your AssetImage.", "You only need to specify the main asset or its parent directory\nin the assets section of pubspec.yaml.\nFlutter bundles the variants for you.\nEach entry should correspond to a real file, with the exception of\nthe main asset entry. If the main asset entry doesn\u2019t correspond\nto a real file, then the asset with the lowest resolution\nis used as the fallback for devices with device pixel\nratios below that resolution. The entry should still\nbe included in the pubspec.yaml manifest, however.", "Anything using the default asset bundle inherits resolution\nawareness when loading images. (If you work with some of the lower\nlevel classes, like ImageStream or ImageCache,\nyou\u2019ll also notice parameters related to scale.)", "To load an image from a package dependency,\nthe package argument must be provided to AssetImage.", "For instance, suppose your application depends on a package\ncalled my_icons, which has the following directory structure:", "To load the image, use:", "Assets used by the package itself should also be fetched\nusing the package argument as above.", "If the desired asset is specified in the pubspec.yaml\nfile of the package, it\u2019s bundled automatically with the\napplication. In particular, assets used by the package\nitself must be specified in its pubspec.yaml.", "A package can also choose to have assets in its lib/\nfolder that are not specified in its pubspec.yaml file.\nIn this case, for those images to be bundled,\nthe application has to specify which ones to include in its\npubspec.yaml. For instance, a package named fancy_backgrounds\ncould have the following files:", "To include, say, the first image, the pubspec.yaml of the\napplication should specify it in the assets section:", "The lib/ is implied,\nso it should not be included in the asset path.", "If you are developing a package, to load an asset within the package, specify it in the pubspec.yaml of the package:", "To load the image within your package, use:", "Flutter assets are readily available to platform code\nusing the AssetManager on Android and NSBundle on iOS.", "On Android the assets are available through the\nAssetManager API.  The lookup key used in,\nfor instance openFd, is obtained from\nlookupKeyForAsset on PluginRegistry.Registrar or\ngetLookupKeyForAsset on FlutterView.\nPluginRegistry.Registrar is available when developing a plugin\nwhile FlutterView would be the choice when developing an\napp including a platform view.", "As an example, suppose you have specified the following\nin your pubspec.yaml", "This reflects the following structure in your Flutter app.", "To access icons/heart.png from your Java plugin code,\ndo the following:", "On iOS the assets are available through the mainBundle.\nThe lookup key used in, for instance pathForResource:ofType:,\nis obtained from lookupKeyForAsset or lookupKeyForAsset:fromPackage:\non FlutterPluginRegistrar, or lookupKeyForAsset: or\nlookupKeyForAsset:fromPackage: on FlutterViewController.\nFlutterPluginRegistrar is available when developing\na plugin while FlutterViewController would be the choice\nwhen developing an app including a platform view.", "As an example, suppose you have the Flutter setting from above.", "To access icons/heart.png from your Objective-C plugin code you\nwould do the following:", "To access icons/heart.png from your Swift app you\nwould do the following:", "For a more complete example, see the implementation of the\nFlutter video_player plugin on pub.dev.", "The ios_platform_images plugin on pub.dev wraps\nup this logic in a convenient category. You fetch\nan image as follows:", "When implementing Flutter by\nadding it to an existing iOS app,\nyou might have images hosted in iOS that you\nwant to use in Flutter. To accomplish\nthat, use the ios_platform_images plugin\navailable on pub.dev.", "There are other occasions to work with assets in the\nplatform projects directly. Below are two common cases\nwhere assets are used before the Flutter framework is\nloaded and running.", "Updating a Flutter application\u2019s launch icon works\nthe same way as updating launch icons in native\nAndroid or iOS applications.", "In your Flutter project\u2019s root directory, navigate to\n.../android/app/src/main/res. The various bitmap resource\nfolders such as mipmap-hdpi already contain placeholder\nimages named ic_launcher.png. Replace them with your\ndesired assets respecting the recommended icon size per\nscreen density as indicated by the Android Developer Guide.", "info Note:\n  If you rename the .png files, you must also update the\n  corresponding name in your AndroidManifest.xml\u2019s\n  <application> tag\u2019s android:icon attribute.", "In your Flutter project\u2019s root directory,\nnavigate to .../ios/Runner. The\nAssets.xcassets/AppIcon.appiconset directory already contains\nplaceholder images. Replace them with the appropriately\nsized images as indicated by their filename as dictated by the\nApple Human Interface Guidelines.\nKeep the original file names.", "Flutter also uses native platform mechanisms to draw\ntransitional launch screens to your Flutter app while the\nFlutter framework loads. This launch screen persists until\nFlutter renders the first frame of your application.", "info Note:\n  This implies that if you don\u2019t call runApp() in the\n  main() function of your app (or more specifically,\n  if you don\u2019t call FlutterView.render() in response to\n  PlatformDispatcher.onDrawFrame),\n  the launch screen persists forever.", "To add a launch screen (also known as \u201csplash screen\u201d) to your\nFlutter application, navigate to .../android/app/src/main.\nIn res/drawable/launch_background.xml,\nuse this layer list drawable XML to customize\nthe look of your launch screen. The existing template provides\nan example of adding an image to the middle of a white splash\nscreen in commented code. You can uncomment it or use other\ndrawables to achieve the intended effect.", "For more details, see\nAdding a splash screen to your Android app.", "To add an image to the center of your \u201csplash screen\u201d,\nnavigate to .../ios/Runner.\nIn Assets.xcassets/LaunchImage.imageset,\ndrop in images named LaunchImage.png,\nLaunchImage@2x.png, LaunchImage@3x.png.\nIf you use different filenames,\nupdate the Contents.json file in the same directory.", "You can also fully customize your launch screen storyboard\nin Xcode by opening .../ios/Runner.xcworkspace.\nNavigate to Runner/Runner in the Project Navigator and\ndrop in images by opening Assets.xcassets or do any\ncustomization using the Interface Builder in\nLaunchScreen.storyboard.", "For more details, see\nAdding a splash screen to your iOS app.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/assets/assets-and-images", "base_url": "https://docs.flutter.dev/"}, {"title": "Code formatting | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "While your code might follow any preferred style\u2014in our\nexperience\u2014teams of developers might find it more productive to:", "The alternative is often tiring formatting debates during code reviews,\nwhere time might be better spent on code behavior rather than code style.", "Install the Flutter extension (see\nEditor setup)\nto get automatic formatting of code in VS Code.", "To automatically format the code in the current source code window,\nright-click in the code window and select Format Document.\nYou can add a keyboard shortcut to this VS Code Preferences.", "To automatically format code whenever you save a file, set the\neditor.formatOnSave setting to true.", "Install the Dart plugin (see\nEditor setup)\nto get automatic formatting of code in Android Studio and IntelliJ.\nTo format your code in the current source code window:", "Android Studio and IntelliJ also provide a checkbox named\nFormat code on save on the Flutter page in Preferences\non macOS or Settings on Windows and Linux.\nThis option corrects formatting in the current file when you save it.", "To correct code formatting in the command line interface (CLI),\nrun the dart format command:", "Flutter code often involves building fairly deep tree-shaped data structures,\nfor example in a build method. To get good automatic formatting,\nwe recommend you adopt the optional trailing commas.\nThe guideline for adding a trailing comma is simple: Always\nadd a trailing comma at the end of a parameter list in\nfunctions, methods, and constructors where you care about\nkeeping the formatting you crafted.\nThis helps the automatic formatter to insert an appropriate\namount of line breaks for Flutter-style code.", "Here is an example of automatically formatted code with trailing commas:", "And the same code automatically formatted code without trailing commas:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/formatting", "base_url": "https://docs.flutter.dev/"}, {"title": "Add a Flutter screen to an iOS app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide describes how to add a single Flutter screen to an existing iOS app.", "To launch a Flutter screen from an existing iOS, you start a\nFlutterEngine and a FlutterViewController.", "The FlutterEngine serves as a host to the Dart VM and your Flutter runtime,\n  and the FlutterViewController attaches to a FlutterEngine to pass \n  input events into Flutter and to display frames rendered by the\n  FlutterEngine.", "The FlutterEngine might have the same lifespan as your\nFlutterViewController or outlive your FlutterViewController.", "tips_and_updates Tip:\n  It\u2019s generally recommended to pre-warm a long-lived\n  FlutterEngine for your application because:", "See Loading sequence and performance\nfor more analysis on the latency and memory\ntrade-offs of pre-warming an engine.", "Where you create a FlutterEngine depends on your host app.", "In this example, we create a FlutterEngine object inside a SwiftUI ObservableObject. \nWe then pass this FlutterEngine into a ContentView using the \n environmentObject() property.", "As an example, we demonstrate creating a\nFlutterEngine, exposed as a property, on app startup in\nthe app delegate.", "In this example, we create a FlutterEngine \nobject inside a SwiftUI ObservableObject. \nWe then pass this FlutterEngine into a \nContentView using the environmentObject() property.", "The following example shows a generic ContentView with a\nButton hooked to present a FlutterViewController.\nThe FlutterViewController constructor takes the pre-warmed \nFlutterEngine as an argument. FlutterEngine is passed in \nas an EnvironmentObject via flutterDependencies.", "The following example shows a generic ViewController with a\nUIButton hooked to present a FlutterViewController.\nThe FlutterViewController uses the FlutterEngine instance\ncreated in the AppDelegate.", "The following example shows a generic ViewController with a\nUIButton hooked to present a FlutterViewController.\nThe FlutterViewController uses the FlutterEngine instance\ncreated in the AppDelegate.", "Now, you have a Flutter screen embedded in your iOS app.", "info Note:\n  Using the previous example, the default main()\n  entrypoint function of your default Dart library\n  would run when calling run on the\n  FlutterEngine created in the AppDelegate.", "As an alternative to the previous example, you can let the\nFlutterViewController implicitly create its own FlutterEngine without\npre-warming one ahead of time.", "This is not usually recommended because creating a\nFlutterEngine on-demand could introduce a noticeable\nlatency between when the FlutterViewController is\npresented and when it renders its first frame. This could, however, be\nuseful if the Flutter screen is rarely shown, when there are no good\nheuristics to determine when the Dart VM should be started, and when Flutter\ndoesn\u2019t need to persist state between view controllers.", "To let the FlutterViewController present without an existing\nFlutterEngine, omit the FlutterEngine construction, and create the\nFlutterViewController without an engine reference.", "See Loading sequence and performance\nfor more explorations on latency and memory usage.", "Letting your application\u2019s UIApplicationDelegate subclass\nFlutterAppDelegate is recommended but not required.", "The FlutterAppDelegate performs functions such as:", "Creating a subclass of the the FlutterAppDelegate in UIKit apps was shown \nin the Start a FlutterEngine and FlutterViewController section. \nIn a SwiftUI app, you can create a subclass of the \nFlutterAppDelegate that conforms to the ObservableObject protocol as follows:", "Then, in your view, the AppDelegateis accessible as an EnvironmentObject.", "If your app delegate can\u2019t directly make FlutterAppDelegate a subclass,\nmake your app delegate implement the FlutterAppLifeCycleProvider\nprotocol in order to make sure your plugins receive the necessary callbacks.\nOtherwise, plugins that depend on these events might have undefined behavior.", "The implementation should delegate mostly to a\nFlutterPluginAppLifeCycleDelegate:", "The examples demonstrate running Flutter using the default launch settings.", "In order to customize your Flutter runtime,\nyou can also specify the Dart entrypoint, library, and route.", "Calling run on a FlutterEngine, by default,\nruns the main() Dart function\nof your lib/main.dart file.", "You can also run a different entrypoint function by using\nrunWithEntrypoint with an NSString specifying\na different Dart function.", "info Note:\n  Dart entrypoint functions other than main()\n  must be annotated with the following in order to\n  not be tree-shaken away when compiling:", "In addition to specifying a Dart function, you can specify an entrypoint\nfunction in a specific file.", "For instance the following runs myOtherEntrypoint()\nin lib/other_file.dart instead of main() in lib/main.dart:", "Starting in Flutter version 1.22, an initial route can be set for your Flutter\nWidgetsApp when constructing the FlutterEngine or the\nFlutterViewController.", "This code sets your dart:ui\u2019s window.defaultRouteName\nto \"/onboarding\" instead of \"/\".", "Alternatively, to construct a FlutterViewController directly without pre-warming\na FlutterEngine:", "tips_and_updates Tip:\n  In order to imperatively change your current Flutter\n  route from the platform side after the FlutterEngine\n  is already running, use pushRoute()\n  or popRoute() on the FlutterViewController.", "To pop the iOS route from the Flutter side,\n  call SystemNavigator.pop().", "See Navigation and routing for more about Flutter\u2019s routes.", "The previous example only illustrates a few ways to customize\nhow a Flutter instance is initiated. Using platform channels,\nyou\u2019re free to push data or prepare your Flutter environment\nin any way you\u2019d like, before presenting the Flutter UI using a\nFlutterViewController.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/ios/add-flutter-screen", "base_url": "https://docs.flutter.dev/"}, {"title": "Test drive | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page describes the following tasks:", "Details for these tasks depend on the integrated development environment\n(IDE) you use.", "The first two options listed rely on the Flutter plugin for\nthe respective IDE.\nVisual Studio Code, Android Studio, and IntelliJ IDEA Community,\nEducational, and Ultimate editions support Flutter development\nthrough plugins.", "The third option explains how to use an editor of your choice and\nthe terminal to run the commands.", "Select your preferred IDE for Flutter apps.", "The above commands create a Flutter project directory called my_app that\ncontains a simple demo app that uses Material Components.", "info Note:\n  When creating a new Flutter app, some Flutter IDE plugins ask for a\n  company domain name in reverse order, something like com.example.\n  The company domain name and project name are used together as the\n  package name for Android (the Bundle ID for iOS) when the app is released.\n  If you think that the app might be released,\n  it\u2019s better to specify the package name now.\n  The package name can\u2019t be changed once the app is released,\n  so make the name unique.", "report_problem Warning:\n  If VS Code was running during your initial Flutter setup, \n  you might need to restart it for VS Code\u2019s Flutter plugin to detect the Flutter SDK.", "tips_and_updates Tip:\n  The code for your app is in lib/main.dart.\n  For a high-level description of what each code block does,\n  see the comments at the top of that file.", "Locate the VS Code status bar\n(the blue bar at the bottom of the window):\n", "Select a device from the Device Selector area.\nFor details, see Quickly switching between Flutter devices.", "If no device is available, and you want to use a device simulator,\nclick No Devices and click\nStart iOS Simulator to launch a simulator.", "report_problem Warning:\n  You might not see Start iOS Simulator option\n  when you click No Devices in VS Code.\n  If you\u2019re on Mac, then you might have to run following command\n  in terminal to launch a simulator.", "On Windows or Linux, it\u2019s not possible to launch an iOS simulator.", "To setup a real device, follow the device-specific instructions\non the Install page for your OS.", "Invoke Run > Start Debugging or press F5.", "Wait for the app to launch\u2014progress is printed\nin the Debug Console view.", "After the app build completes, you\u2019ll see the starter app on your device.", "Flutter offers a fast development cycle with Stateful Hot Reload,\nthe ability to reload the code of a live running app without\nrestarting or losing app state.\nMake a change to app source,\ntell your IDE or command-line tool that you want to hot reload,\nand see the change in your simulator, emulator, or device.", "error Important:\n  Do not stop your app. Let your app run.", "You\u2019ll see the updated string in the running app almost immediately.", "error Important:\n  Do not test the performance of your app with debug and\n  hot reload enabled.", "So far you\u2019ve been running your app in debug mode. Debug\nmode trades performance for useful developer features such\nas hot reload and step debugging. It\u2019s not unexpected to\nsee slow performance and janky animations in debug mode.\nOnce you are ready to analyze performance or release your\napp, you\u2019ll want to use Flutter\u2019s \u201cprofile\u201d or \u201crelease\u201d\nbuild modes. For more details, see Flutter\u2019s build modes.", "error Important:\n  If you\u2019re concerned about the package size of your app,\n  see Measuring your app\u2019s size.", "info Note:\n  When creating a new Flutter app, some Flutter IDE plugins ask for a\n  company domain name in reverse order, something like com.example.\n  The company domain name and project name are used together as the\n  package name for Android (the Bundle ID for iOS) when the app is released.\n  If you think that the app might be released,\n  it\u2019s better to specify the package name now.\n  The package name can\u2019t be changed once the app is released,\n  so make the name unique.", "The above commands create a Flutter project directory\ncalled my_app that contains a simple demo app that\nuses Material Components.", "tips_and_updates Tip:\n  The code for your app is in lib/main.dart.\n  For a high-level description of what each code block does,\n  see the comments at the top of that file.", "After the app build completes, you\u2019ll see the starter app on your device.", "Flutter offers a fast development cycle with Stateful Hot Reload,\nthe ability to reload the code of a live running app without\nrestarting or losing app state.\nMake a change to app source,\ntell your IDE or command-line tool that you want to hot reload,\nand see the change in your simulator, emulator, or device.", "error Important:\n  Do not stop your app. Let your app run.", "You\u2019ll see the updated string in the running app almost immediately.", "error Important:\n  Do not test the performance of your app with debug and\n  hot reload enabled.", "So far you\u2019ve been running your app in debug mode. Debug\nmode trades performance for useful developer features such\nas hot reload and step debugging. It\u2019s not unexpected to\nsee slow performance and janky animations in debug mode.\nOnce you are ready to analyze performance or release your\napp, you\u2019ll want to use Flutter\u2019s \u201cprofile\u201d or \u201crelease\u201d\nbuild modes. For more details, see Flutter\u2019s build modes.", "error Important:\n  If you\u2019re concerned about the package size of your app,\n  see Measuring your app\u2019s size.", "Use the flutter create command to create a new project:", "It is also possible to pass other arguments to flutter create,\nsuch as the project name, the organization name,\nor to specify the programming language used for the native platform:", "The command creates a Flutter project directory called my_app that\ncontains a simple demo app that uses Material Components.", "tips_and_updates Tip:\n  The code for your app is in lib/main.dart.\n  For a high-level description of what each code block does,\n  see the comments at the top of that file.", "Check that an Android device is running.\nIf none are shown, follow the device-specific instructions\non the Install page for your OS.", "Run the app with the following command:", "After the app build completes, you\u2019ll see the starter app on your device.", "Flutter offers a fast development cycle with Stateful Hot Reload,\nthe ability to reload the code of a live running app without\nrestarting or losing app state.\nMake a change to app source,\ntell your IDE or command-line tool that you want to hot reload,\nand see the change in your simulator, emulator, or device.", "error Important:\n  Do not stop your app. Let your app run.", "You\u2019ll see the updated string in the running app almost immediately.", "error Important:\n  Do not test the performance of your app with debug and\n  hot reload enabled.", "So far you\u2019ve been running your app in debug mode. Debug\nmode trades performance for useful developer features such\nas hot reload and step debugging. It\u2019s not unexpected to\nsee slow performance and janky animations in debug mode.\nOnce you are ready to analyze performance or release your\napp, you\u2019ll want to use Flutter\u2019s \u201cprofile\u201d or \u201crelease\u201d\nbuild modes. For more details, see Flutter\u2019s build modes.", "error Important:\n  If you\u2019re concerned about the package size of your app,\n  see Measuring your app\u2019s size.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/test-drive", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for Xamarin.Forms developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This document is meant for Xamarin.Forms developers\nlooking to apply their existing knowledge\nto build mobile apps with Flutter.\nIf you understand the fundamentals of the Xamarin.Forms framework,\nthen you can use this document as a jump start to Flutter development.", "Your Android and iOS knowledge and skill set\nare valuable when building with Flutter,\nbecause Flutter relies on the native operating system configurations,\nsimilar to how you would configure your native Xamarin.Forms projects.\nThe Flutter Frameworks is also similar to how you create a single UI,\nthat is used on multiple platforms.", "This document can be used as a cookbook by jumping around\nand finding questions that are most relevant to your needs.", "For each platform in Xamarin.Forms,\nyou call the LoadApplication method,\nwhich creates a new application and starts your app.", "In Flutter, the default main entry point is\nmain where you load your Flutter app.", "In Xamarin.Forms, you assign a Page to the\nMainPage property in the Application class.", "In Flutter, \u201ceverything is a widget\u201d, even the application itself.\nThe following example shows MyApp, a simple application Widget.", "Xamarin.Forms has many types of pages;\nContentPage is the most common.\nIn Flutter, you specify an application widget that holds your root page.\nYou can use a MaterialApp widget, which supports Material Design,\nor you can use a CupertinoApp widget, which supports an iOS-style app,\nor you can use the lower level WidgetsApp,\nwhich you can customize in any way you want.", "The following code defines the home page, a stateful widget.\nIn Flutter, all widgets are immutable,\nbut two types of widgets are supported: Stateful and Stateless.\nExamples of a stateless widget are titles, icons, or images.", "The following example uses MaterialApp,\nwhich holds its root page in the home property.", "From here, your actual first page is another Widget,\nin which you create your state.", "A Stateful widget, such as MyHomePage below, consists of two parts.\nThe first part, which is itself immutable, creates a State object\nthat holds the state of the object. The State object persists over\nthe life of the widget.", "The State object implements the build() method for the stateful widget.", "When the state of the widget tree changes, call setState(),\nwhich triggers a build of that portion of the UI.\nMake sure to call setState() only when necessary,\nand only on the part of the widget tree that has changed,\nor it can result in poor UI performance.", "In Flutter, the UI (also known as widget tree), is immutable,\nmeaning you can\u2019t change its state once it\u2019s built.\nYou change fields in your State class, then call setState()\nto rebuild the entire widget tree again.", "This way of generating UI is different from Xamarin.Forms,\nbut there are many benefits to this approach.", "How is react-style, or declarative, programming different from the\n  traditional imperative style?\n  For a comparison, see Introduction to declarative UI.", "ContentPage, TabbedPage, FlyoutPage are all types of pages\nyou might use in a Xamarin.Forms application.\nThese pages would then hold Elements to display the various controls.\nIn Xamarin.Forms an Entry or Button are examples of an Element.", "In Flutter, almost everything is a widget.\nA Page, called a Route in Flutter, is a widget.\nButtons, progress bars, and animation controllers are all widgets.\nWhen building a route, you create a widget tree.", "Flutter includes the Material Components library.\nThese are widgets that implement the Material Design guidelines.\nMaterial Design is a flexible design system\noptimized for all platforms, including iOS.", "But Flutter is flexible and expressive enough\nto implement any design language.\nFor example, on iOS, you can use the Cupertino widgets\nto produce an interface that looks like Apple\u2019s iOS design language.", "In Xamarin.Forms, each Page or Element is a stateful class,\nthat has properties and methods.\nYou update your Element by updating a property,\nand this is propagated down to the native control.", "In Flutter, Widgets are immutable and you can\u2019t directly update them\nby changing a property, instead you have to work with the widget\u2019s state.", "This is where the concept of Stateful vs Stateless widgets comes from.\nA StatelessWidget is just what it sounds like\u2014\na widget with no state information.", "StatelessWidgets are useful when the part of the user interface\nyou are describing doesn\u2019t depend on anything\nother than the configuration information in the object.", "For example, in Xamarin.Forms, this is similar\nto placing an Image with your logo.\nThe logo is not going to change during runtime,\nso use a StatelessWidget in Flutter.", "If you want to dynamically change the UI based on data received\nafter making an HTTP call or a user interaction,\nthen you have to work with StatefulWidget\nand tell the Flutter framework that\nthe widget\u2019s State has been updated,\nso it can update that widget.", "The important thing to note here is at the core\nboth stateless and stateful widgets behave the same.\nThey rebuild every frame, the difference is\nthe StatefulWidget has a State object\nthat stores state data across frames and restores it.", "If you are in doubt, then always remember this rule: if a widget changes\n(because of user interactions, for example) it\u2019s stateful.\nHowever, if a widget reacts to change, the containing parent widget can\nstill be stateless if it doesn\u2019t itself react to change.", "The following example shows how to use a StatelessWidget.\nA common StatelessWidget is the Text widget.\nIf you look at the implementation of the Text widget\nyou\u2019ll find it subclasses StatelessWidget.", "As you can see, the Text widget has no state information associated with it,\nit renders what is passed in its constructors and nothing more.", "But, what if you want to make \u201cI Like Flutter\u201d change dynamically,\nfor example, when clicking a FloatingActionButton?", "To achieve this, wrap the Text widget in a StatefulWidget\nand update it when the user clicks the button,\nas shown in the following example:", "In Xamarin.Forms, most developers write layouts in XAML,\nthough sometimes in C#.\nIn Flutter, you write your layouts with a widget tree in code.", "The following example shows how to display a simple widget with padding:", "You can view the layouts that Flutter has to offer in the\nwidget catalog.", "In Xamarin.Forms, you had to remove or add an Element in code.\nThis involved either setting the Content property or calling\nAdd() or Remove() if it was a list.", "In Flutter, because widgets are immutable there is no direct equivalent.\nInstead, you can pass a function to the parent that returns a widget,\nand control that child\u2019s creation with a boolean flag.", "The following example shows how to toggle between two widgets\nwhen the user clicks the FloatingActionButton:", "In Xamarin.Forms, you create simple animations using ViewExtensions that\ninclude methods such as FadeTo and TranslateTo.\nYou would use these methods on a view\nto perform the required animations.", "Then in code behind, or a behavior, this would fade in the image,\nover a 1-second period.", "In Flutter, you animate widgets using the animation library\nby wrapping widgets inside an animated widget.\nUse an AnimationController, which is an Animation<double>\nthat can pause, seek, stop and reverse the animation.\nIt requires a Ticker that signals when vsync happens,\nand produces a linear interpolation between 0 and 1\non each frame while it\u2019s running.\nYou then create one or moreAnimations and attach them to the controller.", "For example, you might use CurvedAnimation\nto implement an animation along an interpolated curve.\nIn this sense, the controller is the \u201cmaster\u201d source of the animation progress\nand the CurvedAnimation computes the curve\nthat replaces the controller\u2019s default linear motion.\nLike widgets, animations in Flutter work with composition.", "When building the widget tree, you assign the Animation\nto an animated property of a widget,\nsuch as the opacity of a FadeTransition,\nand tell the controller to start the animation.", "The following example shows how to write a FadeTransition that fades\nthe widget into a logo when you press the FloatingActionButton:", "For more information, see Animation & Motion widgets,\nthe Animations tutorial, and the Animations overview.", "Xamarin.Forms never had a built-in way to draw directly on the screen.\nMany would use SkiaSharp, if they needed a custom image drawn.\nIn Flutter, you have direct access to the Skia Canvas\nand can easily draw on screen.", "Flutter has two classes that help you draw to the canvas: CustomPaint\nand CustomPainter, the latter of which implements your algorithm to draw to\nthe canvas.", "To learn how to implement a signature painter in Flutter,\nsee Collin\u2019s answer on Custom Paint.", "On Xamarin.Forms, all VisualElements have an Opacity.\nIn Flutter, you need to wrap a widget in an\nOpacity widget to accomplish this.", "In Xamarin.Forms, you typically subclass VisualElement,\nor use a pre-existing VisualElement, to override and\nimplement methods that achieve the desired behavior.", "In Flutter, build a custom widget by composing\nsmaller widgets (instead of extending them).\nIt is somewhat similar to implementing a custom control\nbased off a Grid with numerous VisualElements added in,\nwhile extending with custom logic.", "For example, how do you build a CustomButton\nthat takes a label in the constructor?\nCreate a CustomButton that composes a ElevatedButton\nwith a label, rather than by extending ElevatedButton:", "Then use CustomButton, just as you\u2019d use any other Flutter widget:", "In Xamarin.Forms, the NavigationPage class\nprovides a hierarchical navigation experience\nwhere the user is able to navigate through pages,\nforwards and backwards.", "Flutter has a similar implementation,\nusing a Navigator and Routes.\nA Route is an abstraction for a Page of an app,\nand a Navigator is a widget that manages routes.", "A route roughly maps to a Page.\nThe navigator works in a similar way to the Xamarin.Forms NavigationPage,\nin that it can push() and pop() routes depending on\nwhether you want to navigate to, or back from, a view.", "To navigate between pages, you have a couple options:", "The following example builds a Map.", "Navigate to a route by pushing its name to the Navigator.", "The Navigator is a stack that manages your app\u2019s routes.\nPushing a route to the stack moves to that route.\nPopping a route from the stack, returns to the previous route.\nThis is done by awaiting on the Future returned by push().", "async/await is very similar to the .NET implementation\nand is explained in more detail in Async UI.", "For example, to start a location route\nthat lets the user select their location,\nyou might do the following:", "And then, inside your \u2018location\u2019 route, once the user has selected their\nlocation, pop the stack with the result:", "In Xamarin.Forms, to send the user to another application,\nyou use a specific URI scheme, using Device.OpenUrl(\"mailto://\").", "To implement this functionality in Flutter,\ncreate a native platform integration, or use an existing plugin,\nsuch asurl_launcher, available with many other packages on pub.dev.", "Dart has a single-threaded execution model,\nwith support for Isolates (a way to run Dart codes on another thread),\nan event loop, and asynchronous programming.\nUnless you spawn an Isolate,\nyour Dart code runs in the main UI thread\nand is driven by an event loop.", "Dart\u2019s single-threaded model doesn\u2019t mean you need to run everything\nas a blocking operation that causes the UI to freeze.\nMuch like Xamarin.Forms, you need to keep the UI thread free.\nYou would use async/await to perform tasks,\nwhere you must wait for the response.", "In Flutter, use the asynchronous facilities that the Dart language provides,\nalso named async/await, to perform asynchronous work.\nThis is very similar to C# and should be very easy to use\nfor any Xamarin.Forms developer.", "For example, you can run network code without causing the UI to hang by\nusing async/await and letting Dart do the heavy lifting:", "Once the awaited network call is done,\nupdate the UI by calling setState(),\nwhich triggers a rebuild of the widget subtree and updates the data.", "The following example loads data asynchronously\nand displays it in a ListView:", "Refer to the next section for more information\non doing work in the background,\nand how Flutter differs from Android.", "Since Flutter is single threaded and runs an event loop,\nyou don\u2019t have to worry about thread management\nor spawning background threads.\nThis is very similar to Xamarin.Forms.\nIf you\u2019re doing I/O-bound work, such as disk access or a network call,\nthen you can safely use async/await and you\u2019re all set.", "If, on the other hand, you need to do computationally intensive work\nthat keeps the CPU busy,\nyou want to move it to an Isolate to avoid blocking the event loop,\nlike you would keep any sort of work out of the main thread.\nThis is similar to when you move things to a different\nthread via Task.Run() in Xamarin.Forms.", "For I/O-bound work, declare the function as an async function,\nand await on long-running tasks inside the function:", "This is how you would typically do network or database calls,\nwhich are both I/O operations.", "However, there are times when you might be processing\na large amount of data and your UI hangs.\nIn Flutter, use Isolates to take advantage of multiple CPU cores\nto do long-running or computationally intensive tasks.", "Isolates are separate execution threads that\ndo not share any memory with the main execution memory heap.\nThis is a difference between Task.Run().\nThis means you can\u2019t access variables from the main thread,\nor update your UI by calling setState().", "The following example shows, in a simple isolate,\nhow to share data back to the main thread to update the UI.", "Here, dataLoader() is the Isolate that runs in\nits own separate execution thread.\nIn the isolate, you can perform more CPU intensive\nprocessing (parsing a big JSON, for example),\nor perform computationally intensive math,\nsuch as encryption or signal processing.", "You can run the full example below:", "In Xamarin.Forms you would use HttpClient.\nMaking a network call in Flutter is easy\nwhen you use the popular http package.\nThis abstracts away a lot of the networking\nthat you might normally implement yourself,\nmaking it simple to make network calls.", "To use the http package, add it to your dependencies in pubspec.yaml:", "To make a network request,\ncall await on the async function http.get():", "In Xamarin.Forms you would typically create a loading indicator,\neither directly in XAML or through a 3rd party plugin such as AcrDialogs.", "In Flutter, use a ProgressIndicator widget.\nShow the progress programmatically by controlling\nwhen it\u2019s rendered through a boolean flag.\nTell Flutter to update its state before your long-running task starts,\nand hide it after it ends.", "In the example below, the build function is separated into three different\nfunctions. If showLoadingDialog is true\n(when widgets.length == 0), then render the ProgressIndicator.\nOtherwise, render the ListView with the data returned from a network call.", "Xamarin.Forms has no platform independent way of storing images,\nyou had to place images in the iOS xcasset folder,\nor on Android in the various drawable folders.", "While Android and iOS treat resources and assets as distinct items,\nFlutter apps have only assets.\nAll resources that would live in the\nResources/drawable-* folders on Android,\nare placed in an assets\u2019 folder for Flutter.", "Flutter follows a simple density-based format like iOS.\nAssets might be 1.0x, 2.0x, 3.0x, or any other multiplier.\nFlutter doesn\u2019t have dps but there are logical pixels,\nwhich are basically the same as device-independent pixels.\nFlutter\u2019s devicePixelRatio expresses the ratio\nof physical pixels in a single logical pixel.", "The equivalent to Android\u2019s density buckets are:", "Assets are located in any arbitrary folder\u2014\nFlutter has no predefined folder structure.\nYou declare the assets (with location)\nin the pubspec.yaml file, and Flutter picks them up.", "To add a new image asset called my_icon.png to our Flutter project,\nfor example, and deciding that it should live in a folder we\narbitrarily called images, you would put the base image (1.0x)\nin the images folder, and all the other variants in sub-folders\ncalled with the appropriate ratio multiplier:", "Next, you\u2019ll need to declare these images in your pubspec.yaml file:", "You can directly access your images in an Image.asset widget:", "More detailed information can be found in Adding assets and images.", "Unlike .NET which has resx files,\nFlutter doesn\u2019t currently have a dedicated system for handling strings.\nAt the moment, the best practice is to declare your copy text\nin a class as static fields and access them from there. For example:", "You can access your strings as such:", "By default, Flutter only supports US English for its strings.\nIf you need to add support for other languages,\ninclude the flutter_localizations package.\nYou might also need to add Dart\u2019s intl\npackage to use i10n machinery, such as date/time formatting.", "To use the flutter_localizations package,\nspecify the localizationsDelegates and\nsupportedLocales on the app widget:", "The delegates contain the actual localized values,\nwhile the supportedLocales defines which locales the app supports.\nThe above example uses a MaterialApp,\nso it has both a GlobalWidgetsLocalizations\nfor the base widgets localized values,\nand a MaterialWidgetsLocalizations for the Material widgets localizations.\nIf you use WidgetsApp for your app, you don\u2019t need the latter.\nNote that these two delegates contain \u201cdefault\u201d values,\nbut you\u2019ll need to provide one or more delegates\nfor your own app\u2019s localizable copy,\nif you want those to be localized too.", "When initialized, the WidgetsApp (or MaterialApp)\ncreates a Localizations widget for you,\nwith the delegates you specify.\nThe current locale for the device is always accessible\nfrom the Localizations widget from the current context\n(in the form of a Locale object), or using the Window.locale.", "To access localized resources, use the Localizations.of() method\nto access a specific localizations class that is provided by a given delegate.\nUse the intl_translation package to extract translatable copy\nto arb files for translating, and importing them back into the app\nfor using them with intl.", "For further details on internationalization and localization in Flutter,\nsee the internationalization guide, which has sample code\nwith and without the intl package.", "In Xamarin.Forms you will have a csproj file.\nThe closest equivalent in Flutter is pubspec.yaml,\nwhich contains package dependencies and various project details.\nSimilar to .NET Standard,\nfiles within the same directory are considered part of the project.", "In the .NET ecosystem, native Xamarin projects and Xamarin.Forms projects\nhad access to Nuget and the built-in package management system.\nFlutter apps contain a native Android app, native iOS app and Flutter app.", "In Android, you add dependencies by adding to your Gradle build script.\nIn iOS, you add dependencies by adding to your Podfile.", "Flutter uses Dart\u2019s own build system, and the Pub package manager.\nThe tools delegate the building of the native Android and iOS wrapper apps\nto the respective build systems.", "In general, use pubspec.yaml to declare\nexternal dependencies to use in Flutter.\nA good place to find Flutter packages is on pub.dev.", "In Xamarin.Forms, you have an Application\nthat contains OnStart, OnResume and OnSleep.\nIn Flutter, you can instead listen to similar lifecycle events\nby hooking into the WidgetsBinding observer and listening to\nthe didChangeAppLifecycleState() change event.", "The observable lifecycle events are:", "For more details on the meaning of these states,\nsee the AppLifecycleStatus documentation.", "In Xamarin.Forms you can create a StackLayout\nwith an Orientation of horizontal or vertical.\nFlutter has a similar approach,\nhowever you would use the Row or Column widgets.", "If you notice the two code samples are identical\nexcept the Row and Column widget.\nThe children are the same and this feature\ncan be exploited to develop rich layouts\nthat can change overtime with the same children.", "The closest equivalent of a Grid would be a GridView.\nThis is much more powerful than what you are used to in Xamarin.Forms.\nA GridView provides automatic scrolling when the\ncontent exceeds its viewable space.", "You might have used a Grid in Xamarin.Forms\nto implement widgets that overlay other widgets.\nIn Flutter, you accomplish this with the Stack widget.", "This sample creates two icons that overlap each other.", "In Xamarin.Forms, a ScrollView wraps around a VisualElement,\nand if the content is larger than the device screen, it scrolls.", "In Flutter, the closest match is the SingleChildScrollView widget.\nYou simply fill the Widget with the content that you want to be scrollable.", "If you have many items you want to wrap in a scroll,\neven of different Widget types, you might want to use a ListView.\nThis might seem like overkill, but in Flutter this is\nfar more optimized and less intensive than a Xamarin.Forms ListView,\nwhich is backing on to platform specific controls.", "Landscape transitions can be handled automatically by setting the\nconfigChanges property in the AndroidManifest.xml:", "In Xamarin.Forms, Elements might contain a click event you can attach to.\nMany elements also contain a Command that is tied to this event.\nAlternatively you would use the TapGestureRecognizer.\nIn Flutter there are two very similar ways:", "If the widget supports event detection, pass a function to it and\nhandle it in the function. For example, the ElevatedButton has an\nonPressed parameter:", "If the widget doesn\u2019t support event detection, wrap the\nwidget in a GestureDetector and pass a function\nto the onTap parameter.", "In Xamarin.Forms you would add a GestureRecognizer to the View.\nYou would normally be limited to TapGestureRecognizer,\nPinchGestureRecognizer, PanGestureRecognizer, SwipeGestureRecognizer,\nDragGestureRecognizer and DropGestureRecognizer unless you built your own.", "In Flutter, using the GestureDetector,\nyou can listen to a wide range of Gestures such as:", "The following example shows a GestureDetector\nthat rotates the Flutter logo on a double tap:", "The equivalent to a ListView in Flutter is \u2026 a ListView!", "In a Xamarin.Forms ListView, you create a ViewCell\nand possibly a DataTemplateSelectorand pass it into the ListView,\nwhich renders each row with what your\nDataTemplateSelector or ViewCell returns.\nHowever, you often have to make sure you turn on Cell Recycling\notherwise you will run into memory issues and slow scrolling speeds.", "Due to Flutter\u2019s immutable widget pattern,\nyou pass a list of widgets to your ListView,\nand Flutter takes care of making sure that scrolling is fast and smooth.", "In Xamarin.Forms, the ListView has an ItemTapped method\nto find out which item was clicked.\nThere are many other techniques you might have used\nsuch as checking when SelectedItem or EventToCommand\nbehaviors change.", "In Flutter, use the touch handling provided by the passed-in widgets.", "In Xamarin.Forms, if you bound the\nItemsSource property to an ObservableCollection,\nyou would just update the list in your ViewModel.\nAlternatively, you could assign a new List to the ItemSource property.", "In Flutter, things work a little differently.\nIf you update the list of widgets inside a setState() method,\nyou would quickly see that your data did not change visually.\nThis is because when setState() is called,\nthe Flutter rendering engine looks at the widget tree\nto see if anything has changed.\nWhen it gets to your ListView, it performs a == check,\nand determines that the two ListViews are the same.\nNothing has changed, so no update is required.", "For a simple way to update your ListView,\ncreate a new List inside of setState(),\nand copy the data from the old list to the new list.\nWhile this approach is simple, it is not recommended for large data sets,\nas shown in the next example.", "The recommended, efficient, and effective way to build a list\nuses a ListView.Builder.\nThis method is great when you have a dynamic list\nor a list with very large amounts of data.\nThis is essentially the equivalent of RecyclerView on Android,\nwhich automatically recycles list elements for you:", "Instead of creating a ListView, create a ListView.builder\nthat takes two key parameters: the initial length of the list,\nand an item builder function.", "The item builder function is similar to the getView function\nin an Android adapter; it takes a position,\nand returns the row you want rendered at that position.", "Finally, but most importantly, notice that the onTap() function\ndoesn\u2019t recreate the list anymore, but instead adds to it.", "For more information, see\nYour first Flutter app codelab.", "In Xamarin.Forms, you would have to add a custom font in each native project.\nThen, in your Element you would assign this font name\nto the FontFamily attribute using filename#fontname\nand just fontname for iOS.", "In Flutter, place the font file in a folder and reference it\nin the pubspec.yaml file, similar to how you import images.", "Then assign the font to your Text widget:", "Along with fonts, you can customize other styling elements on a Text widget.\nThe style parameter of a Text widget takes a TextStyle object,\nwhere you can customize many parameters, such as:", "Xamarin.Forms elements allow you to directly query the element\nto determine the state of its properties,\nor whether it\u2019s bound to a property in a ViewModel.", "Retrieving information in Flutter is handled by specialized widgets\nand is different from how you are used to.\nIf you have a TextFieldor a TextFormField,\nyou can supply a TextEditingController\nto retrieve user input:", "You can find more information and the full code listing in\nRetrieve the value of a text field,\nfrom the Flutter cookbook.", "In Xamarin.Forms, some Elements support a Placeholder property\nthat you can assign a value to. For example:", "In Flutter, you can easily show a \u201chint\u201d or a placeholder text\nfor your input by adding an InputDecoration object\nto the decoration constructor parameter for the text widget.", "With Xamarin.Forms, if you wished to provide a visual hint of a\nvalidation error, you would need to create new properties and\nVisualElements surrounding the Elements that had validation errors.", "In Flutter, you pass through an InputDecoration object to the\ndecoration constructor for the text widget.", "However, you don\u2019t want to start off by showing an error.\nInstead, when the user has entered invalid data,\nupdate the state, and pass a new InputDecoration object.", "Flutter doesn\u2019t run code directly on the underlying platform;\nrather, the Dart code that makes up a Flutter app is run natively\non the device, \u201csidestepping\u201d the SDK provided by the platform.\nThat means, for example, when you perform a network request in Dart,\nit runs directly in the Dart context.\nYou don\u2019t use the Android or iOS APIs\nyou normally take advantage of when writing native apps.\nYour Flutter app is still hosted in a native app\u2019s\nViewController or Activity as a view,\nbut you don\u2019t have direct access to this, or the native framework.", "This doesn\u2019t mean Flutter apps can\u2019t interact with those native APIs,\nor with any native code you have. Flutter provides platform channels\nthat communicate and exchange data with the\nViewController or Activity that hosts your Flutter view.\nPlatform channels are essentially an asynchronous messaging mechanism\nthat bridges the Dart code with the host ViewController\nor Activity and the iOS or Android framework it runs on.\nYou can use platform channels to execute a method on the native side,\nor to retrieve some data from the device\u2019s sensors, for example.", "In addition to directly using platform channels,\nyou can use a variety of pre-made plugins\nthat encapsulate the native and Dart code for a specific goal.\nFor example, you can use a plugin to access\nthe camera roll and the device camera directly from Flutter,\nwithout having to write your own integration.\nPlugins are found on pub.dev,\nDart and Flutter\u2019s open source package repository.\nSome packages might support native integrations on iOS,\nor Android, or both.", "If you can\u2019t find a plugin on pub.dev that fits your needs,\nyou can write your own, and publish it on pub.dev.", "Use the geolocator community plugin.", "The camera plugin is popular for accessing the camera.", "To log in with Facebook, use the\nflutter_facebook_login community plugin.", "Most Firebase functions are covered by first party plugins.\nThese plugins are first-party integrations, maintained by the Flutter team:", "You can also find some third-party Firebase plugins on pub.dev\nthat cover areas not directly covered by the first-party plugins.", "If there is platform-specific functionality that Flutter\nor its community plugins are missing,\nyou can build your own following the\ndeveloping packages and plugins page.", "Flutter\u2019s plugin architecture, in a nutshell,\nis much like using an Event bus in Android:\nyou fire off a message and let the receiver process and emit a result\nback to you. In this case, the receiver is code running on the native side\non Android or iOS.", "Flutter comes with a beautiful, built-in implementation of Material Design,\nwhich handles much of the styling and theming needs\nthat you would typically do.", "Xamarin.Forms does have a global ResourceDictionary\nwhere you can share styles across your app.\nAlternatively, there is Theme support currently in preview.", "In Flutter, you declare themes in the top level widget.", "To take full advantage of Material Components in your app,\nyou can declare a top level widget MaterialApp\nas the entry point to your application.\nMaterialApp is a convenience widget\nthat wraps a number of widgets that are commonly required\nfor applications implementing Material Design.\nIt builds upon a WidgetsApp by adding Material-specific functionality.", "You can also use a WidgetsApp as your app widget,\nwhich provides some of the same functionality,\nbut is not as rich as MaterialApp.", "To customize the colors and styles of any child components,\npass a ThemeData object to the MaterialApp widget.\nFor example, in the following code,\nthe primary swatch is set to blue and text selection color is red.", "Xamarin.Forms developers will likely be familiar with the\nXam.Plugins.Settings plugin.", "In Flutter, access equivalent functionality using the\nshared_preferences plugin. This plugin wraps the\nfunctionality of both UserDefaults and the Android\nequivalent, SharedPreferences.", "In Xamarin.Forms most applications would use the sqlite-net-pcl\nplugin to access SQLite databases.", "In Flutter, access this functionality using the\nsqflite plugin.", "Use the DevTools suite for debugging Flutter or Dart apps.", "DevTools includes support for profiling, examining the heap,\ninspecting the widget tree, logging diagnostics, debugging,\nobserving executed lines of code,\ndebugging memory leaks and memory fragmentation.\nFor more information, see the DevTools documentation.", "In Android, you use Firebase Cloud Messaging to setup\npush notifications for your app.", "In Flutter, access this functionality using the\nfirebase_messaging plugin.\nFor more information on using the Firebase Cloud Messaging API, see the\nfirebase_messaging plugin documentation.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/xamarin-forms-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "Send data to the internet | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Sending data to the internet is necessary for most apps.\nThe http package has got that covered, too.", "This recipe uses the following steps:", "To add the http package as a dependency,\nrun flutter pub add:", "Import the http package.", "If you develop for android, \nadd the following permission inside the manifest tag\nin the AndroidManifest.xml file located at android/app/src/main.", "This recipe covers how to create an Album\nby sending an album title to the\nJSONPlaceholder using the\nhttp.post() method.", "Import dart:convert for access to jsonEncode to encode the data:", "Use the http.post() method to send the encoded data:", "The http.post() method returns a Future that contains a Response.", "While it\u2019s easy to make a network request,\nworking with a raw Future<http.Response>\nisn\u2019t very convenient.  To make your life easier,\nconvert the http.Response into a Dart object.", "First, create an Album class that contains\nthe data from the network request.\nIt includes a factory constructor that\ncreates an Album from JSON.", "Converting JSON by hand is only one option.\nFor more information, see the full article on\nJSON and serialization.", "Use the following steps to update the createAlbum()\nfunction to return a Future<Album>:", "Hooray! Now you\u2019ve got a function that sends the title to a\nserver to create an album.", "Next, create a TextField to enter a title and\na ElevatedButton to send data to server.\nAlso define a TextEditingController to read the\nuser input from a TextField.", "When the ElevatedButton is pressed, the _futureAlbum\nis set to the value returned by createAlbum() method.", "On pressing the Create Data button, make the network request,\nwhich sends the data in the TextField to the server\nas a POST request.\nThe Future, _futureAlbum, is used in the next step.", "To display the data on screen, use the\nFutureBuilder widget.\nThe FutureBuilder widget comes with Flutter and\nmakes it easy to work with asynchronous data sources.\nYou must provide two parameters:", "Note that snapshot.hasData only returns true when\nthe snapshot contains a non-null data value.\nThis is why the createAlbum() function should throw an exception\neven in the case of a \u201c404 Not Found\u201d server response.\nIf createAlbum() returns null, then\nCircularProgressIndicator displays indefinitely.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/send-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Create lists with different types of items | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You might need to create lists that display different types of content.\nFor example, you might be working on a list that shows a heading\nfollowed by a few items related to the heading, followed by another heading,\nand so on.", "Here\u2019s how you can create such a structure with Flutter:", "To represent different types of items in a list, define\na class for each type of item.", "In this example, create an app that shows a header followed by five\nmessages. Therefore, create three classes: ListItem, HeadingItem,\nand MessageItem.", "Most of the time, you would fetch data from the internet or a local\ndatabase and convert that data into a list of items.", "For this example, generate a list of items to work with. The list\ncontains a header followed by five messages. Each message has one\nof 3 types: ListItem, HeadingItem, or MessageItem.", "To convert each item into a widget,\nuse the ListView.builder() constructor.", "In general, provide a builder function that checks for what type\nof item you\u2019re dealing with, and returns the appropriate widget\nfor that type of item.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/mixed-list", "base_url": "https://docs.flutter.dev/"}, {"title": "Writing and using fragment shaders | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  Both the Skia and Impeller backends support writing a\n  custom shader. Except where noted, the same\n  instructions apply to both.", "Custom shaders can be used to provide rich graphical effects\nbeyond those provided by the Flutter SDK.\nA shader is a program authored in a small,\nDart-like language, known as GLSL,\nand executed on the user\u2019s GPU.", "Custom shaders are added to a Flutter project\nby listing them in the pubspec.yaml file,\nand obtained using the FragmentProgram API.", "Shaders, in the form of GLSL files with the .frag extension,\nmust be declared in the shaders section of your project\u2019s pubspec.yaml file.\nThe Flutter command-line tool compiles the shader\nto its appropriate backend format,\nand generates its necessary runtime metadata.\nThe compiled shader is then included in the application just like an asset.", "When running in debug mode,\nchanges to a shader program trigger recompilation\nand update the shader during hot reload or hot restart.", "Shaders from packages are added to a project\nwith packages/$pkgname prefixed to the shader program\u2019s name\n(where $pkgname is the name of the package).", "To load a shader into a FragmentProgram object at runtime,\nuse the FragmentProgram.fromAsset constructor.\nThe asset\u2019s name is the same as the path to the shader\ngiven in the pubspec.yaml file.", "The FragmentProgram object can be used to create\none or more FragmentShader instances.\nA FragmentShader object represents a fragment program\nalong with a particular set of uniforms (configuration parameters).\nThe available uniforms depends on how the shader was defined.", "Fragment shaders can be used with most Canvas APIs\nby setting Paint.shader.\nFor example, when using Canvas.drawRect\nthe shader is evaluated for all fragments within the rectangle.\nFor an API like Canvas.drawPath with a stroked path,\nthe shader is evaluated for all fragments within the stroked line.\nSome APIs, such as Canvas.drawImage, ignore the value of the shader.", "Fragment shaders are authored as GLSL source files.\nBy convention, these files have the .frag extension.\n(Flutter doesn\u2019t support vertex shaders,\nwhich would have the .vert extension.)", "Any GLSL version from 460 down to 100 is supported,\nthough some available features are restricted.\nThe rest of the examples in this document use version 460 core.", "Shaders are subject to the following limitations\nwhen used with Flutter:", "A fragment program can be configured by defining\nuniform values in the GLSL shader source\nand then setting these values in Dart for\neach fragment shader instance.", "Floating point uniforms with the GLSL types\nfloat, vec2, vec3, and vec4\nare set using the FragmentShader.setFloat method.\nGLSL sampler values, which use the sampler2D type,\nare set using the FragmentShader.setImageSampler method.", "The correct index for each uniform value is determined by the order\nthat the uniform values are defined in the fragment program.\nFor data types composed of multiple floats, such as a vec4,\nyou must call FragmentShader.setFloat once for each value.", "For example, given the following uniforms declarations in a GLSL fragment program:", "The corresponding Dart code to initialize these uniform values is as follows:", "Observe that the indices used with FragmentShader.setFloat\ndo not count the sampler2D uniform.\nThis uniform is set separately with FragmentShader.setImageSampler,\nwith the index starting over at 0.", "Any float uniforms that are left uninitialized will default to 0.0.", "The shader has access to a varying value that contains the local coordinates for\nthe particular fragment being evaluated. Use this feature to compute\neffects that depend on the current position, which can be accessed by\nimporting the flutter/runtime_effect.glsl library and calling the\nFlutterFragCoord function. For example:", "The value returned from FlutterFragCoord is distinct from gl_FragCoord.\ngl_FragCoord provides the screen space coordinates and should generally be\navoided to ensure that shaders are consistent across backends.\nWhen targeting a Skia backend,\nthe calls to gl_FragCoord are rewritten to access local\ncoordinates but this rewriting isn\u2019t possible with Impeller.", "There isn\u2019t a built-in data type for colors.\nInstead they are commonly represented as a vec4\nwith each component corresponding to one of the RGBA\ncolor channels.", "The single output fragColor expects that the color value\nis normalized to be in the range of 0.0 to 1.0\nand that it has premultiplied alpha.\nThis is different than typical Flutter colors which use\na 0-255 value encoding and have unpremultipled alpha.", "A sampler provides access to a dart:ui Image object.\nThis image can be acquired either from a decoded image\nor from part of the application using\nScene.toImageSync or Picture.toImageSync.", "By default, the image uses\nTileMode.clamp to determine how values outside\nof the range of [0, 1] behave.\nCustomization of the tile mode is not\nsupported and needs to be emulated in the shader.", "When targeting the Skia backend,\nloading the shader might be expensive since it\nmust be compiled to the appropriate\nplatform-specific shader at runtime.\nIf you intend to use one or more shaders during an animation,\nconsider precaching the fragment program objects before\nstarting the animation.", "You can reuse a FragmentShader object across frames;\nthis is more efficient than creating a new\nFragmentShader for each frame.", "For a more detailed guide on writing performant shaders,\ncheck out Writing efficient shaders on GitHub.", "For more information, here are a few resources.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/design/graphics/fragment-shaders", "base_url": "https://docs.flutter.dev/"}, {"title": "Targeting ChromeOS with Android | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page discusses considerations unique to building\nAndroid apps that support ChromeOS with Flutter.", "For the current versions of ChromeOS, only certain ports from\nLinux are exposed to the rest of the environment.\nHere\u2019s an example of how to launch\nFlutter DevTools for an Android app with ports\nthat will work:", "Then, navigate to http://127.0.0.1:8000/#\nin your Chrome browser and enter the URL to your\napplication. The last flutter run command you\njust ran should output a URL similar to the format\nof http://127.0.0.1:8080/auth_code=/. Use this URL\nand select \u201cConnect\u201d to start the Flutter DevTools\nfor your Android app.", "Flutter has ChromeOS-specific lint analysis checks\nto make sure that the app that you\u2019re building\nworks well on ChromeOS. It looks for things\nlike required hardware in your Android Manifest\nthat aren\u2019t available on ChromeOS devices,\npermissions that imply requests for unsupported\nhardware, as well as other properties or code\nthat would bring a lesser experience on these devices.", "To activate these,\nyou need to create a new analysis_options.yaml\nfile in your project folder to include these options.\n(If you have an existing analysis_options.yaml file,\nyou can update it)", "To run these from the command line, use the following command:", "Sample output for this command might look like:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/android/chromeos", "base_url": "https://docs.flutter.dev/"}, {"title": "State restoration on iOS | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When a user runs a mobile app and then selects another\napp to run, the first app is moved to the background,\nor backgrounded. The operating system (both iOS and Android)\noften kill the backgrounded app to release memory or\nimprove performance for the app running in the foreground.", "You can use the RestorationManager (and related)\nclasses to handle state restoration. \nAn iOS app requires a bit of extra setup in Xcode,\nbut the restoration classes otherwise work the same on\nboth iOS and Android.", "For more information, check out State restoration on Android\nand the VeggieSeasons code sample.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/ios/restore-state-ios", "base_url": "https://docs.flutter.dev/"}, {"title": "Scrolling | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter has many built-in widgets that automatically\nscroll and also offers a variety of widgets\nthat you can customize to create specific scrolling\nbehavior.", "Many Flutter widgets support scrolling out of the box\nand do most of the work for you. For example, \nSingleChildScrollView automatically scrolls its\nchild when necessary. Other useful widgets include\nListView and GridView.\nYou can check out more of these widgets on the\nscrolling page of the Widget catalog.", "When you have a long list of items\nin your ListView or GridView (including an infinite list),\nyou can build the items on demand\nas they scroll into view. This provides a much\nmore performant scrolling experience.\nFor more information, check out\nListView.builder or GridView.builder.", "The following widgets provide more specific scrolling\nbehavior.", "A video on using DraggableScrollableSheet", "Turn the scrollable area into a wheel! ListWheelScrollView", "Perhaps you want to implement elastic scrolling,\nalso called scroll bouncing. Or maybe you want to\nimplement other dynamic scrolling effects, like parallax scrolling.\nOr perhaps you want a scrolling header with very specific behavior,\nsuch as shrinking or disappearing.", "You can achieve all this and more using the\nFlutter Sliver* classes.\nA sliver refers to a piece of the scrollable area.\nYou can define and insert a sliver into a CustomScrollView\nto have finer-grained control over that area.", "For more information, check out\nUsing slivers to achieve fancy scrolling\nand the Sliver classes.", "How do you nest a scrolling widget\ninside another scrolling widget\nwithout hurting scrolling performance?\nDo you set the ShrinkWrap property to true,\nor do you use a sliver?", "Check out the \u201cShrinkWrap vs Slivers\u201d video:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/scrolling", "base_url": "https://docs.flutter.dev/"}, {"title": "Building macOS apps with Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page discusses considerations unique to building\nmacOS apps with Flutter, including shell integration\nand distribution of macOS apps through the Apple Store.", "While you can use any visual style or theme you choose\nto build a macOS app, you might want to adapt your app\nto more fully align with the macOS look and feel.\nFlutter includes the Cupertino widget set,\nwhich provides a set of widgets for\nthe current iOS design language.\nMany of these widgets, including sliders,\nswitches and segmented controls,\nare also appropriate for use on macOS.", "Alternatively, you might find the macos_ui\npackage a good fit for your needs.\nThis package provides widgets and themes that\nimplement the macOS design language,\nincluding a MacosWindow frame and scaffold,\ntoolbars, pulldown and\npop-up buttons, and modal dialogs.", "To distribute your macOS application, you can either\ndistribute it through the macOS App Store,\nor you can distribute the .app itself,\nperhaps from your own website.\nAs of macOS 10.14.5, you need to notarize\nyour macOS application before distributing\nit outside of the macOS App Store.", "The first step in both of the above processes\ninvolves working with your application inside of Xcode.\nTo be able to compile your application from inside of\nXcode you first need to build the application for release\nusing the flutter build command, then open the\nFlutter macOS Runner application.", "Once inside of Xcode, follow either Apple\u2019s\ndocumentation on notarizing macOS Applications, or\non distributing an application through the App Store.\nYou should also read through the\nmacOS-specific support\nsection below to understand how entitlements,\nthe App Sandbox, and the Hardened Runtime\nimpact your distributable application.", "Build and release a macOS app provides a more detailed\nstep-by-step walkthrough of releasing a Flutter app to the\nApp Store.", "macOS builds are configured by default to be signed,\nand sandboxed with App Sandbox.\nThis means that if you want to confer specific\ncapabilities or services on your macOS app,\nsuch as the following:", "Then you must set up specific entitlements in Xcode.\nThe following section tells you how to do this.", "Managing sandbox settings is done in the\nmacos/Runner/*.entitlements files. When editing\nthese files, you shouldn\u2019t remove the original\nRunner-DebugProfile.entitlements exceptions\n(that support incoming network connections and JIT),\nas they\u2019re necessary for the debug and profile\nmodes to function correctly.", "If you\u2019re used to managing entitlement files through\nthe Xcode capabilities UI, be aware that the capabilities\neditor updates only one of the two files or,\nin some cases, it creates a whole new entitlements\nfile and switches the project to use it for all configurations.\nEither scenario causes issues. We recommend that you\nedit the files directly. Unless you have a very specific\nreason, you should always make identical changes to both files.", "If you keep the App Sandbox enabled (which is required if you\nplan to distribute your application in the App Store),\nyou need to manage entitlements for your application\nwhen you add certain plugins or other native functionality.\nFor instance, using the file_chooser plugin\nrequires adding either the\ncom.apple.security.files.user-selected.read-only or\ncom.apple.security.files.user-selected.read-write entitlement.\nAnother common entitlement is\ncom.apple.security.network.client,\nwhich you must add if you make any network requests.", "Without the com.apple.security.network.client entitlement,\nfor example, network requests fail with a message such as:", "Important: The com.apple.security.network.server\n  entitlement, which allows incoming network connections,\n  is enabled by default only for debug and profile\n  builds to enable communications between Flutter tools\n  and a running app. If you need to allow incoming\n  network requests in your application,\n  you must add the com.apple.security.network.server\n  entitlement to Runner-Release.entitlements as well,\n  otherwise your application will work correctly for debug or\n  profile testing, but will fail with release builds.", "For more information on these topics,\nsee App Sandbox and Entitlements\non the Apple Developer site.", "If you choose to distribute your application outside\nof the App Store, you need to notarize your application\nfor compatibility with macOS 10.15+.\nThis requires enabling the Hardened Runtime option.\nOnce you have enabled it, you need a valid signing\ncertificate in order to build.", "By default, the entitlements file allows JIT for\ndebug builds but, as with App Sandbox, you might\nneed to manage other entitlements.\nIf you have both App Sandbox and Hardened\nRuntime enabled, you might need to add multiple\nentitlements for the same resource.\nFor instance, microphone access would require both\ncom.apple.security.device.audio-input (for Hardened Runtime)\nand com.apple.security.device.microphone (for App Sandbox).", "For more information on this topic,\nsee Hardened Runtime on the Apple Developer site.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/macos/building", "base_url": "https://docs.flutter.dev/"}, {"title": "Customizing web app initialization | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "You can customize how a Flutter app is initialized on the web\nusing the _flutter.loader JavaScript API provided by flutter.js.\nThis API can be used to display a loading indicator in CSS,\nprevent the app from loading based on a condition,\nor wait until the user presses a button before showing the app.", "The initialization process is split into the following stages:", "This page shows how to customize the behavior\nat each stage of the initialization process.", "By default, the index.html file\ngenerated by the flutter create command\ncontains a script tag\nthat calls loadEntrypoint from the flutter.js file:", "info Note:\n  In Flutter 2.10 or earlier,\n  this script doesn\u2019t support customization.\n  To upgrade your index.html file to the latest version,\n  see Upgrading an older project.", "The loadEntrypoint function calls the onEntrypointLoaded callback\nonce the Service Worker is initialized, and the main.dart.js entrypoint\nhas been downloaded and run by the browser. Flutter also calls\nonEntrypointLoaded on every hot restart during development.", "The onEntrypointLoaded callback receives an engine initializer object as\nits only parameter. Use the engine initializer to set the run-time\nconfiguration, and start the Flutter Web engine.", "The initializeEngine() function returns a Promise\nthat resolves with an app runner object. The app runner has a\nsingle method, runApp(), that runs the Flutter app.", "In this section,\nlearn how to customize each stage of your app\u2019s initialization.", "The loadEntrypoint method accepts these parameters:", "The serviceWorker JavaScript object accepts the following properties:", "As of Flutter 3.7.0, you can use the initializeEngine method to\nconfigure several run-time options of the Flutter web engine through a\nplain JavaScript object.", "You can add any of the following optional parameters:", "info Note:\n  Some of the parameters described above might have been overridden\n  in previous releases by using properties in the window object.\n  That approach is still supported, but displays a deprecation\n  notice in the JS console, as of Flutter 3.7.0.", "The initializeEngine method lets you pass any of the configuration\nparameters described above to your Flutter app.", "Consider the following example.", "Your Flutter app should target an HTML element with id=\"flutter_app\" and\nuse the canvaskit renderer. The resulting JavaScript code would resemble\nthe following:", "For a more detailed explanation of each parameter, take a look at the\n\u201cRuntime parameters\u201d documentation section of the configuration.dart\nfile of the web engine.", "Instead of calling initializeEngine() on the engine initializer (and then\nrunApp() on the application runner), you can call autoStart() to\ninitialize the engine with its default configuration, and then start the app\nimmediately after the initialization is complete:", "To give the user of your application feedback\nduring the initialization process,\nuse the hooks provided for each stage to update the DOM:", "For a more practical example using CSS animations,\nsee the initialization code for the Flutter Gallery.", "If your project was created in Flutter 2.10 or earlier,\nyou can create a new index.html file\nwith the latest initialization template by running\nflutter create as follows.", "First, remove the files from your /web directory.", "Then, from your project directory, run the following:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web/initialization", "base_url": "https://docs.flutter.dev/"}, {"title": "Using the debugger | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  DevTools hides the Debugger tab if the app was launched\n  from VS Code because VS Code has a built-in debugger.", "DevTools includes a full source-level debugger, supporting\nbreakpoints, stepping, and variable inspection.", "info Note:\n  The debugger works with all Flutter and Dart applications.\n  If you are looking for a way to use GDB to remotely debug the\n  Flutter engine running within an Android app process,\n  check out flutter_gdb.", "When you open the debugger tab, you should see the source for the main\nentry-point for your app loaded in the debugger.", "In order to browse around more of your application sources, click Libraries\n(top right) or press Ctrl / Cmd + P.\nThis opens the libraries window and allows you\nto search for other source files.", "To set a breakpoint, click the left margin (the line number ruler)\nin the source area. Clicking once sets a breakpoint, which should\nalso show up in the Breakpoints area on the left. Clicking\nagain removes the breakpoint.", "When your application encounters a breakpoint, it pauses there,\nand the DevTools debugger shows the paused execution location\nin the source area. In addition, the Call stack and Variables\nareas populate with the current call stack for the paused isolate,\nand the local variables for the selected frame. Selecting other\nframes in the Call stack area changes the contents of the variables.", "Within the Variables area, you can inspect individual objects by\ntoggling them open to see their fields. Hovering over an object\nin the Variables area calls toString() for that object and\ndisplays the result.", "When paused, the three stepping buttons become active.", "In addition, the Resume button continues regular\nexecution of the application.", "Console output for the running app (stdout and stderr) is\ndisplayed in the console, below the source code area.\nYou can also see the output in the Logging view.", "To adjust the stop-on-exceptions behavior, toggle the\nIgnore dropdown at the top of the debugger view.", "Breaking on unhandled excepts only pauses execution if the\nbreakpoint is considered uncaught by the application code.\nBreaking on all exceptions causes the debugger to pause\nwhether or not the breakpoint was caught by application code.", "When performing a hot restart for a Flutter application,\nuser breakpoints are cleared.", "For more information on debugging and profiling, see the\nDebugging page.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//tools/devtools/debugger", "base_url": "https://docs.flutter.dev/"}, {"title": "Desktop support for Flutter | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter provides support for compiling\na native Windows, macOS, or Linux desktop app.\nFlutter\u2019s desktop support also extends to plugins\u2014you\ncan install existing plugins that support the Windows,\nmacOS, or Linux platforms, or you can create your own.", "info Note:\n  This page covers developing apps for all desktop\n  platforms. Once you\u2019ve read this, you can dive into\n  specific platform information at the following links:", "To compile a desktop application,\nyou must build it on the targeted\nplatform: build a Windows application on Windows,\na macOS application on macOS,\nand a Linux application on Linux.", "To create a Flutter application with desktop support,\nyou need the following software:", "For Windows desktop development,\nyou need the following in addition to the Flutter SDK:", "info Note:\nVisual Studio is different than Visual Studio Code.", "For macOS desktop development,\nyou need the following in addition to the Flutter SDK:", "For Linux desktop development,\nyou need the following in addition to the Flutter SDK:", "One easy way to install the Flutter SDK along with the necessary\ndependencies is by using snapd.\nFor more information, see Installing snapd.", "Once you have snapd, you can install Flutter\nusing the Snap Store, or at the command line:", "Alternatively, if you prefer not to use snapd,\nyou can use the following command:", "You can use the following steps\nto create a new project with desktop support.", "On Windows, desktop support is enabled on\nFlutter 2.10 or higher. On macOS and Linux,\ndesktop support is enabled on Flutter 3 or higher.", "You might run flutter doctor to see if\nthere are any unresolved issues.\nYou should see a checkmark for each successfully\nconfigured area. It should look something like\nthe following on Windows,\nwith an entry for \u201cdevelop for Windows\u201d:", "On macOS, look for a line like this:", "On Linux, look for a line like this:", "If flutter doctor finds problems or missing components\nfor a platform that you don\u2019t want to develop for,\nyou can ignore those warnings. Or you can disable the\nplatform altogether using the flutter config command,\nfor example:", "After enabling desktop support,\nrestart your IDE so that it can detect the new device.", "Creating a new project with desktop support is no different\nthan creating a new Flutter project for other platforms.", "Once you\u2019ve configured your environment for desktop\nsupport, you can create and run a desktop application\neither in the IDE or from the command line.", "After you\u2019ve configured your environment to support\ndesktop, make sure you restart the IDE if it was\nalready running.", "Create a new application in your IDE and it automatically\ncreates iOS, Android, web, and desktop versions of your app.\nFrom the device pulldown, select windows (desktop),\nmacOS (desktop), or linux (desktop)\nand run your application to see it launch on the desktop.", "To create a new application that includes desktop support\n(in addition to mobile and web support), run the following commands,\nsubstituting my_app with the name of your project:", "To launch your application from the command line,\nenter one of the following commands from the top\nof the package:", "info Note:\n  If you do not supply the -d flag, flutter run lists\n  the available targets to choose from.", "To generate a release build,\nrun one of the following commands:", "To add desktop support to an existing Flutter project,\nrun the following command in a terminal from the\nroot project directory:", "This adds the necessary desktop files and directories\nto your existing Flutter project.\nTo add only specific desktop platforms,\nchange the platforms list to include only\nthe platform(s) you want to add.", "Flutter on the desktop supports using and creating plugins.\nTo use a plugin that supports desktop,\nfollow the steps for plugins in using packages.\nFlutter automatically adds the necessary native code\nto your project, as with any other platform.", "When you start building your own plugins,\nyou\u2019ll want to keep federation in mind.\nFederation is the ability to define several\ndifferent packages, each targeted at a\ndifferent set of platforms, brought together\ninto a single plugin for ease of use by developers.\nFor example, the Windows implementation of the\nurl_launcher is really url_launcher_windows,\nbut a Flutter developer can simply add the\nurl_launcher package to their pubspec.yaml\nas a dependency and the build process pulls in\nthe correct implementation based on the target platform.\nFederation is handy because different teams with\ndifferent expertise can build plugin implementations\nfor different platforms.\nYou can add a new platform implementation to any\nendorsed federated plugin on pub.dev,\nso long as you coordinate this effort with the\noriginal plugin author.", "For more information, including information\nabout endorsed plugins, see the following resources:", "You can run the following samples as desktop apps,\nas well as download and inspect the source code to\nlearn more about Flutter desktop support.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/desktop", "base_url": "https://docs.flutter.dev/"}, {"title": "Measuring your app's size | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Many developers are concerned with the size of their compiled app.\nAs the APK, app bundle, or IPA version of a Flutter app is\nself-contained and holds all the code and assets needed to run the app,\nits size can be a concern. The larger an app,\nthe more space it requires on a device,\nthe longer it takes to download,\nand it might break the limit of useful\nfeatures like Android instant apps.", "By default, launching your app with flutter run,\nor by clicking the Play button in your IDE\n(as used in Test drive and\nWrite your first Flutter app),\ngenerates a debug build of the Flutter app.\nThe app size of a debug build is large due to\nthe debugging overhead that allows for hot reload\nand source-level debugging. As such, it is not representative of a production\napp end users download.", "A default release build, such as one created by flutter build apk or\nflutter build ios, is built to conveniently assemble your upload package\nto the Play Store and App Store. As such, they\u2019re also not representative of\nyour end-users\u2019 download size. The stores generally reprocess and split\nyour upload package to target the specific downloader and the downloader\u2019s\nhardware, such as filtering for assets targeting the phone\u2019s DPI, filtering\nnative libraries targeting the phone\u2019s CPU architecture.", "To get the closest approximate size on each platform, use the following\ninstructions.", "Follow the Google Play Console\u2019s instructions for checking app download and\ninstall sizes.", "Produce an upload package for your application:", "Log into your Google Play Console. Upload your application binary by drag\ndropping the .aab file.", "View the application\u2019s download and install size in the Android vitals ->\nApp size tab.", "The download size is calculated based on an XXXHDPI (~640dpi) device on an\narm64-v8a architecture. Your end users\u2019 download sizes might vary depending on\ntheir hardware.", "The top tab has a toggle for download size and install size. The page also\ncontains optimization tips further below.", "Create an Xcode App Size Report.", "First, by configuring the app version and build as described in the\niOS create build archive instructions.", "Sign and export the IPA. The exported directory contains\nApp Thinning Size Report.txt with details about your projected\napplication size on different devices and versions of iOS.", "The App Size Report for the default demo app in Flutter 1.17 shows:", "In this example, the app has an approximate\ndownload size of 5.4 MB and an approximate\ninstall size of 13.7 MB on an iPhone12,1 (Model ID / Hardware\nnumber for iPhone 11)\nand iPhone11,8 (iPhone XR) running iOS 13.0.", "To measure an iOS app exactly,\nyou have to upload a release IPA to Apple\u2019s\nApp Store Connect (instructions)\nand obtain the size report from there.\nIPAs are commonly larger than APKs as explained\nin How big is the Flutter engine?, a\nsection in the Flutter FAQ.", "Starting in Flutter version 1.22 and DevTools version 0.9.1,\na size analysis tool is included to help developers understand the breakdown\nof the release build of their application.", "report_problem Warning:\n  As stated in the checking total size section\n  above, an upload package is not representative of your end users\u2019 download\n  size. Be aware that redundant native library architectures and asset densities\n  seen in the breakdown tool can be filtered by the Play Store and App Store.", "The size analysis tool is invoked by passing the --analyze-size flag when\nbuilding:", "This build is different from a standard release build in two ways.", "In addition to analyzing a single build, two builds can also be diffed by\nloading two *-code-size-analysis_*.json files into DevTools. See\nDevTools documentation for details.", "Through the summary, you can get a quick idea of the size usage per category\n(such as asset, native code, Flutter libraries, etc). The compiled Dart\nnative library is further broken down by package for quick analysis.", "report_problem Warning:\n  This tool on iOS creates a .app rather than an IPA. Use this tool to\n  evaluate the relative size of the .app\u2019s content. To get\n  a closer estimate of the download size, reference the\n  Estimating total size section above.", "The *-code-size-analysis_*.json file produced above can be further\nanalyzed in deeper detail in DevTools where a tree or a treemap view can\nbreak down the contents of the application into the individual file level and\nup to function level for the Dart AOT artifact.", "This can be done by flutter pub global run devtools, selecting\nOpen app size tool and uploading the JSON file.", "For further information on using the DevTools app size tool, see\nDevTools documentation.", "When building a release version of your app,\nconsider using the --split-debug-info tag.\nThis tag can dramatically reduce code size.\nFor an example of using this tag, see\nObfuscating Dart code.", "Some other things you can do to make your app smaller are:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//perf/app-size", "base_url": "https://docs.flutter.dev/"}, {"title": "Place a floating app bar above a list | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "To make it easier for users to view a list of items,\nyou might want to hide the app bar as the user scrolls down the list.\nThis is especially true if your app displays a \u201ctall\u201d\napp bar that occupies a lot of vertical space.", "Typically, you create an app bar by providing an appBar property to the\nScaffold widget. This creates a fixed app bar that always remains above\nthe body of the Scaffold.", "Moving the app bar from a Scaffold widget into a\nCustomScrollView allows you to create an app bar\nthat scrolls offscreen as you scroll through a\nlist of items contained inside the CustomScrollView.", "This recipe demonstrates how to use a CustomScrollView to display a list of\nitems with an app bar on top that scrolls offscreen as the user scrolls\ndown the list using the following steps:", "To create a floating app bar, place the app bar inside a\nCustomScrollView that also contains the list of items.\nThis synchronizes the scroll position of the app bar and the list of items.\nYou might think of the CustomScrollView widget as a ListView\nthat allows you to mix and match different types of scrollable lists\nand widgets together.", "The scrollable lists and widgets provided to the\nCustomScrollView are known as slivers. There are several types\nof slivers, such as SliverList, SliverGridList, and SliverAppBar.\nIn fact, the ListView and GridView widgets use the SliverList and\nSliverGrid widgets to implement scrolling.", "For this example, create a CustomScrollView that contains a\nSliverAppBar and a SliverList. In addition, remove any app bars\nthat you provide to the Scaffold widget.", "Next, add an app bar to the CustomScrollView.\nFlutter provides the SliverAppBar widget which,\nmuch like the normal AppBar widget,\nuses the SliverAppBar to display a title,\ntabs, images and more.", "However, the SliverAppBar also gives you the ability to create a \u201cfloating\u201d\napp bar that scrolls offscreen as the user scrolls down the list.\nFurthermore, you can configure the SliverAppBar to shrink and\nexpand as the user scrolls.", "To create this effect:", "tips_and_updates Tip:\n  Play around with the\n  various properties you can pass to the SliverAppBar widget,\n  and use hot reload to see the results. For example, use an Image\n  widget for the flexibleSpace property to create a background image that\n  shrinks in size as it\u2019s scrolled offscreen.", "Now that you have the app bar in place, add a list of items to the\nCustomScrollView. You have two options: a SliverList\nor a SliverGrid.  If you need to display a list of items one after the other,\nuse the SliverList widget.\nIf you need to display a grid list, use the SliverGrid widget.", "The SliverList and SliverGrid widgets take one required parameter: a\nSliverChildDelegate, which provides a list\nof widgets to SliverList or SliverGrid.\nFor example, the SliverChildBuilderDelegate\nallows you to create a list of items that are built lazily as you scroll,\njust like the ListView.builder widget.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/floating-app-bar", "base_url": "https://docs.flutter.dev/"}, {"title": "Building layouts | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This is a guide to building layouts in Flutter.\nYou\u2019ll build the layout for the following app:", "This guide then takes a step back to explain Flutter\u2019s\napproach to layout, and shows how to place a single widget\non the screen. After a discussion of how to lay widgets\nout horizontally and vertically, some of the most common\nlayout widgets are covered.", "If you want a \u201cbig picture\u201d understanding of the layout mechanism,\nstart with Flutter\u2019s approach to layout.", "Make sure to set up your environment,\nthen do the following:", "Replace the contents in lib/main.dart with the following code:", "The first step is to break the layout down to its basic elements:", "First, identify the larger elements. In this example,\nfour elements are arranged into a column: an image, two rows, and a block of text.", "Next, diagram each row. The first row, called the Title\nsection, has 3 children: a column of text, a star icon,\nand a number. Its first child, the column, contains 2 lines of text.\nThat first column takes a lot of space, so it must be wrapped in an\nExpanded widget.", "The second row, called the Button section, also has\n3 children: each child is a column that contains an icon and text.", "Once the layout has been diagrammed, it\u2019s easiest to\ntake a bottom-up approach to implementing it.\nTo minimize the visual confusion of deeply nested layout code,\nplace some of the implementation in variables and functions.", "First, you\u2019ll build the left column in the title section.\nAdd the following code at the top of the build()\nmethod of the MyApp class:", "The button section contains 3 columns that use the same\nlayout\u2014an icon over a row of text.\nThe columns in this row are evenly spaced,\nand the text and icons are painted with the primary color.", "Since the code for building each column is almost identical,\ncreate a private helper method named buildButtonColumn(),\nwhich takes a color, an Icon and Text,\nand returns a column with its widgets painted in the given color.", "The function adds the icon directly to the column.\nThe text is inside a Container with a top-only margin,\nseparating the text from the icon.", "Build the row containing these columns by calling the\nfunction and passing the color, Icon, and text specific\nto that column. Align the columns along the main axis\nusing MainAxisAlignment.spaceEvenly to arrange the\nfree space evenly before, between, and after each column.\nAdd the following code just below the\ntitleSection declaration inside the build() method:", "Add the button section to the body:", "Define the text section as a variable. Put the text\nin a Container and add padding along each edge.\nAdd the following code just below the buttonSection\ndeclaration:", "By setting softwrap to true, text lines will fill the column width before\nwrapping at a word boundary.", "Add the text section to the body:", "Three of the four column elements are now complete,\nleaving only the image. Add the image file to the example:", "info\n  Note that wget doesn\u2019t work for saving this binary file.\n  The original image is available online under a\n  Creative Commons license, but it\u2019s large and slow to fetch.", "Update the pubspec.yaml file to include an assets tag.\nThis makes the image available to your code.", "Now you can reference the image from your code:", "BoxFit.cover tells the framework that the image should\nbe as small as possible but cover its entire render box.", "In this final step, arrange all of the elements in a\nListView, rather than a Column, because a\nListView supports app body scrolling when the app is run\non a small device.", "Dart code: main.dart\nImage: images\nPubspec: pubspec.yaml", "That\u2019s it! When you hot reload the app,\nyou should see the same app layout as\nthe screenshot at the top of this page.", "You can add interactivity to this layout by following\nAdding Interactivity to Your Flutter App.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//ui/layout/tutorial", "base_url": "https://docs.flutter.dev/"}, {"title": "Use lists | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Displaying lists of data is a fundamental pattern for mobile apps.\nFlutter includes the ListView\nwidget to make working with lists a breeze.", "Using the standard ListView constructor is\nperfect for lists that contain only a few items.\nThe built-in ListTile\nwidget is a way to give items a visual structure.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/basic-list", "base_url": "https://docs.flutter.dev/"}, {"title": "Cookbook | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This cookbook contains recipes that demonstrate how to solve common problems \nwhile writing Flutter apps. Each recipe is self-contained and can be used as a\nreference to help you build up an application.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook", "base_url": "https://docs.flutter.dev/"}, {"title": "Use a custom font | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Although Android and iOS offer high quality system fonts,\none of the most common requests from designers is for custom fonts.\nFor example, you might have a custom-built font from a designer,\nor perhaps you downloaded a font from Google Fonts.", "info Note:\n  Check out the google_fonts package for direct access\n  to over 1,000 open-sourced font families.", "info Note:\n  For another approach to using custom fonts, \n  especially if you want to re-use one font over multiple projects, \n  see Export fonts from a package.", "Flutter works with custom fonts and you can apply a custom\nfont across an entire app or to individual widgets.\nThis recipe creates an app that uses custom fonts with\nthe following steps:", "To work with a font, import the font files into the project.\nIt\u2019s common practice to put font files in a fonts or assets\nfolder at the root of a Flutter project.", "For example, to import the Raleway and Roboto Mono font\nfiles into a project, the folder structure might look like this:", "Flutter supports the following font formats:", "Flutter does not support .woff and .woff2 fonts for all platforms.", "Once you\u2019ve identified a font, tell Flutter where to find it.\nYou can do this by including a font definition in the pubspec.yaml file.", "The family determines the name of the font, which you use in the\nfontFamily property of a TextStyle object.", "The asset is a path to the font file,\nrelative to the pubspec.yaml file.\nThese files contain the outlines for the glyphs in the font.\nWhen building the app,\nthese files are included in the app\u2019s asset bundle.", "A single font can reference many different files with different\noutline weights and styles:", "The weight property specifies the weight of the outlines in\nthe file as an integer multiple of 100, between 100 and 900.\nThese values correspond to the FontWeight and can be used in the\nfontWeight property of a TextStyle object. \nFor example, if you want to use the RobotoMono-Bold font defined above, \nyou would set fontWeight to FontWeight.w700 in your TextStyle.", "Note that defining the weight property does not\noverride the actual weight of the font. You would not be able to\naccess RobotoMono-Bold with FontWeight.w100, even if its weight\nwas set to 100.", "The style property specifies whether the outlines in the file are\nitalic or normal. \nThese values correspond to the FontStyle and can be used in the\nfontStyle property of a TextStyle object. \nFor example, if you want to use the Raleway-Italic font defined above, \nyou would set fontStyle to FontStyle.italic in your TextStyle.", "Note that defining the style property does not\noverride the actual style of the font; You would not be able to\naccess Raleway-Italic with FontStyle.normal, even if its style\nwas set to normal.", "You have two options for how to apply fonts to text: as the default font\nor only within specific widgets.", "To use a font as the default, set the fontFamily property\nas part of the app\u2019s theme. The value provided to\nfontFamily must match the family\nname declared in the pubspec.yaml.", "For more information on themes,\nsee the Using Themes to share colors and font styles recipe.", "If you want to apply the font to a specific widget,\nsuch as a Text widget,\nprovide a TextStyle to the widget.", "In this example, apply the RobotoMono font to a single Text widget.\nOnce again, the fontFamily must match the family name declared in the\npubspec.yaml.", "If a TextStyle object specifies a weight\nor style for which there is no exact font file,\nthe engine uses one of the more generic files\nfor the font and attempts to extrapolate outlines\nfor the requested weight and style.", "The Raleway and RobotoMono fonts were downloaded from\nGoogle Fonts.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/design/fonts", "base_url": "https://docs.flutter.dev/"}, {"title": "Use a native language debugger | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "info Note:\n  This guide presumes you understand general debugging,\n  have installed Flutter and git, and have familiarity\n  with the Dart language as well as one of the following\n  languages: Java, Kotlin, Swift, or Objective-C.", "If you write Flutter apps only with Dart code,\nyou can debug your code using your IDE\u2019s debugger.\nThe Flutter team recommends VS Code.", "If you write a platform-specific plugin or\nuse platform-specific libraries, you can debug\nthat portion of your code with a native debugger.", "This guide shows you how you can connect two\ndebuggers to your Dart app, one for Dart, and one for the native code.", "This guide describes how to use VS Code to debug your Flutter app.\nYou can also use your preferred IDE with the\nFlutter and Dart plugins installed and configured.", "The following procedure explains how to use the Dart debugger\nwith the default sample Flutter app.\nThe featured components in VS Code work and appear when\ndebugging your own Flutter project as well.", "Create a basic Flutter app.", "Open the lib\\main.dart file in the Flutter app using\nVS Code.", "Click the bug icon\n().\nThis opens the following panes in VS Code:", "The first time you run the debugger takes the longest.", "a. In main.dart, click on this line:", "b. Press Shift + F9.\n   This adds a breakpoint where the\n   _counter variable increments.", "c. In the app, click the + button\n   to increment the counter. The app pauses.", "d. At this point, VS Code displays:", "The Flutter plugin for VS Code adds a number of components\nto the VS Code user interface.", "When launched, the Flutter debugger adds debugging tools to the\nVS Code interface.", "The following screenshot and table explain the purpose of each tool.", "To change where the panel (in orange) appears in VS Code,\ngo to View > Appearance > Panel Position.", "The toolbar allows you to debug using any debugger.\nYou can step in, out, and over Dart statements, hot reload, or resume the app.", "For the remainder of this guide, you need to update the\ntest Flutter app. This update adds native code to debug.", "Open the lib/main.dart file using your preferred IDE.", "Replace the contents of main.dart with the following code.", "To add the url_launcher package as a dependency,\nrun flutter pub add:", "To check what changed with the codebase:", "In Linux or macOS, run this find command.", "In Windows, run this command in the command prompt.", "Installing url_launcher added config files and code files\nfor all target platforms in the Flutter app directory.", "This section explains how to debug the Dart code in your Flutter app\nand any native code with its regular debugger.\nThis capability allows you to leverage Flutter\u2019s hot reload\nwhen editing native code.", "To debug native Android code, you need a Flutter app that contains\nAndroid code. In this section, you learn how to connect\nthe Dart, Java, and Kotlin debuggers to your app.\nYou don\u2019t need VS Code to debug both Dart and Android code.\nThis guide includes the VS Code instructions to be consistent\nwith the Xcode and Visual Studio guides.", "These section uses the same example Flutter url_launcher app created\nin Update test Flutter app.", "info Note:\n  If you want to use the GNU Project Debugger to debug the\n  Flutter engine running within an Android app process,\n  check out flutter_gdb.", "To generate the needed Android platform dependencies,\nrun the flutter build command.", "If you use VS Code to debug most of your code, start with this section.", "To open the Flutter app directory, go to\nFile >\nOpen Folder\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "If you can build an app for more than one device,\nyou must select the device first.", "Go to\nView >\nCommand Palette\u2026", "You can also press Ctrl / Cmd +\nShift + P.", "Click the Flutter: Select Device command.", "Choose your target device.", "Click the debug icon\n().\nThis opens the Debug pane and launches the app.\nWait for the app to launch on the device and for the debug pane to\nindicate Connected.\nThe debugger takes longer to launch the first time.\nSubsequent launches start faster.", "This Flutter app contains two buttons:", "Click the Attach debugger to Android process button.\n()", "tips_and_updates Tip:\n   If this button doesn\u2019t appear in the Projects menu bar, verify that\n   you opened Flutter application project but not a Flutter plugin.", "The process dialog displays one entry for each connected device.\nSelect show all processes to display available processes for each\ndevice.", "Choose the process to which you want to attach.\nFor this guide, select the com.example.my_app process\nusing the Emulator Pixel_5_API_33.", "Locate the tab for Android Debugger in the Debug pane.", "In the Project pane, expand\nmy_app_android >\nandroid >\napp >\nsrc >\nmain >\njava >\nio.flutter plugins.", "Double click GeneratedProjectRegistrant to open the\nJava code in the Edit pane.", "At the end of this procedure, both the Dart and Android debuggers interact\nwith the same process.\nUse either, or both, to set breakpoints, examine stack, resume execution\nand the like. In other words, debug!", "If you use Android Studio to debug most of your code, start with this section.", "To open the Flutter app directory, go to\nFile >\nOpen\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "Choose a virtual Android device.\nGo to the toolbar, open the leftmost dropdown menu, and click on\nOpen Android Emulator: <device>.", "You can choose any installed emulator that\u2019s doesn\u2019t include arm64.", "From that same menu, select the virtual Android device.", "From the toolbar, click Run \u2018main.dart\u2019.", "You can also press Ctrl + Shift + R.", "After the app displays in the emulator, continue to the next step.", "Click the Attach debugger to Android process button.\n()", "tips_and_updates Tip:\n   If this button doesn\u2019t appear in the Projects menu bar, verify that\n   you opened Flutter application project but not a Flutter plugin.", "The process dialog displays one entry for each connected device.\nSelect show all processes to display available processes for each\ndevice.", "Choose the process to which you want to attach.\nFor this guide, select the com.example.my_app process\nusing the Emulator Pixel_5_API_33.", "Locate the tab for Android Debugger in the Debug pane.", "In the Project pane, expand\nmy_app_android >\nandroid >\napp >\nsrc >\nmain >\njava >\nio.flutter plugins.", "Double click GeneratedProjectRegistrant to open the\nJava code in the Edit pane.", "At the end of this procedure, both the Dart and Android debuggers interact\nwith the same process.\nUse either, or both, to set breakpoints, examine stack, resume execution\nand the like. In other words, debug!", "To debug iOS code, you need a Flutter app that contains iOS code.\nIn this section, you learn to connect two debuggers to your app:\nFlutter via VS Code and Xcode. You need to run both VS Code and Xcode.", "These section uses the same example Flutter url_launcher app created\nin Update test Flutter app.", "To generate the needed iOS platform dependencies,\nrun the flutter build command.", "If you use VS Code to debug most of your code, start with this section.", "To open the Flutter app directory, go to\nFile >\nOpen Folder\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "If you can build an app for more than one device,\nyou must select the device first.", "Go to\nView >\nCommand Palette\u2026", "You can also press Ctrl / Cmd +\nShift + P.", "Click the Flutter: Select Device command.", "Choose your target device.", "Click the debug icon\n().\nThis opens the Debug pane and launches the app.\nWait for the app to launch on the device and for the debug pane to\nindicate Connected.\nThe debugger takes longer to launch the first time.\nSubsequent launches start faster.", "This Flutter app contains two buttons:", "To attach to the Flutter app, go to\nDebug >\nAttach to Process >\nRunner.", "Runner should be at the top of the Attach to Process menu\nunder the Likely Targets heading.", "If you use Xcode to debug most of your code, start with this section.", "Open ios/Runner.xcworkspace from your Flutter app directory.", "Select the correct device using the Scheme menu in the toolbar.", "If you have no preference, choose iPhone Pro 14.", "Run this Runner as a normal app in Xcode.", "When the run completes, the Debug area at the bottom of Xcode displays\n a message with the Dart VM service URI. It resembles the following response:", "Copy the Dart VM service URI.", "To open the command palette, go to\n View >\nCommand Palette\u2026", "You can also press Cmd + Shift + P.", "Click the Debug: Attach to Flutter on Device command.", "In the Paste an VM Service URI box, paste the URI you copied\n from Xcode and press Enter.", "To debug macOS code, you need a Flutter app that contains macOS code.\nIn this section, you learn to connect two debuggers to your app:\nFlutter via VS Code and Xcode. You need to run both VS Code and Xcode.", "These section uses the same example Flutter url_launcher app created\nin Update test Flutter app.", "To generate the needed macOS platform dependencies,\nrun the flutter build command.", "To open the Flutter app directory, go to\nFile >\nOpen Folder\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "If you can build an app for more than one device,\nyou must select the device first.", "Go to\nView >\nCommand Palette\u2026", "You can also press Ctrl / Cmd +\nShift + P.", "Click the Flutter: Select Device command.", "Choose your target device.", "Click the debug icon\n().\nThis opens the Debug pane and launches the app.\nWait for the app to launch on the device and for the debug pane to\nindicate Connected.\nThe debugger takes longer to launch the first time.\nSubsequent launches start faster.", "This Flutter app contains two buttons:", "To attach to the Flutter app, go to\nDebug >\nAttach to Process >\nRunner.", "Runner should be at the top of the Attach to Process menu\nunder the Likely Targets heading.", "Open macos/Runner.xcworkspace from your Flutter app directory.", "Run this Runner as a normal app in Xcode.", "When the run completes, the Debug area at the bottom of Xcode displays\na message with the Dart VM service URI. It resembles the following response:", "Copy the Dart VM service URI.", "To open the command palette, go to View > Command Palette\u2026", "You can also press Cmd + Shift + P.", "Click the Debug: Attach to Flutter on Device command.", "In the Paste an VM Service URI box, paste the URI you copied\nfrom Xcode and press Enter.", "To debug C++ code, you need a Flutter app that contains C++ code.\nIn this section, you learn to connect two debuggers to your app:\nFlutter via VS Code and Visual Studio.\nYou need to run both VS Code and Visual Studio.", "These section uses the same example Flutter url_launcher app created\nin Update test Flutter app.", "To generate the needed Windows platform dependencies,\nrun the flutter build command.", "If you use VS Code to debug most of your code, start with this section.", "To open the Flutter app directory, go to\nFile >\nOpen Folder\u2026 and choose the my_app directory.", "Open the lib/main.dart file.", "If you can build an app for more than one device,\nyou must select the device first.", "Go to\nView >\nCommand Palette\u2026", "You can also press Ctrl / Cmd +\nShift + P.", "Click the Flutter: Select Device command.", "Choose your target device.", "Click the debug icon\n().\nThis opens the Debug pane and launches the app.\nWait for the app to launch on the device and for the debug pane to\nindicate Connected.\nThe debugger takes longer to launch the first time.\nSubsequent launches start faster.", "This Flutter app contains two buttons:", "To open the project solution file, go to\nFile >\nOpen >\nProject/Solution\u2026", "You can also press Ctrl + Shift + O.", "Choose the build/windows/my_app.sln file in your Flutter app directory.", "Go to Debug > Attach to Process.", "You can also press Ctrl + Alt + P.", "From the Attach to Process dialog box, choose my_app.exe.", "Visual Studio starts monitoring the Flutter app.", "If you use Visual Studio to debug most of your code, start with this section.", "To open the project solution file, go to\nFile >\nOpen >\nProject/Solution\u2026", "You can also press Ctrl + Shift + O.", "Choose the build/windows/my_app.sln file in your Flutter app directory.", "Set my_app as the startup project.\nIn the Solution Explorer, right-click on my_app and select\nSet as Startup Project.", "Click Local Windows Debugger to start debugging.", "You can also press F5.", "When the Flutter app has started, a console window displays\na message with the Dart VM service URI. It resembles the following response:", "Copy the Dart VM service URI.", "To open the command palette, go to\nView >\nCommand Palette\u2026", "You can also press Cmd + Shift + P.", "Click the Debug: Attach to Flutter on Device command.", "In the Paste an VM Service URI box, paste the URI you copied\nfrom Visual Studio and press Enter.", "Check out the following resources on debugging Flutter, iOS, Android,\nmacOS and Windows:", "You can find the following debugging resources on\ndeveloper.android.com.", "You can find the following debugging resources on\ndeveloper.apple.com.", "You can find debugging resources on Microsoft Learn.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/native-debugging", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter for SwiftUI Developers | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "SwiftUI developers who want to write mobile apps using Flutter\nshould review this guide.\nIt explains how to apply existing SwiftUI knowledge to Flutter.", "info Note:\n  If you instead have experience building apps for iOS with UIKit,\n  see Flutter for UIKit developers.", "Flutter is a framework for building cross-platform applications\nthat uses the Dart programming language.\nTo understand some differences between programming with Dart\nand programming with Swift, see Learning Dart as a Swift Developer\nand Flutter concurrency for Swift developers.", "Your SwiftUI knowledge and experience\nare highly valuable when building with Flutter.", "Flutter also makes a number of adaptations\nto app behavior when running on iOS and macOS.\nTo learn how, see Platform adaptations.", "info\n  To integrate Flutter code into an existing iOS app, \n  check out Add Flutter to existing app.", "This document can be used as a cookbook by jumping around\nand finding questions that are most relevant to your needs.\nThis guide embeds sample code.\nYou can test full working examples on DartPad or view them on GitHub.", "As an introduction, watch the following video.\nIt outlines how Flutter works on iOS and how to use Flutter to build iOS apps.", "Flutter and SwiftUI code describes how the UI looks and works.\nDevelopers call this type of code a declarative framework.", "SwiftUI represents UI components as views.\nYou configure views using modifiers.", "Flutter represents UI components as widgets.", "Both views and widgets only exist until they need to be changed.\nThese languages call this property immutability.\nSwiftUI represents a UI component property as a View modifier.\nBy contrast, Flutter uses widgets for both UI components and\ntheir properties.", "To compose layouts, both SwiftUI and Flutter nest UI components\nwithin one another.\nSwiftUI nests Views while Flutter nests Widgets.", "SwiftUI lays out views using the following process:", "Flutter differs somewhat with its process:", "Flutter differs from SwiftUI because the parent component can override\nthe child\u2019s desired size. The widget cannot have any size it wants.\nIt also cannot know or decide its position on screen as its parent\nmakes that decision.", "To force a child widget to render at a specific size,\nthe parent must set tight constraints.\nA constraint becomes tight when its constraint\u2019s minimum size value\nequals its maximum size value.", "In SwiftUI, views might expand to the available space or\nlimit their size to that of its content.\nFlutter widgets behave in similar manner.", "However, in Flutter parent widgets can offer unbounded constraints.\nUnbounded constraints set their maximum values to infinity.", "If the child expands and it has unbounded constraints,\nFlutter returns an overflow warning:", "To learn how constraints work in Flutter,\nsee Understanding constraints.", "Because Flutter targets multiple platforms, your app doesn\u2019t need\nto conform to any design system.\nThough this guide features Material widgets,\nyour Flutter app can use many different design systems:", "If you\u2019re looking for a great reference app that features a\ncustom design system, check out Wonderous.", "This section covers the basics of UI development in\nFlutter and how it compares to SwiftUI.\nThis includes how to start developing your app, display static text,\ncreate buttons, react to on-press events, display lists, grids, and more.", "In SwiftUI, you use App to start your app.", "Another common SwiftUI practice places the app body within a struct\nthat conforms to the View protocol as follows:", "To start your Flutter app, pass in an instance of your app to\nthe runApp function.", "App is a widget. The build method describes the part of the\nuser interface it represents.\nIt\u2019s common to begin your app with a WidgetApp class,\nlike CupertinoApp.", "The widget used in HomePage might begin with the Scaffold class.\nScaffold implements a basic layout structure for an app.", "Note how Flutter uses the Center widget.\nSwiftUI renders a view\u2019s contents in its center by default.\nThat\u2019s not always the case with Flutter.\nScaffold doesn\u2019t render its body widget at the center of the screen.\nTo center the text, wrap it in a Center widget.\nTo learn about different widgets and their default behaviors, check out\nthe Widget catalog.", "In SwiftUI, you use the Button struct to create a button.", "To achieve the same result in Flutter,\nuse the CupertinoButton class:", "Flutter gives you access to a variety of buttons with predefined styles.\nThe CupertinoButton class comes from the Cupertino library.\nWidgets in the Cupertino library use Apple\u2019s design system.", "In SwiftUI, stack views play a big part in designing your layouts.\nTwo separate structures allow you to create stacks:", "HStack for horizontal stack views", "VStack for vertical stack views", "The following SwiftUI view adds a globe image and\ntext to a horizontal stack view:", "Flutter uses Row rather than HStack:", "The Row widget requires a List<Widget> in the children parameter.\nThe mainAxisAlignment property tells Flutter how to position children\nwith extra space. MainAxisAlignment.center positions children in the\ncenter of the main axis. For Row, the main axis is the horizontal\naxis.", "The following examples build on those in the previous section.", "In SwiftUI, you use VStack to arrange the components into a\nvertical pillar.", "Flutter uses the same Dart code from the previous example,\nexcept it swaps Column for Row:", "In SwiftUI, you use the List base component to display sequences\nof items.\nTo display a sequence of model objects, make sure that the user can\nidentify your model objects.\nTo make an object identifiable, use the Identifiable protocol.", "This resembles how Flutter prefers to build its list widgets.\nFlutter doesn\u2019t need the list items to be identifiable.\nYou set the number of items to display then build a widget for each item.", "Flutter has some caveats for lists:", "The ListView widget has a builder method.\nThis works like the ForEach within SwiftUI\u2019s List struct.", "The itemCount parameter of the ListView sets how many items\nthe ListView displays.", "The itemBuilder has an index parameter that will be between zero\nand one less than itemCount.", "The previous example returned a ListTile widget for each item.\nThe ListTile widget includes properties like height and font-size.\nThese properties help build a list. However, Flutter allows you to return\nalmost any widget that represents your data.", "When constructing non-conditional grids in SwiftUI,\nyou use Grid with GridRow.", "To display grids in Flutter, use the GridView widget.\nThis widget has various constructors. Each constructor has\na similar goal, but uses different input parameters.\nThe following example uses the .builder() initializer:", "The SliverGridDelegateWithFixedCrossAxisCount delegate determines\nvarious parameters that the grid uses to lay out its components.\nThis includes crossAxisCount that dictates the number of items\ndisplayed on each row.", "How SwiftUI\u2019s Grid and Flutter\u2019s GridView differ in that Grid\nrequires GridRow. GridView uses the delegate to decide how the\ngrid should lay out its components.", "In SwiftUI, you use ScrollView to create custom scrolling\ncomponents.\nThe following example displays a series of PersonView instances\nin a scrollable fashion.", "To create a scrolling view, Flutter uses SingleChildScrollView.\nIn the following example, the function mockPerson mocks instances\nof the Person class to create the custom PersonView widget.", "In SwiftUI, you use GeometryReader to create relative view sizes.", "For example, you could:", "You can also see if the size class has .regular or .compact\nusing horizontalSizeClass.", "To create relative views in Flutter, you can use one of two options:", "To learn more, check out Creating responsive and adaptive apps.", "In SwiftUI, you use the @State property wrapper to represent the\ninternal state of a SwiftUI view.", "SwiftUI also includes several options for more complex state\nmanagement such as the ObservableObject protocol.", "Flutter manages local state using a StatefulWidget.\nImplement a stateful widget with the following two classes:", "The State object stores the widget\u2019s state.\nTo change a widget\u2019s state, call setState() from the State subclass\nto tell the framework to redraw the widget.", "The following example shows a part of a counter app:", "To learn more ways to manage state, check out State management.", "Two main types of UI animations exist.", "SwiftUI and Flutter take a similar approach to animation.\nIn both frameworks, you specify parameters like duration, and curve.", "In SwiftUI, you use the animate() modifier to handle implicit\nanimation.", "Flutter includes widgets for implicit animation.\nThis simplifies animating common widgets.\nFlutter names these widgets with the following format: AnimatedFoo.", "For example: To rotate a button, use the AnimatedRotation class.\nThis animates the Transform.rotate widget.", "Flutter allows you to create custom implicit animations.\nTo compose a new animated widget, use the TweenAnimationBuilder.", "For explicit animations, SwiftUI uses the withAnimation() function.", "Flutter includes explicitly animated widgets with names formatted\nlike FooTransition.\nOne example would be the RotationTransition class.", "Flutter also allows you to create a custom explicit animation using\nAnimatedWidget or AnimatedBuilder.", "To learn more about animations in Flutter, see Animations overview.", "In SwiftUI, you use CoreGraphics to draw lines and shapes to the\nscreen.", "Flutter has an API based on the Canvas class,\nwith two classes that help you draw:", "CustomPaint that requires a painter:", "CustomPainter that implements your algorithm to draw to the canvas.", "This section explains how to navigate between pages of an app,\nthe push and pop mechanism, and more.", "Developers build iOS and macOS apps with different pages called\nnavigation routes.", "In SwiftUI, the NavigationStack represents this stack of pages.", "The following example creates an app that displays a list of persons.\nTo display a person\u2019s details in a new navigation link,\ntap on that person.", "If you have a small Flutter app without complex linking,\nuse Navigator with named routes.\nAfter defining your navigation routes,\ncall your navigation routes using their names.", "Name each route in the class passed to the runApp() function.\nThe following example uses App:", "The following sample generates a list of persons using\nmockPersons(). Tapping a person pushes the person\u2019s detail page\nto the Navigator using pushNamed().", "Define the DetailsPage widget that displays the details of\neach person. In Flutter, you can pass arguments into the\nwidget when navigating to the new route.\nExtract the arguments using ModalRoute.of():", "To create more advanced navigation and routing requirements,\nuse a routing package such as go_router.", "To learn more, check out Navigation and routing.", "In SwiftUI, you use the dismiss environment value to pop-back to\nthe previous screen.", "In Flutter, use the pop() function of the Navigator class:", "In SwiftUI, you use the openURL environment variable to open a\nURL to another application.", "In Flutter, use the url_launcher plugin.", "You can style Flutter apps with little effort.\nStyling includes switching between light and dark themes,\nchanging the design of your text and UI components,\nand more. This section covers how to style your apps.", "In SwiftUI, you call the preferredColorScheme()\nfunction on a View to use dark mode.", "In Flutter, you can control light and dark mode at the app-level.\nTo control the brightness mode, use the theme property\nof the App class:", "In SwiftUI, you use modifier functions to style text.\nFor example, to change the font of a Text string,\nuse the font() modifier:", "To style text in Flutter, add a TextStyle widget as the value\nof the style parameter of the Text widget.", "In SwiftUI, you use modifier functions to style buttons.", "To style button widgets in Flutter, set the style of its child,\nor modify properties on the button itself.", "In the following example:", "In SwiftUI, you can use a custom font in your app in two steps.\nFirst, add the font file to your SwiftUI project. After adding the file,\nuse the .font() modifier to apply it to your UI components.", "In Flutter, you control your resources with a file\nnamed pubspec.yaml. This file is platform agnostic.\nTo add a custom font to your project, follow these steps:", "Add your custom font(s) under the fonts section.", "After you add the font to your project, you can use it as in the\nfollowing example:", "info Note:\n  To download custom fonts to use in your apps,\n  check out Google Fonts.", "In SwiftUI, you first add the image files to Assets.xcassets,\nthen use the Image view to display the images.", "To add images in Flutter, follow a method similar to how you added\ncustom fonts.", "Add this asset to the pubspec.yaml file.", "After adding your image, display it using the Image widget\u2019s\n.asset() constructor. This constructor:", "To review a complete example, check out the Image docs.", "In SwiftUI, you bundle a local video file with your app in two\nsteps.\nFirst, you import the AVKit framework, then you instantiate a\nVideoPlayer view.", "In Flutter, add the video_player plugin to your project.\nThis plugin allows you to create a video player that works on\nAndroid, iOS, and on the web from the same codebase.", "To review a complete walkthrough, check out the video_player example.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//get-started/flutter-for/swiftui-devs", "base_url": "https://docs.flutter.dev/"}, {"title": "Bootstrap into Dart | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "New to the Dart language?\nWe compiled our favorite resources to\nhelp you quickly learn Dart.\nMany people have reported that\nDart is easy and fun to learn.\nWe hope these resources make Dart easy for\nyou to learn, too.", "Want to learn more and perhaps contribute?\nCheck out the Dart community.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/bootstrap-into-dart", "base_url": "https://docs.flutter.dev/"}, {"title": "Debugging Flutter apps programmatically | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This doc describes debugging features that you can enable in code.\nFor a full list of debugging and profiling tools, see the\nDebugging page.", "info Note:\n  If you are looking for a way to use GDB to remotely debug the\n  Flutter engine running within an Android app process,\n  check out flutter_gdb.", "info Note:\n  You can view logs in DevTools\u2019 Logging view\n  or in your system console. This sections\n  shows how to set up your logging statements.", "You have two options for logging for your application.\nThe first is to use stdout and stderr.\nGenerally, this is done using print() statements,\nor by importing dart:io and invoking methods on\nstderr and stdout. For example:", "If you output too much at once, then Android sometimes\ndiscards some log lines. To avoid this, use debugPrint(),\nfrom Flutter\u2019s foundation library. This is a wrapper around print\nthat throttles the output to a level that avoids being dropped by\nAndroid\u2019s kernel.", "The other option for application logging is to use the\ndart:developer log() function. This allows you to include a\nbit more granularity and information in the logging output.\nHere\u2019s an example:", "You can also pass application data to the log call.\nThe convention for this is to use the error: named\nparameter on the log() call, JSON encode the object\nyou want to send, and pass the encoded string to the\nerror parameter.", "If viewing the logging output in DevTool\u2019s logging view,\nthe JSON encoded error param is interpreted as a data object\nand rendered in the details view for that log entry.", "info Note:\n  You can set breakpoints in DevTools\u2019 Debugger, or\n  in the built-in debugger of your IDE. If you want to\n  set breakpoints programmatically, use the following\n  instructions.", "You can insert programmatic breakpoints using the\ndebugger() statement. To use this, you have to\nimport the dart:developer package at the top of\nthe relevant file.", "The debugger() statement takes an optional when\nargument that you can specify to only break when a\ncertain condition is true, as in the following example:", "Each layer of the Flutter framework provides a function to dump its\ncurrent state or events to the console (using debugPrint).", "To dump the state of the Widgets library, call debugDumpApp().\nYou can call this more or less any time that the application is not in\nthe middle of running a build phase (in other words, not anywhere inside a\nbuild() method), if the app has built at least once and is in debug mode\n(in other words, any time after calling runApp()).", "For example, the following application:", "The previous app outputs something like the following\n(the precise details vary by the version of the framework,\nthe size of the device, and so forth):", "This is the \u201cflattened\u201d tree, showing all the widgets projected\nthrough their various build functions. (This is the tree you obtain if\nyou call toStringDeep() on the root of the widget tree.)\nYou\u2019ll see a lot of widgets in there that don\u2019t appear in your\napplication\u2019s source, because they are inserted by the framework\u2019s\nwidgets\u2019 build functions. For example,\nInkFeature is an implementation detail of the Material widget.", "Since the debugDumpApp() call is invoked when the button changes\nfrom being pressed to being released, it coincides with the\nTextButton object calling setState()\nand thus marking itself dirty. That is why, when you look at the dump you\nshould see that specific object marked as \u201cdirty\u201d. You can also see what\ngesture listeners have been registered; in this case, a single\nGestureDetector is listed, and it is listening only to a \u201ctap\u201d gesture\n(\u201ctap\u201d is the output of a TapGestureDetector\u2019s toStringShort\nfunction).", "If you write your own widgets, you can add information by overriding\ndebugFillProperties(). Add DiagnosticsProperty\nobjects to the method\u2019s argument, and call the superclass method.\nThis function is what the toString method uses to fill in the\nwidget\u2019s description.", "If you are trying to debug a layout issue, then the Widgets layer\u2019s\ntree might be insufficiently detailed. In that case, you can dump the\nrendering tree by calling debugDumpRenderTree().\nAs with debugDumpApp(), you can call this more or less any time\nexcept during a layout or paint phase. As a general rule,\ncalling it from a frame callback\nor an event handler is the best solution.", "To call debugDumpRenderTree(), you need to add import\n'package:flutter/rendering.dart'; to your source file.", "The output for the previous tiny example would look something like\nthe following:", "This is the output of the root RenderObject object\u2019s\ntoStringDeep() function.", "When debugging layout issues, the key fields to look at are the\nsize and constraints fields. The constraints flow down the tree,\nand the sizes flow back up.", "For example, in the previous dump you can see that the window size,\nSize(411.4, 683.4), is used to force all the boxes down to the\nRenderPositionedBox to be the size of the screen, with\nconstraints of BoxConstraints(w=411.4, h=683.4).\nThe RenderPositionedBox, which the dump says was created by a\nCenter widget (as described by the creator field),\nsets its child\u2019s constraints to a loose version of this:\nBoxConstraints(0.0<=w<=411.4, 0.0<=h<=683.4). The child, a\nRenderPadding, further inserts these constraints to ensure\nthere is room for the padding, and thus the RenderConstrainedBox\nhas a loose constraint of BoxConstraints(0.0<=w<=395.4,\n0.0<=h<=667.4). This object, which the creator field tells us is\nprobably part of the TextButton\u2019s definition,\nsets a minimum width of 88 pixels on its contents and a\nspecific height of 36.0. (This is the TextButton class implementing\nthe Material Design guidelines regarding button dimensions.)", "The inner-most RenderPositionedBox loosens the constraints again,\nthis time to center the text within the button. The\nRenderParagraph picks its size based on its contents.\nIf you now follow the sizes back up the chain,\nyou\u2019ll see how the text\u2019s size is what influences the\nwidth of all the boxes that form the button, as they all take their\nchild\u2019s dimensions to size themselves.", "Another way to notice this is by looking at the \u201crelayoutSubtreeRoot\u201d\npart of the descriptions of each box, which essentially tells you how\nmany ancestors depend on this element\u2019s size in some way.\nThus the RenderParagraph has a relayoutSubtreeRoot=up8,\nmeaning that when the RenderParagraph is dirtied,\neight ancestors also have to be dirtied because they might be\naffected by the new dimensions.", "If you write your own render objects, you can add information to the\ndump by overriding debugFillProperties().\nAdd DiagnosticsProperty\nobjects to the method\u2019s argument, and call the superclass method.", "If you are trying to debug a compositing issue, you can use\ndebugDumpLayerTree().\nFor the previous example, it would output:", "This is the output of calling toStringDeep on the root Layer object.", "The transform at the root is the transform that applies the device\npixel ratio; in this case, a ratio of 3.5 device pixels for every\nlogical pixel.", "The RepaintBoundary widget, which creates a RenderRepaintBoundary\nin the render tree, creates a new layer in the layer tree. This is\nused to reduce how much needs to be repainted.", "To debug a focus or shortcut issue, you can dump the focus tree\nusing debugDumpFocusTree().", "The focused node is labeled PRIMARY FOCUS. Ancestors of the focus nodes are\nlabeled IN FOCUS PATH.", "If your app uses the Focus widget, you can use the debugLabel\nproperty to make it easier to find its focus node in the tree.", "You can also use the debugFocusChanges boolean flag to enable\nextensive logging when the focus changes.", "You can also obtain a dump of the Semantics tree\n(the tree presented to the system accessibility APIs) using\ndebugDumpSemanticsTree().  To use this,\nyou have to have first enable accessibility, for example, by\nenabling a system accessibility tool or the SemanticsDebugger.", "For the previous example, it would output the following:", "To find out where your events happen relative to the frame\u2019s\nbegin/end, you can toggle the debugPrintBeginFrameBanner\nand the debugPrintEndFrameBanner booleans to print the\nbeginning and end of the frames to the console.", "The debugPrintScheduleFrameStacks flag can also be used\nto print the call stack causing the current frame to be scheduled.", "You can also debug a layout problem visually, by setting\ndebugPaintSizeEnabled to true.\nThis is a boolean from the rendering library. It can be\nenabled at any time and affects all painting while it is true.\nThe easiest way to set it is at the top of your void main()\nentry point. See an example in the following code:", "When it is enabled, all boxes get a bright teal border,\npadding (from widgets like Padding) is shown in faded\nblue with a darker blue box around the child, alignment\n(from widgets like Center and Align) is shown with\nyellow arrows, and spacers (from widgets like\nContainer when they have no child) are shown in gray.", "The debugPaintBaselinesEnabled flag\ndoes something similar but for objects with baselines.\nThe alphabetic baseline is shown in bright green and the\nideographic baseline in orange.", "The debugPaintPointersEnabled flag turns on a\nspecial mode whereby any objects that are being tapped\nget highlighted in teal. This can help you determine\nwhether an object is somehow failing to correctly hit\ntest (which might happen if, for instance, it is actually\noutside the bounds of its parent and thus not\nbeing considered for hit testing in the first place).", "If you\u2019re trying to debug compositor layers, for example\nto determine whether and where to add RepaintBoundary\nwidgets, you can use the debugPaintLayerBordersEnabled\nflag, which outlines each layer\u2019s bounds in orange,\nor the debugRepaintRainbowEnabled flag,\nwhich causes layers to be overlayed with a rotating set of\ncolors whenever they are repainted.", "All of these flags only work in debug mode.\nIn general, anything in the Flutter framework that starts with\n\u201cdebug...\u201d only works in debug mode.", "info Note:\n  The easiest way to debug animations is to slow them down.\n  You can do this using the Slow Animations button in\n  DevTools\u2019 Inspector view, which slows down the\n  animation by 5x. If you want more control over the\n  amount of slowness, use the following instructions.", "Set the timeDilation variable (from the scheduler\nlibrary) to a number greater than 1.0, for instance, 50.0.\nIt\u2019s best to only set this once on app startup. If you\nchange it on the fly, especially if you reduce it while\nanimations are running, it\u2019s possible that the framework\nwill observe time going backwards, which will probably\nresult in asserts and generally interfere with your efforts.", "info Note:\n  You can achieve similar results to some of these debug\n  flags using DevTools. Some of the debug flags aren\u2019t\n  particularly useful. If you find a flag that has\n  functionality you would like to see added to DevTools,\n  please file an issue.", "Flutter provides a wide variety of debug flags and functions\nto help you debug your app at various points along the\ndevelopment cycle. To use these features, you must compile\nin debug mode.  The following list, while not complete,\nhighlights some of flags (and one function) from the\nrendering library for debugging performance issues.", "You can set these flags either by editing the framework code,\nor by importing the module and setting the value in your\nmain() method, following by a hot restart.", "Call this function when not in a layout or repaint\n  phase to dump the rendering tree to the console.\n  (Pressing t from flutter run calls this command.)\n  Search for \u201cRepaintBoundary\u201d to see diagnostics\n  on how useful a boundary is.", "You can enable this flag in the Flutter\n    inspector by selecting the Highlight Repaints button.\n    If any static widgets are rotating through the colors of the rainbow\n    (for example, a static header), those areas are candidates for adding\n    repaint boundaries.", "Enable this flag if you\u2019re seeing more layouts\n    than you expect (for example, on the timeline, on a profile,\n    or from a print statement inside a layout method).\n    Once enabled, the console is flooded with stack traces\n    showing why each render object is being marked dirty for\n    layout. You can use the debugPrintStack() method from the\n    services library to print your own stack traces on demand,\n    if this kind of approach is useful to you.", "Similar to debugPrintMarkNeedsLayoutStacks,\n    but for excess painting. You can use the debugPrintStack()\n    method from the services library to print your own stack\n    traces on demand, if this kind of approach is useful to you.", "info Note:\n  You can use the DevTools Timeline events tab to perform traces.\n  You can also import and export trace files into the Timeline view,\n  but only files generated by DevTools.", "To perform custom performance traces programmatically and\nmeasure wall/CPU time of arbitrary segments of Dart code\nsimilar to what would be done on Android with systrace,\nuse dart:developer Timeline utilities to wrap the\ncode you want to measure such as:", "Then open DevTools\u2019 Timeline events tab while connected to your app, \nverify the Dart recording option is checked in the Performance settings,\nand perform the function you want to measure.", "Be sure to run your app in profile mode to ensure that the\nruntime performance characteristics closely match that of your\nfinal product.", "info Note:\n  You can toggle display of the performance overlay on\n  your app using the Performance Overlay button in the\n  Flutter inspector. If you prefer to do it in code,\n  use the following instructions.", "You can programmatically enable the PerformanceOverlay widget by\nsetting the showPerformanceOverlay property to true on the\nMaterialApp, CupertinoApp, or WidgetsApp\nconstructor:", "(If you\u2019re not using MaterialApp, CupertinoApp,\nor WidgetsApp, you can get the same effect by wrapping your\napplication in a stack and putting a widget on your stack that was\ncreated by calling PerformanceOverlay.allEnabled().)", "For information on how to interpret the graphs in the overlay,\nsee The performance overlay in\nProfiling Flutter performance.", "You can programmatically overlay a\nMaterial Design baseline grid on top of your app to\nhelp verify alignments by using the\ndebugShowMaterialGrid argument in the\nMaterialApp constructor.", "In non-Material applications, you can achieve a similar\neffect by using a GridPaper widget directly.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/code-debugging", "base_url": "https://docs.flutter.dev/"}, {"title": "Send data to a new screen | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Often, you not only want to navigate to a new screen,\nbut also pass data to the screen as well.\nFor example, you might want to pass information about\nthe item that\u2019s been tapped.", "Remember: Screens are just widgets.\nIn this example, create a list of todos.\nWhen a todo is tapped, navigate to a new screen (widget) that\ndisplays information about the todo.\nThis recipe uses the following steps:", "First, you need a simple way to represent todos. For this example,\ncreate a class that contains two pieces of data: the title and description.", "Second, display a list of todos. In this example, generate\n20 todos and show them using a ListView.\nFor more information on working with lists,\nsee the Use lists recipe.", "So far, so good.\nThis generates 20 todos and displays them in a ListView.", "For this, we create a StatelessWidget. We call it TodosScreen.\nSince the contents of this page won\u2019t change during runtime,\nwe\u2019ll have to require the list\nof todos within the scope of this widget.", "We pass in our ListView.builder as body of the widget we\u2019re returning to build().\nThis\u2019ll render the list on to the screen for you to get going!", "With Flutter\u2019s default styling, you\u2019re good to go without sweating about \nthings that you\u2019d like to do later on!", "Now, create the second screen. The title of the screen contains the\ntitle of the todo, and the body of the screen shows the description.", "Since the detail screen is a normal StatelessWidget,\nrequire the user to enter a Todo in the UI.\nThen, build the UI using the given todo.", "With a DetailScreen in place,\nyou\u2019re ready to perform the Navigation.\nIn this example, navigate to the DetailScreen when a user\ntaps a todo in the list. Pass the todo to the DetailScreen.", "To capture the user\u2019s tap in the TodosScreen, write an onTap()\ncallback for the ListTile widget. Within the onTap() callback,\nuse the Navigator.push() method.", "Repeat the first two steps.", "Next, create a detail screen that extracts and displays the title and description from the Todo. To access the Todo, use the ModalRoute.of() method. This method returns the current route with the arguments.", "Finally, navigate to the DetailScreen when a user taps\na ListTile widget using Navigator.push().\nPass the arguments as part of the RouteSettings.\nThe DetailScreen extracts these arguments.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/navigation/passing-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Testing plugins | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "All of the usual types of Flutter tests apply to\nplugin packages as well, but because plugins contain\nnative code they often also require other kinds of tests\nto test all of their functionality.", "info Note:\n  To learn how to test your plugin code, read on.\n  To learn how to avoid crashes from a plugin when\n  testing your Flutter app, check out\n  Plugins in Flutter tests.", "To see examples of each of these types of tests, you can\ncreate a new plugin from the plugin template\nand look in the indicated directories.", "Dart unit tests and widget tests.\nThese tests allow you to test the Dart portion of your plugin\njust as you would test the Dart code of a non-plugin package.\nHowever, the plugin\u2019s native code won\u2019t be loaded,\nso any calls to platform channels need to be mocked in tests.", "See the test directory for an example.", "Dart integration tests.\nSince integration tests run in the context of a\nFlutter application (the example app),\nthey can test both the Dart and native code,\nas well as the interaction between them.\nThey are also useful for unit testing web implementation\ncode that needs to run in a browser.", "These are often the most important tests for a plugin.\nHowever, Dart integration tests can\u2019t interact with native UI,\nsuch as native dialogs or the contents of platform views.", "See the  example/integration_test directory for an example.", "Native unit tests.\nJust as Dart unit tests can test the Dart portions\nof a plugin in isolation, native unit tests can\ntest the native parts in isolation.\nEach platform has its own native unit test system,\nand the tests are written in the same native languages\nas the code it is testing.", "Native unit tests can be especially valuable\nif you need to mock out APIs wrapped by your plugin code,\nwhich isn\u2019t possible in a Dart integration test.", "You can set up and use any native test frameworks\nyou are familiar with for each platform,\nbut the following are already configured in the plugin template:", "Android:\nJUnit tests can be found in android/src/test/.", "iOS and macOS:\nXCTest tests can be found in example/ios/RunnerTests/\nand example/macos/RunnerTests/ respectively.\nThese are in the example directory,\nnot the top-level package directory,\nbecause they are run via the example app\u2019s project.", "Linux and Windows:\nGoogleTest tests can be found in linux/test/\nand windows/test/, respectively.", "Other types of tests, which aren\u2019t currently pre-configured\nin the template, are native UI tests.\nRunning your application under a native UI testing framework,\nsuch as Espresso or XCUITest,\nenables tests that interact with both native and Flutter UI elements,\nso can be useful if your plugin can\u2019t be tested without\nnative UI interactions.", "These can be run like any other Flutter unit tests,\neither from your preferred Flutter IDE,\nor using flutter test.", "For information on running this type of test, check out the\nintegration test documentation.\nThe commands must be run in the example directory.", "For all platforms, you need to build the example\napplication at least once before running the unit tests,\nto ensure that all of the platform-specific build\nfiles have been created.", "If you have the example opened as an Android project\nin Android Studio, you can run the unit tests using\nthe Android Studio test UI.", "To run the tests from the command line,\nuse the following command in the example/android directory:", "iOS and macOS XCTest", "If you have the example app opened in Xcode,\nyou can run the unit tests using the Xcode Test UI.", "To run the tests from the command line,\nuse the following command in the example/ios (for iOS)\nor example/macos (for macOS) directory:", "For iOS tests, you might need to first open\nRunner.xcworkspace in Xcode to configure code signing.", "To run the tests from the command line,\nuse the following command in the example directory,\nreplacing \u201cmy_plugin\u201d with your plugin project name:", "If you built the example app in release mode rather than\ndebug, replace \u201cdebug\u201d with \u201crelease\u201d.", "If you have the example app opened in Visual Studio,\nyou can run the unit tests using the Visual Studio test UI.", "To run the tests from the command line,\nuse the following command in the example directory,\nreplacing \u201cmy_plugin\u201d with your plugin project name:", "If you built the example app in release mode rather\nthan debug, replace \u201cDebug\u201d with \u201cRelease\u201d.", "The general advice for testing Flutter projects\napplies to plugins as well.\nSome extra considerations for plugin testing:", "Since only integration tests can test the communication\nbetween Dart and the native languages,\ntry to have at least one integration test of each\nplatform channel call.", "If some flows can\u2019t be tested using integration\ntests\u2014for example if they require interacting with\nnative UI or mocking device state\u2014consider writing\n\u201cend to end\u201d tests of the two halves using unit tests:", "Native unit tests that set up the necessary mocks,\nthen call into the method channel entry point\nwith a synthesized call and validate the method response.", "Dart unit tests that mock the platform channel,\nthen call the plugin\u2019s public API and validate the results.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//testing/testing-plugins", "base_url": "https://docs.flutter.dev/"}, {"title": "Create a scrolling parallax effect | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "When you scroll a list of cards (containing images,\nfor example) in an app, you might notice that those\nimages appear to scroll more slowly than the rest of the \nscreen. It almost looks as if the cards in the list\nare in the foreground, but the images themselves sit\nfar off in the distant background. This effect is \nknown as parallax.", "In this recipe, you create the parallax effect by building\na list of cards (with rounded corners containing some text).\nEach card also contains an image.\nAs the cards slide up the screen,\nthe images within each card slide down.", "The following animation shows the app\u2019s behavior:", "To display a list of parallax scrolling images,\nyou must first display a list.", "Create a new stateless widget called ParallaxRecipe.\nWithin ParallaxRecipe, build a widget tree with a\nSingleChildScrollView and a Column, which forms \na list.", "Each list item displays a rounded-rectangle background\nimage, exemplifying one of seven locations in the world.\nStacked on top of that background image is the \nname of the location and its country,\npositioned in the lower left. Between the \nbackground image and the text is a dark gradient,\nwhich improves the legibility \nof the text against the background.", "Implement a stateless widget called LocationListItem\nthat consists of the previously mentioned visuals.\nFor now, use a static Image widget for the background.\nLater, you\u2019ll replace that widget with a parallax version.", "Next, add the list items to your ParallaxRecipe widget.", "You now have a typical, scrollable list of cards\nthat displays seven unique locations in the world.\nIn the next step, you add a parallax effect to the \nbackground image.", "A parallax scrolling effect is achieved by slightly\npushing the background image in the opposite direction\nof the rest of the list. As the list items slide up \nthe screen, each background image slides slightly downward.\nConversely, as the list items slide down the screen,\neach background image slides slightly upward. \nVisually, this results in parallax.", "The parallax effect depends on the list item\u2019s\ncurrent position within its ancestor Scrollable.\nAs the list item\u2019s scroll position changes, the position\nof the list item\u2019s background image must also change.\nThis is an interesting problem to solve. The position\nof a list item within the Scrollable isn\u2019t \navailable until Flutter\u2019s layout phase is complete.\nThis means that the position of the background image\nmust be determined in the paint phase, which comes after \nthe layout phase. Fortunately, Flutter provides a widget\ncalled Flow, which is specifically designed to give you\ncontrol over the transform of a child widget immediately\nbefore the widget is painted. In other words,\nyou can intercept the painting phase and take control\nto reposition your child widgets however you want.", "info Note:\n  To learn more, watch this short Widget of the Week video on the Flow widget:", "info Note:\n  In cases where you need control over what a child paints,\n  rather than where a child is painted,\n  consider using a CustomPaint widget.", "In cases where you need control over the layout,\n  painting, and hit testing, consider defining a\n  custom RenderBox.", "Wrap your background Image widget with a\nFlow widget.", "Introduce a new FlowDelegate called ParallaxFlowDelegate.", "A FlowDelegate controls how its children are sized\nand where those children are painted. In this case,\nyour Flow widget has only one child: the background \nimage. That image must be exactly as wide as the Flow widget.", "Return tight width constraints for your background image child.", "Your background images are now sized appropriately.\nBut, you still need to calculate the vertical position\nof each background image based on its scroll \nposition, and then paint it.", "There are three critical pieces of information that\nyou need to compute the desired position of a\nbackground image:", "To look up the bounds of the Scrollable,\nyou pass a ScrollableState into your FlowDelegate.", "To look up the bounds of your individual list item,\nyou pass your list item\u2019s BuildContext into your FlowDelegate.", "To look up the final size of your background image,\nyou assign a GlobalKey to your Image widget,\nand then you pass that GlobalKey into your \nFlowDelegate.", "Make this information available to ParallaxFlowDelegate.", "Having all the information needed to implement\nparallax scrolling, implement the shouldRepaint() method.", "Now, implement the layout calculations for the parallax effect.", "First, calculate the pixel position of a list\nitem within its ancestor Scrollable.", "Use the pixel position of the list item to calculate its\npercentage from the top of the Scrollable.\nA list item at the top of the scrollable area should \nproduce 0%, and a list item at the bottom of the\nscrollable area should produce 100%.", "Use the scroll percentage to calculate an Alignment.\nAt 0%, you want Alignment(0.0, -1.0),\nand at 100%, you want Alignment(0.0, 1.0).\nThese coordinates correspond to top and bottom\nalignment, respectively.", "Use verticalAlignment, along with the size of the\nlist item and the size of the background image,\nto produce a Rect that determines where the \nbackground image should be positioned.", "Using childRect, paint the background image with\nthe desired translation transformation.\nIt\u2019s this transformation over time that gives you the \nparallax effect.", "You need one final detail to achieve the parallax effect.\nThe ParallaxFlowDelegate repaints when the inputs change,\nbut the ParallaxFlowDelegate doesn\u2019t repaint every time\nthe scroll position changes.", "Pass the ScrollableState\u2019s ScrollPosition to\nthe FlowDelegate superclass so that the FlowDelegate\nrepaints every time the ScrollPosition changes.", "Congratulations!\nYou now have a list of cards with parallax,\nscrolling background images.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/effects/parallax-scrolling", "base_url": "https://docs.flutter.dev/"}, {"title": "Flutter release notes | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This page links to announcements and release notes for\nreleases to the stable channel.", "info Note:\n  For information about bug-fix releases, check out\n  Hotfixes to the Stable Channel on the Flutter wiki.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//release/release-notes", "base_url": "https://docs.flutter.dev/"}, {"title": "Create a grid list | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "In some cases, you might want to display your items as a grid rather than\na normal list of items that come one after the next.\nFor this task, use the GridView widget.", "The simplest way to get started using grids is by using the\nGridView.count() constructor,\nbecause it allows you to specify how many rows or columns you\u2019d like.", "To visualize how GridView works,\ngenerate a list of 100 widgets that display their index in the list.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/lists/grid-lists", "base_url": "https://docs.flutter.dev/"}, {"title": "Update data over the internet | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Updating data over the internet is necessary for most apps.\nThe http package has got that covered!", "This recipe uses the following steps:", "To add the http package as a dependency,\nrun flutter pub add:", "Import the http package.", "This recipe covers how to update an album title to the\nJSONPlaceholder using the http.put() method.", "The http.put() method returns a Future that contains a Response.", "While it\u2019s easy to make a network request,\nworking with a raw Future<http.Response>\nisn\u2019t very convenient. To make your life easier,\nconvert the http.Response into a Dart object.", "First, create an Album class that contains the data from the\nnetwork request. It includes a factory constructor that\ncreates an Album from JSON.", "Converting JSON by hand is only one option.\nFor more information, see the full article on\nJSON and serialization.", "Now, use the following steps to update the updateAlbum()\nfunction to return a Future<Album>:", "Hooray!\nNow you\u2019ve got a function that updates the title of an album.", "Get the data from internet before you can update it.\nFor a complete example, see the Fetch data recipe.", "Ideally, you will use this method to set\n_futureAlbum during initState to fetch\nthe data from the internet.", "Create a TextField to enter a title and a ElevatedButton\nto update the data on server.\nAlso define a TextEditingController to\nread the user input from a TextField.", "When the ElevatedButton is pressed,\nthe _futureAlbum is set to the value returned by\nupdateAlbum() method.", "On pressing the Update Data button, a network request\nsends the data in the TextField to the server as a PUT request.\nThe _futureAlbum variable is used in the next step.", "To display the data on screen, use the\nFutureBuilder widget.\nThe FutureBuilder widget comes with Flutter and\nmakes it easy to work with async data sources.\nYou must provide two parameters:", "Note that snapshot.hasData only returns true when\nthe snapshot contains a non-null data value.\nThis is why the updateAlbum function should throw an exception\neven in the case of a \u201c404 Not Found\u201d server response.\nIf updateAlbum returns null then\nCircularProgressIndicator will display indefinitely.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/networking/update-data", "base_url": "https://docs.flutter.dev/"}, {"title": "Drag a UI element | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Drag and drop is a common mobile app interaction.\nAs the user long presses (sometimes called touch & hold)\non a widget, another widget appears beneath the\nuser\u2019s finger, and the user drags the widget to a\nfinal location and releases it.\nIn this recipe, you\u2019ll build a drag-and-drop interaction\nwhere the user long presses on a choice of food,\nand then drags that food to the picture of the customer who\nis paying for it.", "The following animation shows the app\u2019s behavior:", "This recipe begins with a prebuilt list of menu items and\na row of customers.\nThe first step is to recognize a long press\nand display a draggable photo of a menu item.", "Flutter provides a widget called LongPressDraggable\nthat provides the exact behavior that you need to begin\na drag-and-drop interaction. A LongPressDraggable\nwidget recognizes when a long press occurs and then \ndisplays a new widget near the user\u2019s finger.\nAs the user drags, the widget follows the user\u2019s finger.\nLongPressDraggable gives you full control over the \nwidget that the user drags.", "Each menu list item is displayed with a custom\nMenuListItem widget.", "Wrap the MenuListItem widget with a LongPressDraggable widget.", "In this case, when the user long presses on the\nMenuListItem widget, the LongPressDraggable\nwidget displays a DraggingListItem.\nThis DraggingListItem displays a photo of the\nselected food item, centered beneath \nthe user\u2019s finger.", "The dragAnchorStrategy property is set to\npointerDragAnchorStrategy.\nThis property value instructs LongPressDraggable\nto base the DraggableListItem\u2019s position on the \nuser\u2019s finger. As the user moves a finger,\nthe DraggableListItem moves with it.", "Dragging and dropping is of little use if no information\nis transmitted when the item is dropped.\nFor this reason, LongPressDraggable takes a data parameter. \nIn this case, the type of data is Item,\nwhich holds information about the \nfood menu item that the user pressed on.", "The data associated with a LongPressDraggable\nis sent to a special widget called DragTarget,\nwhere the user releases the drag gesture.\nYou\u2019ll implement the drop behavior next.", "The user can drop a LongPressDraggable wherever they choose,\nbut dropping the draggable has no effect unless it\u2019s dropped\non top of a DragTarget. When the user drops a draggable on\ntop of a DragTarget widget, the DragTarget widget \ncan either accept or reject the data from the draggable.", "In this recipe, the user should drop a menu item on a\nCustomerCart widget to add the menu item to the user\u2019s cart.", "Wrap the CustomerCart widget with a DragTarget widget.", "The DragTarget displays your existing widget and\nalso coordinates with LongPressDraggable to recognize\nwhen the user drags a draggable on top of the DragTarget.\nThe DragTarget also recognizes when the user drops\na draggable on top of the DragTarget widget.", "When the user drags a draggable on the DragTarget widget,\ncandidateItems contains the data items that the user is dragging.\nThis draggable allows you to change what your widget looks\nlike when the user is dragging over it. In this case,\nthe Customer widget turns red whenever any items are dragged above the \nDragTarget widget. The red visual appearance is configured with the \nhighlighted property within the CustomerCart widget.", "When the user drops a draggable on the DragTarget widget,\nthe onAccept callback is invoked. This is when you get\nto decide whether or not to accept the data that was dropped.\nIn this case, the item is always accepted and processed. \nYou might choose to inspect the incoming item to make a\ndifferent decision.", "Notice that the type of item dropped on DragTarget\nmust match the type of the item dragged from LongPressDraggable.\nIf the types are not compatible, then \nthe onAccept method isn\u2019t invoked.", "With a DragTarget widget configured to accept your\ndesired data, you can now transmit data from one part\nof your UI to another by dragging and dropping.", "In the next step,\nyou update the customer\u2019s cart with the dropped menu item.", "Each customer is represented by a Customer object,\nwhich maintains a cart of items and a price total.", "The CustomerCart widget displays the customer\u2019s photo,\nname, total, and item count based on a Customer instance.", "To update a customer\u2019s cart when a menu item is dropped,\nadd the dropped item to the associated Customer object.", "The _itemDroppedOnCustomerCart method is invoked in\nonAccept() when the user drops a menu item on a\nCustomerCart widget. By adding the dropped item to the \ncustomer object, and invoking setState() to cause a\nlayout update, the UI refreshes with the new customer\u2019s\nprice total and item count.", "Congratulations! You have a drag-and-drop interaction\nthat adds food items to a customer\u2019s shopping cart.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//cookbook/effects/drag-a-widget", "base_url": "https://docs.flutter.dev/"}, {"title": "Online courses | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Learn how to build Flutter apps with these video courses.\nBefore signing up for a course, verify that it includes\nup-to-date information, such as null-safe Dart code.\nThese courses are listed alphabetically.\nTo include your course, submit a PR:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//resources/courses", "base_url": "https://docs.flutter.dev/"}, {"title": "Add Flutter to an existing app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "It\u2019s sometimes not practical to rewrite your entire application in\nFlutter all at once. For those situations,\nFlutter can be integrated into your existing\napplication piecemeal, as a library or module.\nThat module can then be imported into your Android or iOS\n(currently supported platforms) app to render a part of your\napp\u2019s UI in Flutter. Or, just to run shared Dart logic.", "In a few steps, you can bring the productivity and the expressiveness of\nFlutter into your own app.", "The add-to-app feature supports integrating multiple instances of any screen size.\nThis can help scenarios such as a hybrid navigation stack with mixed\nnative and Flutter screens, or a page with multiple partial-screen Flutter\nviews.", "Having multiple Flutter instances allows each instance to maintain\nindependent application and UI state while using minimal\nmemory resources. See more in the multiple Flutters page.", "See our add-to-app GitHub Samples repository\nfor sample projects in Android and iOS that import\na Flutter module for UI.", "To get started, see our project integration guide for\nAndroid and iOS:", "After Flutter is integrated into your project,\nsee our API usage guides at the following links:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app", "base_url": "https://docs.flutter.dev/"}, {"title": "Integrate a Flutter module into your Android project | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter can be embedded into your existing Android\napplication piecemeal, as a source code Gradle\nsubproject or as AARs.", "The integration flow can be done using the Android Studio\nIDE with the Flutter plugin or manually.", "report_problem Warning:\n  Your existing Android app might support architectures\n  such as mips or x86. Flutter currently only supports\n  building ahead-of-time (AOT) compiled libraries\n  for x86_64, armeabi-v7a, and arm64-v8a.", "Consider using the abiFilters Android Gradle\n  Plugin API to limit the supported architectures in your APK.\n  Doing this avoids a missing libflutter.so runtime crash,\n  for example:", "The Flutter engine has an x86 and x86_64 version.\n  When using an emulator in debug Just-In-Time (JIT) mode,\n  the Flutter module still runs correctly.", "The Android Studio IDE can help integrate your Flutter module.\nUsing Android Studio, you can edit both your Android and Flutter code\nin the same IDE.", "You can also use IntelliJ Flutter plugin functionality like\nDart code completion, hot reload, and widget inspector.", "Android Studio supports add-to-app flows on Android Studio 2022.2 or later\nwith the Flutter plugin for IntelliJ.\nTo build your app, the Android Studio plugin configures your\nAndroid project to add your Flutter module as a dependency.", "Open your Android project in Android Studio.", "Go to File > New > New Project\u2026.\n The New Project dialog displays.", "If asked to provide your Flutter SDK path, do so and click Next.", "Complete the configuration of your Flutter module.", "If you have an existing project:", "If you need to create a new Flutter project:", "tips_and_updates Tip:\n  By default, your project\u2019s Project pane might show the \u2018Android\u2019 view.\n  If you can\u2019t see your new Flutter files in the Project pane,\n  set your Project pane to display Project Files.\n  This shows all files without filtering.", "To integrate a Flutter module with an existing Android app\nmanually, without using Flutter\u2019s Android Studio plugin,\nfollow these steps:", "Let\u2019s assume that you have an existing Android app at\nsome/path/MyApp, and that you want your Flutter\nproject as a sibling:", "This creates a some/path/flutter_module/ Flutter module project\nwith some Dart code to get you started and an .android/\nhidden subfolder. The .android folder contains an\nAndroid project that can both help you run a barebones\nstandalone version of your Flutter module via flutter run\nand it\u2019s also a wrapper that helps bootstrap the Flutter\nmodule an embeddable Android library.", "info Note:\n  Add custom Android code to your own existing\n  application\u2019s project or a plugin,\n  not to the module in .android/.\n  Changes made in your module\u2019s .android/\n  directory won\u2019t appear in your existing Android\n  project using the module.", "Do not source control the .android/ directory\n  since it\u2019s autogenerated. Before building the\n  module on a new machine, run flutter pub get\n  in the flutter_module directory first to regenerate\n  the .android/ directory before building the\n  Android project using the Flutter module.", "info Note:\n  To avoid Dex merging issues, flutter.androidPackage should\n  not be identical to your host app\u2019s package name.", "Flutter requires your project to declare compatibility with Java 11 or later.", "Before attempting to connect your Flutter module project\nto your host Android app, ensure that your host Android\napp declares the following source compatibility within your\napp\u2019s build.gradle file, under the android { } block.", "Add the Flutter module as a dependency of your\nexisting app in Gradle. You can achieve this in two ways.", "Android archive\n The AAR mechanism creates generic Android AARs as\n intermediaries that packages your Flutter module.\n This is good when your downstream app builders don\u2019t\n want to have the Flutter SDK installed. But,\n it adds one more build step if you build frequently.", "Module source code\n The source code subproject mechanism is a convenient\n one-click build process, but requires the Flutter SDK.\n This is the mechanism used by the Android Studio IDE plugin.", "This option packages your Flutter library as a generic local\nMaven repository composed of AARs and POMs artifacts.\nThis option allows your team to build the host app without\ninstalling the Flutter SDK. You can then distribute the\nartifacts from a local or remote repository.", "Let\u2019s assume you built a Flutter module at\nsome/path/flutter_module, and then run:", "Then, follow the on-screen instructions to integrate.", "More specifically, this command creates\n(by default all debug/profile/release modes)\na local repository, with the following files:", "To depend on the AAR, the host app must be able\nto find these files.", "To do that, edit app/build.gradle in your host app\nso that it includes the local repository and the dependency:", "error Important:\n  If you\u2019re located in China, use a mirror site rather than the\n  storage.googleapis.com domain. To learn more about mirror sites,\n  check out Using Flutter in China page.", "tips_and_updates Tip:\n  You can also build an AAR for your Flutter module in Android Studio using\n  the Build > Flutter > Build AAR menu.", "This option enables a one-step build for both your\nAndroid project and Flutter project. This option is\nconvenient when you work on both parts simultaneously\nand rapidly iterate, but your team must install the\nFlutter SDK to build the host app.", "tips_and_updates Tip:\n  By default, the host app provides the :app Gradle project.\n  To change the name of this project, set\n  flutter.hostAppProjectName in the Flutter module\u2019s\n  gradle.properties file.\n  Include this project in the host app\u2019s settings.gradle file.", "Include the Flutter module as a subproject in the host app\u2019s\nsettings.gradle. This example assumes flutter_module and MyApp\nexist in the same directory", "The binding and script evaluation allows the Flutter\nmodule to include itself (as :flutter) and any\nFlutter plugins used by the module (as :package_info,\n:video_player, etc) in the evaluation context of\nyour settings.gradle.", "Introduce an implementation dependency on the Flutter\nmodule from your app:", "Your app now includes the Flutter module as a dependency.", "Continue to the Adding a Flutter screen to an Android app guide.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android/project-setup", "base_url": "https://docs.flutter.dev/"}, {"title": "Manage plugins and dependencies in add-to-app | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "This guide describes how to set up your project to consume\nplugins and how to manage your Gradle library dependencies\nbetween your existing Android app and your Flutter module\u2019s plugins.", "In the simple cases:", "There are no additional steps needed. Your add-to-app\nmodule will work the same way as a full-Flutter app.\nWhether you integrate using Android Studio, \nGradle subproject or AARs,\ntransitive Android Gradle libraries are automatically\nbundled as needed into your outer existing app.", "Some plugins require you to make some edits to the\nAndroid side of your project.", "For example, the integration instructions for the\nfirebase_crashlytics plugin require manual\nedits to your Android wrapper project\u2019s build.gradle file.", "For full-Flutter apps, these edits are done in your\nFlutter project\u2019s /android/ directory.", "In the case of a Flutter module, there are only Dart\nfiles in your module project. Perform those Android\nGradle file edits on your outer, existing Android\napp rather than in your Flutter module.", "info Note:\n  Astute readers might notice that the Flutter module\n  directory also contains an .android and an\n  .ios directory. Those directories are Flutter-tool-generated\n  and are only meant to bootstrap Flutter into generic\n  Android or iOS libraries. They should not be edited or checked-in.\n  This allows Flutter to improve the integration point should\n  there be bugs or updates needed with new versions of Gradle,\n  Android, Android Gradle Plugin, etc.", "For advanced users, if more modularity is needed and you must\n  not leak knowledge of your Flutter module\u2019s dependencies into\n  your outer host app, you can rewrap and repackage your Flutter\n  module\u2019s Gradle library inside another native Android Gradle\n  library that depends on the Flutter module\u2019s Gradle library.\n  You can make your Android specific changes such as editing the\n  AndroidManifest.xml, Gradle files or adding more Java files\n  in that wrapper library.", "The scenario that requires slightly more attention is if\nyour existing Android application already depends on the\nsame Android library that your Flutter module\ndoes (transitively via a plugin).", "For instance, your existing app\u2019s Gradle might already have:", "And your Flutter module also depends on\nfirebase_crashlytics via pubspec.yaml:", "This plugin usage transitively adds a Gradle dependency again via\nfirebase_crashlytics v0.1.3\u2019s own Gradle file:", "The two com.crashlytics.sdk.android:crashlytics dependencies\nmight not be the same version. In this example,\nthe host app requested v2.10.1 and the Flutter\nmodule plugin requested v2.9.9.", "By default, Gradle v5\nresolves dependency version conflicts\nby using the newest version of the library.", "This is generally ok as long as there are no API\nor implementation breaking changes between the versions.\nFor example, you might use the new Crashlytics library\nin your existing app as follows:", "This approach won\u2019t work since there are major API differences\nbetween the Crashlytics\u2019 Gradle library version\nv17.0.0-beta03 and v2.9.9.", "For Gradle libraries that follow semantic versioning,\nyou can generally avoid compilation and runtime errors\nby using the same major semantic version in your\nexisting app and Flutter module plugin.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//add-to-app/android/plugin-setup", "base_url": "https://docs.flutter.dev/"}, {"title": "Binding to native macOS code using dart:ffi | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Flutter mobile and desktop apps can use the\ndart:ffi library to call native C APIs.\nFFI stands for foreign function interface.\nOther terms for similar functionality include\nnative interface and language bindings.", "info Note:\n  This page describes using the dart:ffi library\n  in macOS desktop apps.\n  For information on Android, see\n  Binding to native Android code using dart:ffi.\n  For information on iOS, see\n  Binding to native iOS code using dart:ffi.\n  This feature is not yet supported for web plugins.", "Before your library or program can use the FFI library\nto bind to native code, you must ensure that the\nnative code is loaded and its symbols are visible to Dart.\nThis page focuses on compiling, packaging,\nand loading macOS native code within a Flutter plugin or app.", "This tutorial demonstrates how to bundle C/C++\nsources in a Flutter plugin and bind to them using\nthe Dart FFI library on macOS.\nIn this walkthrough, you\u2019ll create a C function\nthat implements 32-bit addition and then\nexposes it through a Dart plugin named \u201cnative_add\u201d.", "A native library can be linked into an app either\ndynamically or statically. A statically linked library\nis embedded into the app\u2019s executable image,\nand is loaded when the app starts.", "Symbols from a statically linked library can be\nloaded using DynamicLibrary.executable or\nDynamicLibrary.process.", "A dynamically linked library, by contrast, is distributed\nin a separate file or folder within the app,\nand loaded on-demand. On macOS, the dynamically linked\nlibrary is distributed as a .framework folder.", "A dynamically linked library can be loaded into\nDart using DynamicLibrary.open.", "API documentation is available from the Dart dev channel:\nDart API reference documentation.", "If you already have a plugin, skip this step.", "To create a plugin called \u201cnative_add\u201d,\ndo the following:", "info Note:\n  You can exclude platforms from --platforms that you don\u2019t want\n  to build to. However, you need to include the platform of \n  the device you are testing on.", "You need to inform the macOS build system about the\nnative code so the code can be compiled\nand linked appropriately into the final application.", "Add the sources to the macos folder,\nbecause CocoaPods doesn\u2019t allow including sources\nabove the podspec file.", "The FFI library can only bind against C symbols,\nso in C++ these symbols must be marked extern C.\nYou should also add attributes to indicate that the\nsymbols are referenced from Dart,\nto prevent the linker from discarding the symbols\nduring link-time optimization.", "For example,\nto create a C++ file named macos/Classes/native_add.cpp,\nuse the following instructions. (Note that the template\nhas already created this file for you.) Start from the\nroot directory of your project:", "On macOS, you need to tell Xcode to statically link the file:", "In this example, you can add the following code to\nlib/native_add.dart. However the location of the\nDart binding code isn\u2019t important.", "First, you must create a DynamicLibrary handle to\nthe native code.", "With a handle to the enclosing library,\nyou can resolve the native_add symbol:", "Finally, you can call it. To demonstrate this within\nthe auto-generated \u201cexample\u201d app (example/lib/main.dart):", "Dynamically linked libraries are automatically loaded by\nthe dynamic linker when the app starts. Their constituent\nsymbols can be resolved using DynamicLibrary.process.\nYou can also get a handle to the library with\nDynamicLibrary.open to restrict the scope of\nsymbol resolution, but it\u2019s unclear how Apple\u2019s\nreview process handles this.", "Symbols statically linked into the application binary\ncan be resolved using DynamicLibrary.executable or\nDynamicLibrary.process.", "To link against a platform library,\nuse the following instructions:", "A first-party native library can be included either\nas source or as a (signed) .framework file.\nIt\u2019s probably possible to include statically linked\narchives as well, but it requires testing.", "To link directly to source code,\nuse the following instructions:", "Add the following prefix to the\nexported symbol declarations to ensure they\nare visible to Dart:", "To link to a compiled dynamic library,\nuse the following instructions:", "To add a closed source library to a\nFlutter macOS Desktop app,\nuse the following instructions:", "To learn more about C interoperability, check out these videos:", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/macos/c-interop", "base_url": "https://docs.flutter.dev/"}, {"title": "Web FAQ | Flutter", "contents": ["Google uses cookies to deliver its services, to personalize ads, and to \n      analyze traffic. You can adjust your privacy controls anytime in your \n      Google settings. \n      Learn more.\n    ", "Not every web page makes sense in Flutter, but we think Flutter is particularly\nsuited for app-centric experiences:", "At this time, Flutter is not suitable for static websites with text-rich\nflow-based content. For example, blog articles benefit from the document-centric\nmodel that the web is built around, rather than the app-centric services that a\nUI framework like Flutter can deliver. However, you can use Flutter to embed\ninteractive experiences into these websites.", "For more information on how you can use Flutter on the web,\nsee Web support for Flutter.", "In general, Flutter is geared towards dynamic application experiences. Flutter\u2019s\nweb support is no exception. Flutter web prioritizes performance, fidelity, and\nconsistency. This means application output does not align with what search\nengines need to properly index. For web content that is static or document-like,\nwe recommend using HTML\u2014just like we do on flutter.dev,\ndart.dev, and pub.dev. You should also\nconsider separating your primary application experience\u2014created in Flutter\u2014from\nyour landing page, marketing content, and help content\u2014created using\nsearch-engine optimized HTML.", "See building a web app with Flutter.", "No, but you can use hot restart. Hot restart is a fast way of seeing your\nchanges without having to relaunch your web app and wait for it to compile and\nload. This works similarly to the hot reload feature for Flutter mobile\ndevelopment. The only difference is that hot reload remembers your state and hot\nrestart doesn\u2019t.", "You can either use the browser\u2019s refresh button,\nor you can enter \u201cR\u201d in the console where\n\u201cflutter run -d chrome\u201d is running.", "Flutter web apps can run on the following browsers:", "During development, Chrome (on macOS, Windows, and Linux) and Edge (on Windows)\nare supported as the default browsers for debugging your app.", "You can select Chrome or Edge as the target device in\nAndroid Studio/IntelliJ and VS Code.", "The device pulldown should now include the Chrome (web)\noption for all channels.", "See Creating responsive apps.", "No. The file system is not accessible from the browser.\nFor network functionality, use the http\npackage. Note that security works somewhat\ndifferently because the browser (and not the app)\ncontrols the headers on an HTTP request.", "Some plugins require platform-specific imports, particularly if they use the\nfile system, which is not accessible from the browser. To use these plugins\nin your app, see the documentation for conditional imports\non dart.dev.", "Dart\u2019s concurrency support via isolates\nis not currently supported in Flutter web.", "Flutter web apps can potentially work around this\nby using web workers,\nalthough no such support is built in.", "You can embed a Flutter web app,\nas you would embed other content,\nin an iframe tag of an HTML file.\nIn the following example, replace \u201cURL\u201d\nwith the location of your hosted HTML page:", "If you encounter problems, please file an issue.", "Use Flutter DevTools for the following tasks:", "Use Chrome DevTools for the following tasks:", "Use widget tests or integration tests. To learn more about\nrunning integration tests in a browser, see the Integration testing page.", "See Preparing a web app for release.", "\n            Except as otherwise noted,\n            this work is licensed under a\n            Creative\n            Commons Attribution 4.0 International License,\n            and code samples are licensed under the BSD License.\n          "], "url": "https://docs.flutter.dev//platform-integration/web/faq", "base_url": "https://docs.flutter.dev/"}]